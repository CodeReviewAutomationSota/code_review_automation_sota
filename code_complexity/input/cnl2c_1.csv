"id","input","target","work"
32032,"class _ { public void testGatewayScatterGather() {
Message<?> bestQuoteMessage = this.gateway.exchange(new GenericMessage<String>(""foo""));
Object payload = bestQuoteMessage.getPayload();
assertThat(payload, instanceOf(List.class));
 assertThat(((List) payload).size(), greaterThanOrEqualTo(1));
 } }","class _ { public void testGatewayScatterGather() {
Message<?> bestQuoteMessage = this.gateway.exchange(new GenericMessage<String>(""foo""));
Object payload = bestQuoteMessage.getPayload();
assertThat(payload, instanceOf(List.class));
assertThat(((List<?>) payload).size(), greaterThanOrEqualTo(1));
} }",1
32052,"class _ { public void unsupportedDatabaseTypeIdentified() {
 IllegalArgumentException thrown = Assertions.assertThrows(IllegalArgumentException.class,  () -> new DatabaseInitializer(""a2"", ds, environmentCreateOnStartup(""true"")));
assertThat(thrown.getMessage(), CoreMatchers.containsString(""No ddl script found""));
} }","class _ { public void unsupportedDatabaseTypeIdentified() {
IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new DatabaseInitializer(""a2"", ds, environmentCreateOnStartup(""true"")));
assertThat(thrown.getMessage(), containsString(""No ddl script found""));
} }",1
32079,"class _ { private static boolean isApiKey(String value) {
 if (Strings.isNullOrEmpty(value)) {
 return false;
} try {
UUID.fromString(value);
} catch (IllegalArgumentException e) {
return false;
} return true;
} }","class _ { private static boolean isApiKey(String value) {
if (isNullOrEmpty(value)) {
return false;
} try {
UUID.fromString(value);
} catch (IllegalArgumentException e) {
return false;
} return true;
} }",1
32099,"class _ {  public boolean loadSqlCipher(Context context) {
 try {
loadLibs(context);
} catch (UnsatisfiedLinkError ule) {
return extractAndLoadAgain(context, DATABASE_SQLCIPHER, getSupportedAbis());
} catch (Exception ex) {
Log.e(TAG, ""Error loading native libraries for Sqlcipher"", ex);
return false;
} return true;
} }","class _ { public static boolean loadSqlCipher(Context context) {
try {
loadLibs(context);
} catch (UnsatisfiedLinkError ule) {
return extractAndLoadAgain(context, DATABASE_SQLCIPHER, getSupportedAbis());
} catch (Exception ex) {
Log.e(TAG, ""Error loading native libraries for Sqlcipher"", ex);
return false;
} return true;
} }",1
32104,"class _ { public void freshTimestampsDelegatesToTimestampService() {
int numTimestamps = 10;
TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L);
 when(timestampService.getFreshTimestamps(10)).thenReturn(range);
 assertEquals(range, timelock.getFreshTimestamps(numTimestamps));
} }","class _ { public void freshTimestampsDelegatesToTimestampService() {
int numTimestamps = 10;
TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L);
when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range);
assertEquals(range, timelock.getFreshTimestamps(numTimestamps));
} }",1
32113,"class _ { public static long getTtlInSecsFromExpiryMs(long expiresAtMs, long creationTimeMs) {
if (expiresAtMs == Utils.Infinite_Time) {
return Utils.Infinite_Time;
}  return Math.max(0, TimeUnit.MILLISECONDS.toSeconds(expiresAtMs - creationTimeMs));
 } }","class _ { public static long getTtlInSecsFromExpiryMs(long expiresAtMs, long creationTimeMs) {
return expiresAtMs == Utils.Infinite_Time ? Utils.Infinite_Time : Math.max(0, TimeUnit.MILLISECONDS.toSeconds(expiresAtMs - creationTimeMs));
} }",1
32131,"class _ { private void assertQuery(String query, byte[] checksum) {
byte[] expected = (byte[]) computeActual(query).getOnlyValue();
for (int i = 0;
i < expected.length;
i++) {
System.err.print(expected[i] + "", "");
 }  assertEquals(computeActual(query).getOnlyValue(), checksum);
} }","class _ { private void assertQuery(String query, byte[] checksum) {
assertEquals(computeActual(query).getOnlyValue(), checksum);
} }",1
32161,"class _ { private static void writeTargetWeightsFile(final File ponFile, final File outputFile) {
Utils.regularReadableUserFile(ponFile);
try (final HDF5File file = new HDF5File(ponFile, HDF5File.OpenMode.READ_ONLY)) {
final HDF5PCACoveragePoN pon = new HDF5PCACoveragePoN(file);
 final double[] targetWeights = DoubleStream.of(pon.getTargetVariances()).boxed().mapToDouble(v -> 1/v).toArray();
 ParamUtils.writeValuesToFile(targetWeights, outputFile);
} } }","class _ { private static void writeTargetWeightsFile(final File ponFile, final File outputFile) {
Utils.regularReadableUserFile(ponFile);
try (final HDF5File file = new HDF5File(ponFile, HDF5File.OpenMode.READ_ONLY)) {
final HDF5PCACoveragePoN pon = new HDF5PCACoveragePoN(file);
final double[] targetWeights = DoubleStream.of(pon.getTargetVariances()).map(v -> 1 / v).toArray();
ParamUtils.writeValuesToFile(targetWeights, outputFile);
} } }",1
32199,"class _ { private char getChar() {
int rndNum = baseProducer.randomBetween(0, 35);
 if (rndNum < 10)  return (char)(49 + rndNum);
else return (char)(65 + rndNum - 10);
} }","class _ { private char getChar() {
int rndNum = baseProducer.randomBetween(0, 35);
if (rndNum < 10) {
return (char) (49 + rndNum);
} else {
return (char) (65 + rndNum - 10);
} } }",1
32202,"class _ { private Invocable lazyGetTemplateInvocable() {
if (templateInvocable == null) {
 synchronized(this) {
 templateInvocable = newTemplateInvocable(params);
} } return templateInvocable;
} }","class _ { private Invocable lazyGetTemplateInvocable() {
if (templateInvocable == null) {
templateInvocable = newTemplateInvocable(params);
} return templateInvocable;
} }",1
32223,"class _ { private void setObjectManagers(Set<String> affectedNamespaces, IObjectManager manager) {
for (String  string :  affectedNamespaces) {
getDelta(string).setObjectManager(manager);
} if (eventDelta != null) eventDelta.setObjectManager(manager);
} }","class _ { private void setObjectManagers(Set<String> affectedNamespaces, IObjectManager manager) {
for (String namespace : affectedNamespaces) {
getDelta(namespace).setObjectManager(manager);
} if (eventDelta != null) eventDelta.setObjectManager(manager);
} }",1
32231,"class _ { public void receiveCommand(String itemName, Command command) {
logger.trace(""receiveCommand({},{}) called."", itemName, command.toString());
if (this.eventPublisher == null) {
 logger.error(""receiveCommand(): eventPublisher is NULL. Should NEVER occur."");
 return;
} super.receiveCommand(itemName, command);
} }","class _ { public void receiveCommand(String itemName, Command command) {
logger.trace(""receiveCommand({},{}) called."", itemName, command.toString());
if (this.eventPublisher == null) {
logger.warn(""receiveCommand(): eventPublisher is NULL. Should NEVER occur."");
return;
} super.receiveCommand(itemName, command);
} }",1
32257,"class _ { public PostMessageField(String title, String value) {
this.title = title;
 this.value = value;
 } }","class _ { public PostMessageField(String title, String value) {
this(title, value, false);
} }",1
32281,"class _ { public void setParams(Object[] params) {
if (params.length != 1) {
throw new IllegalArgumentException(""expecting one parameter"");
}  setParams((Map<Object, Number>) params[0]);
 } }","class _ { public void setParams(Object[] params) {
if (params.length != 1) {
throw new IllegalArgumentException(""expecting one parameter"");
} setParams((Map<?, ?>) params[0]);
} }",1
32288,"class _ { public void doRun(IProgressMonitor monitor, String projectID) throws CoreException {
Object[] selection = getCheckedElements();
int totalSelected = selection.length;
if (totalSelected > 0) {
if (monitor == null) {
monitor = new NullProgressMonitor();
} SubMonitor submonitor = SubMonitor.convert(monitor, 1);
 submonitor.subTask(CUIPlugin.getResourceString(KEY_TITLE));
 convertProjects(selection, submonitor.split(1), projectID);
} } }","class _ { public void doRun(IProgressMonitor monitor, String projectID) throws CoreException {
Object[] selection = getCheckedElements();
int totalSelected = selection.length;
if (totalSelected > 0) {
SubMonitor submonitor = SubMonitor.convert(monitor, CUIPlugin.getResourceString(KEY_TITLE), 1);
convertProjects(selection, submonitor.split(1), projectID);
} } }",1
32299,"class _ { public AVideo(URL url) {
if (url == null)  throw new IllegalArgumentException(""null url"");
 _name = getName(url);
_url = url;
_isdata = DYNAMIC_STREAM;
_data = null;
_file = null;
} }","class _ { public AVideo(URL url) {
if (url == null) throw new IllegalArgumentException(""url cannot be null"");
_name = getName(url);
_url = url;
_isdata = DYNAMIC_STREAM;
_data = null;
_file = null;
} }",1
32302,"class _ {  private ValueArray convertToKey(ValueArray r, Boolean minmax) {
 if (r == null) {
return null;
} Value[] values = r.getList().clone();
ValueArray row = ValueArray.get(values);
if (minmax != null) {
values[values.length - 1] = ValueLong.get(minmax ? Long.MAX_VALUE : Long.MIN_VALUE);
} return row;
} }","class _ { private static ValueArray convertToKey(ValueArray r, Boolean minmax) {
if (r == null) {
return null;
} Value[] values = r.getList().clone();
ValueArray row = ValueArray.get(values);
if (minmax != null) {
values[values.length - 1] = ValueLong.get(minmax ? Long.MAX_VALUE : Long.MIN_VALUE);
} return row;
} }",1
32315,"class _ {  int getSpacing() {
 return 1;
} }","class _ { public int getSpacing() {
return 1;
} }",1
32318,"class _ { public boolean isUseBase() {
 if (useBase == null){
 return getDefault().useBase;
} return useBase;
} }","class _ { public boolean isUseBase() {
return useBase;
} }",1
32329,"class _ { public void add(final int index, final T element) {
try {
this.origin.add(index, element);
} catch (final IndexOutOfBoundsException ex) {
 throw new IllegalArgumentException(this.message, ex);
 } } }","class _ { public void add(final int index, final T element) {
try {
this.origin.add(index, element);
} catch (final IndexOutOfBoundsException ex) {
throw this.wrapException(ex);
} } }",1
32341,"class _ { @Override public E peek() {
lock.lock();
try {
if (queue.isEmpty()) {
 return null;
 } return queue.peek();
} catch (IOException e) {
QueueFile.<Error>getSneakyThrowable(e);
return null;
} finally {
lock.unlock();
} } }","class _ { @Override public E peek() {
lock.lock();
try {
return queue.peek();
} catch (IOException e) {
throw QueueFile.<Error>getSneakyThrowable(e);
} finally {
lock.unlock();
} } }",1
32343,"class _ { public void drawGridLines(Rectangle bounds, GC gc) {
if (!fGridLinesVisible) {
return;
} gc.setForeground(fGridLineColor);
gc.setAlpha(fGridLineColor.getAlpha());
for (int x : fTimeGraphScale.getTickList()) {
gc.drawLine(x, bounds.y, x, bounds.y + bounds.height);
}  gc.setAlpha(BLACK.getAlpha());
 } }","class _ { public void drawGridLines(Rectangle bounds, GC gc) {
if (!fGridLinesVisible) {
return;
} gc.setForeground(fGridLineColor);
gc.setAlpha(fGridLineColor.getAlpha());
for (int x : fTimeGraphScale.getTickList()) {
gc.drawLine(x, bounds.y, x, bounds.y + bounds.height);
} gc.setAlpha(OPAQUE);
} }",1
32352,"class _ {  public CommonPathCapabilities() {
 } }","class _ { private CommonPathCapabilities() {
} }",1
32353,"class _ { public FakeHttpServletRequest( Map<String, String> parameterMap, Cookie[] cookies, String workspace) {
this.parameterMap = parameterMap;
this.cookies = cookies;
this.workspace = workspace;
this.original = Optional.ofNullable( (ServletRequestAttributes) RequestContextHolder.getRequestAttributes())  .map(atts -> atts.getRequest());
 } }","class _ { public FakeHttpServletRequest( Map<String, String> parameterMap, Cookie[] cookies, String workspace) {
this.parameterMap = parameterMap;
this.cookies = cookies;
this.workspace = workspace;
this.original = Optional.ofNullable( (ServletRequestAttributes) RequestContextHolder.getRequestAttributes()) .map(ServletRequestAttributes::getRequest);
} }",1
32362,"class _ { public void setSpmMap(String spId, Host host) {
 spmMap.put(spId, host);
 } }","class _ { public void setSpmMap(String spId, Host host) {
this.spmMap.put(spId, host);
} }",1
32364,"class _ {  static <E,T> Validation<E,T> valid(Supplier<? extends T> supplier) {
 return new Valid<>(supplier.get());
} }","class _ { static <E,T> Validation<E,T> valid(Supplier<? extends T> supplier) {
Objects.requireNonNull(supplier, ""supplier is null"");
return new Valid<>(supplier.get());
} }",1
32383,"class _ {  private void checkPercentageValidity(int percentage, String message) {
 if (percentage < 0 || percentage > 100) {
throw new IllegalArgumentException(message);
} } }","class _ { private static void checkPercentageValidity(int percentage, String message) {
if (percentage < 0 || percentage > 100) {
throw new IllegalArgumentException(message);
} } }",1
32387,"class _ { public Cookie getCookie(String cookieName) {
 throw new IllegalStateException(""Not supported yet"");
 } }","class _ { public Cookie getCookie(String cookieName) {
throw new UnsupportedOperationException(""Not supported yet"");
} }",1
32393,"class _ { public void handleCheckStateChangedEvent(Collection<ITmfTreeViewerEntry> entries) {
cancelUpdate();
Iterable<TmfGenericTreeEntry> counterEntries = Iterables.filter(entries, TmfGenericTreeEntry.class);
Collection<@NonNull Long> selectedIds =  Lists.newArrayList(Iterables.transform(counterEntries,  e -> e.getModel().getId()));
if (!selectedIds.containsAll(fSelectedIds)) {
clearContent();
} fSelectedIds = selectedIds;
updateContent();
} }","class _ { public void handleCheckStateChangedEvent(Collection<ITmfTreeViewerEntry> entries) {
cancelUpdate();
Iterable<TmfGenericTreeEntry> counterEntries = Iterables.filter(entries, TmfGenericTreeEntry.class);
Collection<@NonNull Long> selectedIds = Sets.newHashSet(Iterables.transform(counterEntries, e -> e.getModel().getId()));
if (!selectedIds.containsAll(fSelectedIds)) {
clearContent();
} fSelectedIds = selectedIds;
updateContent();
} }",1
32404,"class _ { public List<PlanNode> getSources() {
 return Collections.singletonList(source);
 } }","class _ { public List<PlanNode> getSources() {
return singletonList(source);
} }",1
32432,"class _ { public String generateUuid() {
String uuid = UUID.randomUUID().toString();
 if (useHyphens) {
 uuid = uuid.replaceAll(""-"", """");
} return uuid;
} }","class _ { public String generateUuid() {
String uuid = UUID.randomUUID().toString();
if (!useHyphens) {
uuid = uuid.replaceAll(""-"", """");
} return uuid;
} }",1
32433,"class _ { protected Locale getLocaleFromRequest(final HttpServletRequest request) {
String localeString = getLocaleStringFromReferer(request);
 if (null == localeString) {
 localeString = getLocaleStringFromPath(request.getPathInfo());
} Locale locale = LocaleUtils.getLocaleFromString(localeString, true);
return locale;
} }","class _ { protected Locale getLocaleFromRequest(final HttpServletRequest request) {
String localeString = getLocaleStringFromReferer(request);
if (localeString == null) {
localeString = getLocaleStringFromPath(request.getPathInfo());
} Locale locale = LocaleUtils.getLocaleFromString(localeString, true);
return locale;
} }",1
32437,"class _ { public String toString() {
 return ""KinesisSupervisorSpec{"" +  ""dataSchema="" + getDataSchema() + "", tuningConfig="" + getTuningConfig() + "", ioConfig="" + getIoConfig() + "", suspended="" + isSuspended() + '}';
} }","class _ { public String toString() {
return ""KinesisSupervisorSpec{"" + ""dataSchema="" + getDataSchema() + "", tuningConfig="" + getTuningConfig() + "", ioConfig="" + getIoConfig() + "", suspended="" + isSuspended() + "", context="" + getContext() + '}';
} }",1
32442,"class _ {  public void testGetDependentFields() throws Exception  {
List<String> dependentFields = fac.getDependentFields();
assertEquals(1, dependentFields.size());
assertEquals(""field"", dependentFields.get(0));
} }","class _ { public void testGetDependentFields() {
List<String> dependentFields = fac.getDependentFields();
assertEquals(1, dependentFields.size());
assertEquals(""field"", dependentFields.get(0));
} }",1
32457,"class _ { public void stop() {
 running = false;
 } }","class _ { public void stop() {
running = false;
executorService.shutdown();
} }",1
32461,"class _ { public byte[] getPublicCertificate() {
 return publicCertificate.getBytes();
 } }","class _ { public byte[] getPublicCertificate() {
return publicCertificate.getBytes(StandardCharsets.UTF_8);
} }",1
32468,"class _ { private String buildMessageForCompositeName(String clusterName, String serviceName) {
 return String.format(""cluster name <%s>, name <%s>"",  clusterName, serviceName);
} }","class _ { private String buildMessageForCompositeName(String clusterName, String serviceName) {
return String.format(""cluster name <%s>, service name <%s>"", clusterName, serviceName);
} }",1
32470,"class _ { private synchronized void asyncAuth(int cmd, Buffer buffer, boolean authed) {
 try {
 if (authed) {
handleAuthenticationSuccess(cmd, buffer);
} else {
handleAuthenticationFailure(cmd, buffer);
} } catch (Exception e) {
log.warn(""Error performing async authentication: {}"", e.getMessage(), e);
} } }","class _ { protected synchronized void asyncAuth(int cmd, Buffer buffer, boolean authed) {
try {
if (authed) {
handleAuthenticationSuccess(cmd, buffer);
} else {
handleAuthenticationFailure(cmd, buffer);
} } catch (Exception e) {
log.warn(""Error performing async authentication: {}"", e.getMessage(), e);
} } }",1
32485,"class _ { public void setSeek(SeekCommand seekCommand) {
 this.fSeek = seekCommand;
 } }","class _ { public void setSeek(SeekCommand seekCommand) {
fSeek = seekCommand;
} }",1
32512,"class _ { public boolean isHandleRenamedFiles() {
 return handleRenamedFiles;
 } }","class _ { public boolean isHandleRenamedFiles() {
return handleRenamedFiles != null && handleRenamedFiles;
} }",1
32533,"class _ {  protected JaxbListWrapper<OnmsIpInterface> createListWrapper(Collection<OnmsIpInterface> list) {
 return new OnmsIpInterfaceList(list);
} }","class _ { protected final JaxbListWrapper<OnmsIpInterface> createListWrapper(Collection<OnmsIpInterface> list) {
return new OnmsIpInterfaceList(list);
} }",1
32554,"class _ {  private boolean nullOrEmpty(List<?> list) {
 return list == null || list.isEmpty();
} }","class _ { private static boolean nullOrEmpty(List<?> list) {
return list == null || list.isEmpty();
} }",1
32560,"class _ { public void testSimpleBatch() {
Batch batch = handle.createBatch();
batch.add(""INSERT INTO fruit VALUES(0, 'apple')"");
batch.add(""INSERT INTO fruit VALUES(1, 'banana')"");
int[] rowsModified = batch.execute();
 assertThat(rowsModified).hasSize(2).containsOnly(1);
 assertThat(handle.createQuery(""SELECT count(1) FROM fruit"") .mapTo(int.class) .findOnly() .intValue()) .isEqualTo(2);
} }","class _ { public void testSimpleBatch() {
Batch batch = handle.createBatch();
batch.add(""INSERT INTO fruit VALUES(0, 'apple')"");
batch.add(""INSERT INTO fruit VALUES(1, 'banana')"");
int[] rowsModified = batch.execute();
assertThat(rowsModified).containsExactly(1, 1);
assertThat(handle.createQuery(""SELECT count(1) FROM fruit"") .mapTo(int.class) .findOnly() .intValue()) .isEqualTo(2);
} }",1
32573,"class _ { public boolean hasAnyAcceptedCardType3dsRequired() {
return cardTypes.stream() .filter(CardTypeEntity::isRequires3ds)  .count() > 0;
 } }","class _ { public boolean hasAnyAcceptedCardType3dsRequired() {
return cardTypes.stream() .anyMatch(CardTypeEntity::isRequires3ds);
} }",1
32579,"class _ {  public void testSequenceFlowSupplier() throws Exception {
 final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex);
final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();
final ViewConnector<SequenceFlow> viewConnector = supplier.get();
assertNotNull(viewConnector);
assertNotNull(viewConnector.getSourceConnection());
assertNotNull(viewConnector.getTargetConnection());
assertNotNull(viewConnector.getBounds());
assertNotNull(viewConnector.getDefinition());
} }","class _ { public void testSequenceFlowSupplier() {
final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent, candidate, index, originalParent, originalIndex);
final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier();
final ViewConnector<SequenceFlow> viewConnector = supplier.get();
assertNotNull(viewConnector);
assertNotNull(viewConnector.getSourceConnection());
assertNotNull(viewConnector.getTargetConnection());
assertNotNull(viewConnector.getBounds());
assertNotNull(viewConnector.getDefinition());
} }",1
32583,"class _ { public void clientConfiguredForDomain() throws IOException {
 System.out.println(""==================================="");
 ManagementClient.online(OnlineOptions.domain().build() .localDefault() .protocol(ManagementProtocol.HTTPS) .ssl(sslOptions) .auth(USERNAME, PASSWORD) .connectionTimeout(5000) .build() );
} }","class _ { public void clientConfiguredForDomain() throws IOException {
ManagementClient.online(OnlineOptions.domain().build() .localDefault() .protocol(ManagementProtocol.HTTPS) .ssl(sslOptions) .auth(USERNAME, PASSWORD) .connectionTimeout(5000) .build() );
} }",1
32593,"class _ { public void testValidResources() {
 cleanUp();
 final Resource[] resources = new Resource[]{new ClassPathResource(validName1)};
NeverFailAutoDeploymentStrategy deploymentStrategy = new NeverFailAutoDeploymentStrategy();
deploymentStrategy.deployResources(nameHint, resources, repositoryService);
assertEquals(1, repositoryService.createDeploymentQuery().count());
cleanUp();
} }","class _ { public void testValidResources() {
final Resource[] resources = new Resource[]{new ClassPathResource(validName1)};
NeverFailAutoDeploymentStrategy deploymentStrategy = new NeverFailAutoDeploymentStrategy();
deploymentStrategy.deployResources(nameHint, resources, repositoryService);
assertEquals(1, repositoryService.createDeploymentQuery().count());
} }",1
32599,"class _ { public void testUnhandledExceptionStoredOnCrashReportEnabled() {
CrashReporter.storeUnhandledException(exception);
 assertTrue(!sharedPreferences.getString(CrashReporter.EXCEPTION_FOR_REPORT, """").isEmpty());
 } }","class _ { public void testUnhandledExceptionStoredOnCrashReportEnabled() {
CrashReporter.storeUnhandledException(exception);
assertFalse(sharedPreferences.getString(CrashReporter.EXCEPTION_FOR_REPORT, """").isEmpty());
} }",1
32609,"class _ {  public BruteForce getBruteForce(ScanTarget target) {
 return this.bruteForceMap.get(target);
} }","class _ { BruteForce getBruteForce(ScanTarget target) {
return this.bruteForceMap.get(target);
} }",1
32652,"class _ { public TableType tableType() {
if (isView()) {
 return TableType.VIRTUAL_VIEW;
 } else if (isMaterializedView()) {
return TableType.MATERIALIZED_VIEW;
} return table.getTableType();
} }","class _ { public TableType tableType() {
return table.getTableType();
} }",1
32654,"class _ {  public int requestThrottleInflight() {
 if (requestThrottler != null) {
return requestThrottler.getInflight();
} return 0;
} }","class _ { private int requestThrottleInflight() {
if (requestThrottler != null) {
return requestThrottler.getInflight();
} return 0;
} }",1
32655,"class _ { public void loadBuildData(@NotNull Properties properties) {
loadBuildVersionAndTimeData(properties);
loadBuildHostData(properties);
 loadBuildNumber(System.getenv(), properties);
 } }","class _ { public void loadBuildData(@NotNull Properties properties) {
loadBuildVersionAndTimeData(properties);
loadBuildHostData(properties);
loadBuildNumber(properties);
} }",1
32679,"class _ { public Map<ContainerKeyPrefix, Integer> getKeyPrefixesForContainer( long containerId) throws IOException {
 return getKeyPrefixesForContainer(containerId, """");
 } }","class _ { public Map<ContainerKeyPrefix, Integer> getKeyPrefixesForContainer( long containerId) throws IOException {
return getKeyPrefixesForContainer(containerId, StringUtils.EMPTY);
} }",1
32702,"class _ { public SeekableByteArrayInputStream(byte[] buf) {
 this.buffer = buf;
 this.cur = 0;
this.max = buf.length;
} }","class _ { public SeekableByteArrayInputStream(byte[] buf) {
Preconditions.checkNotNull(buf, ""bug argument was null"");
this.buffer = buf;
this.cur = 0;
this.max = buf.length;
} }",1
32703,"class _ { public Optional<IPageTypeCategoryRole> getTypeCategoryForCatName(String categoryName) {
 loadTypeNameToCategoryMap();
 return Optional.fromNullable(getTypeNameToCategoryMapIncludeDeprecated().get(categoryName));
} }","class _ { public Optional<IPageTypeCategoryRole> getTypeCategoryForCatName(String categoryName) {
return Optional.fromNullable(getTypeNameToCategoryMapIncludeDeprecated().get(categoryName));
} }",1
32717,"class _ {  default public State as(Class<? extends State> target) {
 if (target != null && target.isInstance(this)) {
return this;
} else {
return null;
} } }","class _ { default State as(Class<? extends State> target) {
if (target != null && target.isInstance(this)) {
return this;
} else {
return null;
} } }",1
32720,"class _ { public ConnectorIndex getIndex( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorIndexHandle indexHandle, List<ColumnHandle> lookupSchema, List<ColumnHandle> outputSchema) {
 ThriftIndexHandle thriftIndexHandle = (ThriftIndexHandle) indexHandle;
 return new ThriftConnectorIndex(clientProvider, thriftIndexHandle, lookupSchema, outputSchema, maxBytesPerResponse, lookupRequestsConcurrency);
} }","class _ { public ConnectorIndex getIndex( ConnectorTransactionHandle transactionHandle, ConnectorSession session, ConnectorIndexHandle indexHandle, List<ColumnHandle> lookupSchema, List<ColumnHandle> outputSchema) {
return new ThriftConnectorIndex(clientProvider, (ThriftIndexHandle) indexHandle, lookupSchema, outputSchema, maxBytesPerResponse, lookupRequestsConcurrency);
} }",1
32721,"class _ { public StatementMetadata(byte[] value) throws RdfDAOException {
 super();
 try {
if (value == null) {
metadataMap = new HashMap<>();
} else {
String metadataString = new String(value, ""UTF8"");
metadataMap = gson.fromJson(metadataString, type);
if (metadataMap == null) {
metadataMap = new HashMap<>();
} } } catch (UnsupportedEncodingException e) {
throw new RdfDAOException(e);
} } }","class _ { public StatementMetadata(byte[] value) throws RdfDAOException {
try {
if (value == null) {
metadataMap = new HashMap<>();
} else {
String metadataString = new String(value, ""UTF8"");
metadataMap = gson.fromJson(metadataString, type);
if (metadataMap == null) {
metadataMap = new HashMap<>();
} } } catch (UnsupportedEncodingException e) {
throw new RdfDAOException(e);
} } }",1
32736,"class _ { public static Neo4jBoltClient getInstance(Neo4jConfiguration neo4jConfiguration) {
 if ( INSTANCE_MAP != null &&  INSTANCE_MAP.size() > 0 && INSTANCE_MAP.containsKey(neo4jConfiguration) ) return INSTANCE_MAP.get(neo4jConfiguration);
else {
Neo4jBoltClient instance = new Neo4jBoltClient(neo4jConfiguration);
if( instance != null && instance.client != null ) {
INSTANCE_MAP.put(neo4jConfiguration, instance);
return instance;
} else {
return null;
} } } }","class _ { public static Neo4jBoltClient getInstance(Neo4jConfiguration neo4jConfiguration) {
if ( INSTANCE_MAP != null && INSTANCE_MAP.size() > 0 && INSTANCE_MAP.containsKey(neo4jConfiguration)) {
return INSTANCE_MAP.get(neo4jConfiguration);
} else {
Neo4jBoltClient instance = new Neo4jBoltClient(neo4jConfiguration);
if( instance != null && instance.client != null ) {
INSTANCE_MAP.put(neo4jConfiguration, instance);
return instance;
} else {
return null;
} } } }",1
32750,"class _ { public ReplicationPolicy getSystemReplicationPolicy() {
 DatabaseAccount databaseAccount = this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).block();
 return BridgeInternal.getSystemReplicationPolicy(databaseAccount);
} }","class _ { public Mono<ReplicationPolicy> getSystemReplicationPolicy() {
return this.globalEndpointManager.getDatabaseAccountFromCache(this.serviceEndpoint).map(databaseAccount -> BridgeInternal.getSystemReplicationPolicy(databaseAccount));
} }",1
32755,"class _ { private VM mockVm(VMStatus vmStatus) {
vm.setStatus(vmStatus);
vm.setId(vmId);
vm.setRunOnVds(Guid.newGuid());
when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm);
 return vm;
 } }","class _ { private void mockVm(VMStatus vmStatus) {
vm.setStatus(vmStatus);
vm.setId(vmId);
vm.setRunOnVds(Guid.newGuid());
when(vmDao.get(command.getParameters().getVmId())).thenReturn(vm);
} }",1
32767,"class _ { public void testBuildBlobId() throws Exception {
BlobId blobId = new BlobId(version, referenceType, referenceDatacenterId, referenceAccountId, referenceContainerId, referencePartitionId, referenceIsEncrypted);
 System.out.println(blobId.getID());
 assertEquals(""Wrong blobId version"", version, getVersionFromBlobString(blobId.getID()));
assertBlobIdFieldValues(version, blobId, referenceType, referenceDatacenterId, referenceAccountId, referenceContainerId, referencePartitionId, referenceIsEncrypted);
} }","class _ { public void testBuildBlobId() throws Exception {
BlobId blobId = new BlobId(version, referenceType, referenceDatacenterId, referenceAccountId, referenceContainerId, referencePartitionId, referenceIsEncrypted);
assertEquals(""Wrong blobId version"", version, getVersionFromBlobString(blobId.getID()));
assertBlobIdFieldValues(version, blobId, referenceType, referenceDatacenterId, referenceAccountId, referenceContainerId, referencePartitionId, referenceIsEncrypted);
} }",1
32813,"class _ { public static byte[] getRowKey(long txnId) {
long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK;
byte[] rowKey = new byte[9];
rowKey[0] = (byte)((beginTS / SIConstants.TRASANCTION_INCREMENT) & (TRANSACTION_TABLE_BUCKET_COUNT-1));
 rowKey[0] = (byte)(2);
 Bytes.longToBytes(beginTS, rowKey, 1);
return rowKey;
} }","class _ { public static byte[] getRowKey(long txnId) {
long beginTS = txnId & SIConstants.TRANSANCTION_ID_MASK;
byte[] rowKey = new byte[9];
rowKey[0] = (byte)((beginTS / SIConstants.TRASANCTION_INCREMENT) & (TRANSACTION_TABLE_BUCKET_COUNT-1));
Bytes.longToBytes(beginTS, rowKey, 1);
return rowKey;
} }",1
32824,"class _ { public boolean uses(final Use u) {
 return u == Use.X30 || u == Use.NDT || super.uses(u);
 } }","class _ { public boolean uses(final Use u) {
return u == Use.X30 || super.uses(u);
} }",1
32859,"class _ { public static void createDatanodeIdFile(DatanodeDetails datanodeDetails, File path) throws IOException {
 Preconditions.checkNotNull(path);
 DumperOptions options = new DumperOptions();
options.setPrettyFlow(true);
options.setDefaultFlowStyle(DumperOptions.FlowStyle.FLOW);
Yaml yaml = new Yaml(options);
try (Writer writer = new OutputStreamWriter( new FileOutputStream(path), ""UTF-8"")) {
yaml.dump(getDatanodeDetailsYaml(datanodeDetails), writer);
} } }","class _ { public static void createDatanodeIdFile(DatanodeDetails datanodeDetails, File path) throws IOException {
DumperOptions options = new DumperOptions();
options.setPrettyFlow(true);
options.setDefaultFlowStyle(DumperOptions.FlowStyle.FLOW);
Yaml yaml = new Yaml(options);
try (Writer writer = new OutputStreamWriter( new FileOutputStream(path), ""UTF-8"")) {
yaml.dump(getDatanodeDetailsYaml(datanodeDetails), writer);
} } }",1
32867,"class _ { public void registered(final ExecutorDriver driver, final ExecutorInfo executorInfo, final FrameworkInfo frameworkInfo, final SlaveInfo slaveInfo) {
 if (LOGGER.isDebugEnabled())  LOGGER.debug(""registered(driver : {}, executorInfo : {}, frameworkInfo : {}, slaveInfo : {})"", driver, protoToString(executorInfo), protoToString(frameworkInfo), protoToString(slaveInfo));
this.executorInfo = executorInfo;
} }","class _ { public void registered(final ExecutorDriver driver, final ExecutorInfo executorInfo, final FrameworkInfo frameworkInfo, final SlaveInfo slaveInfo) {
if (LOGGER.isDebugEnabled()) {
LOGGER.debug(""registered(driver : {}, executorInfo : {}, frameworkInfo : {}, slaveInfo : {})"", driver, protoToString(executorInfo), protoToString(frameworkInfo), protoToString(slaveInfo));
} this.executorInfo = executorInfo;
} }",1
32890,"class _ { public DefaultMutableThemeStyle(TextColor foreground, TextColor background, SGR... sgrs) {
 this(foreground, background, sgrs.length > 0 ? EnumSet.copyOf(Arrays.asList(sgrs)) : EnumSet.allOf(SGR.class));
 } }","class _ { public DefaultMutableThemeStyle(TextColor foreground, TextColor background, SGR... sgrs) {
this(foreground, background, sgrs.length > 0 ? EnumSet.copyOf(Arrays.asList(sgrs)) : EnumSet.noneOf(SGR.class));
} }",1
32907,"class _ { private QuorumServer(long id, InetSocketAddress addr, InetSocketAddress electionAddr, LearnerType type) {
this.id = id;
this.addr = addr;
this.electionAddr = electionAddr;
this.type = type;
String checkIPReachableValue = System.getProperty(""zookeeper.checkIPTimeout"");
 if(checkIPReachableValue != null){
 this.checkIPReachableTO = Integer.parseInt(checkIPReachableValue);
} } }","class _ { private QuorumServer(long id, InetSocketAddress addr, InetSocketAddress electionAddr, LearnerType type) {
this.id = id;
this.addr = addr;
this.electionAddr = electionAddr;
this.type = type;
} }",1
32924,"class _ { public NavigableMap<byte[], List<Cell>> getFamilyCellMap() {
if (action instanceof Mutation) {
return ((Mutation) action).getFamilyCellMap();
 } else {
 throw new UnsupportedOperationException();
} } }","class _ { public NavigableMap<byte[], List<Cell>> getFamilyCellMap() {
if (action instanceof Mutation) {
return ((Mutation) action).getFamilyCellMap();
} throw new UnsupportedOperationException();
} }",1
32964,"class _ { public void create(Username currentUser, SecurityAuthConfig securityAuthConfig, LocalizedOperationResult result) {
 SecurityAuthConfigCreateCommand command = new SecurityAuthConfigCreateCommand(goConfigService, securityAuthConfig, authorizationExtension, currentUser, result);
 validatePluginProperties(command, securityAuthConfig);
update(currentUser, securityAuthConfig, result, command);
} }","class _ { public void create(Username currentUser, SecurityAuthConfig securityAuthConfig, LocalizedOperationResult result) {
SecurityAuthConfigCreateCommand command = new SecurityAuthConfigCreateCommand(goConfigService, securityAuthConfig, authorizationExtension, currentUser, result);
update(currentUser, securityAuthConfig, result, command);
} }",1
32981,"class _ { public void run(BatchActionContext batchContext) throws Exception {
 config.validate(batchContext.getFailureCollector());
 if (!config.shouldRun(batchContext)) {
return;
} Class<? extends Driver> driverClass = batchContext.loadPluginClass(JDBC_PLUGIN_ID);
DBRun executeQuery = new DBRun(config, driverClass);
executeQuery.run();
} }","class _ { public void run(BatchActionContext batchContext) throws Exception {
FailureCollector collector = batchContext.getFailureCollector();
config.validate(collector);
collector.getOrThrowException();
if (!config.shouldRun(batchContext)) {
return;
} Class<? extends Driver> driverClass = batchContext.loadPluginClass(JDBC_PLUGIN_ID);
DBRun executeQuery = new DBRun(config, driverClass);
executeQuery.run();
} }",1
32998,"class _ {  public static Economy getEconomy() {
 return econ;
} }","class _ { public Economy getEconomy() {
return econ;
} }",1
33003,"class _ {  public HashMap<String,  ArrayList<Order>> getBuyOrders() {
return buyOrders;
} }","class _ { private HashMap<String, ArrayList<Order>> getBuyOrders() {
return buyOrders;
} }",1
33004,"class _ {  public static CDIProvider getCDIProvider() {
 if (configuredProvider != null) {
return configuredProvider;
} else {
if (discoveredProviders == null) {
synchronized (lock) {
if (discoveredProviders == null) {
findAllProviders();
} } } configuredProvider = discoveredProviders.stream() .filter(c -> c.getCDI() != null) .findAny().orElseThrow(() -> new IllegalStateException(""Unable to access CDI""));
return configuredProvider;
} } }","class _ { private static CDIProvider getCDIProvider() {
if (configuredProvider != null) {
return configuredProvider;
} else {
if (discoveredProviders == null) {
synchronized (lock) {
if (discoveredProviders == null) {
findAllProviders();
} } } configuredProvider = discoveredProviders.stream() .filter(c -> c.getCDI() != null) .findAny().orElseThrow(() -> new IllegalStateException(""Unable to access CDI""));
return configuredProvider;
} } }",1
33018,"class _ { public int getPartitionedSplitCount() {
if (taskStateMachine.getState().isDone()) {
return 0;
} synchronized (this) {
int count = 0;
 for (PlanNodeId partitionedSource : fragment.getTableScanSchedulingOrder()) {
 Collection<Split> partitionedSplits = splits.get(partitionedSource);
count += partitionedSplits.size();
} return count;
} } }","class _ { public int getPartitionedSplitCount() {
if (taskStateMachine.getState().isDone()) {
return 0;
} synchronized (this) {
int count = 0;
for (PlanNodeId tableScanPlanNodeId : fragment.getTableScanSchedulingOrder()) {
Collection<Split> partitionedSplits = splits.get(tableScanPlanNodeId);
count += partitionedSplits.size();
} return count;
} } }",1
33020,"class _ { public ICubeGenerator createCubeGenerator() {
if(!(this.worldObj.getWorldType() instanceof ICubicWorldType)){
 throw new IllegalStateException(""Cubic world provider does not override creageCubeGenerator() and the world type is not ICubicWorldType!"");
 } return ((ICubicWorldType) this.worldObj.getWorldType()) .createCubeGenerator(getCubicWorld());
} }","class _ { public ICubeGenerator createCubeGenerator() {
if(!(this.worldObj.getWorldType() instanceof ICubicWorldType)){
throw new IllegalStateException(""Cubic world provider does not override createCubeGenerator() and the world type is not ICubicWorldType!"");
} return ((ICubicWorldType) this.worldObj.getWorldType()) .createCubeGenerator(getCubicWorld());
} }",1
33021,"class _ { public final LogResult postLog(final Geocache cache, final LogType logType, final Calendar date, final String log, final String logPassword, final List<TrackableLog> trackableLogs) {
 final LogResult result = ECApi.postLog(cache, logType, date, log);
 return result;
} }","class _ { public final LogResult postLog(final Geocache cache, final LogType logType, final Calendar date, final String log, final String logPassword, final List<TrackableLog> trackableLogs) {
return ECApi.postLog(cache, logType, date, log);
} }",1
33045,"class _ {  public static String indexFile(final String filename, final String extension) {
 return ParsingUtils.appendToPath(filename, extension);
} }","class _ { private static String indexFile(final String filename, final String extension) {
return ParsingUtils.appendToPath(filename, extension);
} }",1
33048,"class _ { public boolean servesCoverage(String coverageId) {
 if (coverageId == null || coverageId.length() == 0) {
 return false;
} return contents.getCoverageSummary().stream() .anyMatch(c -> coverageId.equals(c.getCoverageId()));
} }","class _ { public boolean servesCoverage(String coverageId) {
if (coverageId == null || coverageId.isEmpty()) {
return false;
} return contents.getCoverageSummary().stream() .anyMatch(c -> coverageId.equals(c.getCoverageId()));
} }",1
33078,"class _ { private AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest request, AssertionType assertion, NhinTargetCommunitiesType targets) {
AdhocQueryResponse response = null;
if (targets == null) {
targets = new ObjectFactory().createNhinTargetCommunitiesType();
} if (StringUtils.isBlank(targets.getUseSpecVersion())) {
targets.setUseSpecVersion(""3.0"");
} response = outboundDocQuery.respondingGatewayCrossGatewayQuery(request, assertion, targets);
 return response;
 } }","class _ { private AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest request, AssertionType assertion, NhinTargetCommunitiesType targets) {
if (targets == null) {
targets = new ObjectFactory().createNhinTargetCommunitiesType();
} if (StringUtils.isBlank(targets.getUseSpecVersion())) {
targets.setUseSpecVersion(""3.0"");
} return outboundDocQuery.respondingGatewayCrossGatewayQuery(request, assertion, targets);
} }",1
33116,"class _ { protected String getToExpression(ConversionContext conversionContext) {
 return ""new java.sql.Timestamp( <SOURCE>.getTime() )"";
 } }","class _ { protected String getToExpression(ConversionContext conversionContext) {
return ""new Timestamp( <SOURCE>.getTime() )"";
} }",1
33127,"class _ { public static Comment newComment(long issueId, int newCommentId, String comment) {
DateTime now = DateTime.now();
 Long id = Long.parseLong(issueId + ""0"" + newCommentId);
 URI selfUri = URI.create(TEST_JIRA_URL + ""/rest/api/latest/issue/"" + issueId + ""/comment"");
return new Comment(selfUri, comment, null, null, now, null, null, id);
} }","class _ { public static Comment newComment(long issueId, int newCommentId, String comment) {
DateTime now = DateTime.now();
long id = Long.parseLong(issueId + ""0"" + newCommentId);
URI selfUri = URI.create(TEST_JIRA_URL + ""/rest/api/latest/issue/"" + issueId + ""/comment"");
return new Comment(selfUri, comment, null, null, now, null, null, id);
} }",1
33183,"class _ { public String getUrlForPathWithoutWiki(String wikiName, String wikiPath) {
String url = getUrlForWiki(wikiName);
url = url + wikiPath;
 return url;
 } }","class _ { public String getUrlForPathWithoutWiki(String wikiName, String wikiPath) {
return getUrlForWiki(wikiName) + wikiPath;
} }",1
33185,"class _ { public void toStringTest() {
final NodeList<Name> list = nodeList(new Name(""abc""), new Name(""bcd""), new Name(""cde""));
 assertEquals(""abcbcdcde"", list.toString());
 } }","class _ { public void toStringTest() {
final NodeList<Name> list = nodeList(new Name(""abc""), new Name(""bcd""), new Name(""cde""));
assertEquals(""[abc, bcd, cde]"", list.toString());
} }",1
33193,"class _ { public void executeSQL_shouldReturnNullGivenNull() {
adminService.executeSQL(null, true);
 verify(adminDAO, never()).executeSQL(""was never called"", true);
 } }","class _ { public void executeSQL_shouldReturnNullGivenNull() {
adminService.executeSQL(null, true);
verify(adminDAO, never()).executeSQL(anyString(), anyBoolean());
} }",1
33210,"class _ { static Builder builder() {
 return Sponge.getRegistry().createBuilder(SoundType.Builder.class);
 } }","class _ { static Builder builder() {
return Sponge.getRegistry().createBuilder(Builder.class);
} }",1
33224,"class _ {  static void initProviderAsynchronously(@NonNull IProject project) {
 synchronized (INSTANCE.projects) {
if (INSTANCE.projects.contains(project)) {
return;
} INSTANCE.projects.add(project);
} INSTANCE.schedule();
} }","class _ { private static void initProviderAsynchronously( @NonNull IProject project) {
synchronized (INSTANCE.projects) {
if (INSTANCE.projects.contains(project)) {
return;
} INSTANCE.projects.add(project);
} INSTANCE.schedule();
} }",1
33231,"class _ { public boolean hasAnyTicket(String username) {
 Collection<Ticket> tickets = ticketRepository.findAllByOwnerUsername(username);
 return tickets.stream().anyMatch(Ticket::isValid);
} }","class _ { public boolean hasAnyTicket(String username) {
return ticketRepository.findAllByOwnerUsername(username).stream().anyMatch(Ticket::isValid);
} }",1
33249,"class _ { public int getRankFromBasePair(int base) {
 Map<String, Object> parameters = new HashMap<>(1);
 parameters.put(""dist"", base);
return query(e -> (int) e.execute(GET_RANK_FROM_BASEPAIR, parameters).columnAs(""rank"").next());
} }","class _ { public int getRankFromBasePair(int base) {
Map<String, Object> parameters = Collections.singletonMap(""dist"", base);
return query(e -> (int) e.execute(GET_RANK_FROM_BASEPAIR, parameters) .columnAs(""rank"").next());
} }",1
33260,"class _ { private static DetailNode getFirstChildOfType(DetailNode node, int tokenType, int offset) {
return Arrays.stream(node.getChildren()) .filter(child -> child.getIndex() >= offset && child.getType() == tokenType) .findFirst()  .orElse(null);
 } }","class _ { private static Optional<DetailNode> getFirstChildOfType(DetailNode node, int tokenType, int offset) {
return Arrays.stream(node.getChildren()) .filter(child -> child.getIndex() >= offset && child.getType() == tokenType) .findFirst();
} }",1
33291,"class _ { protected boolean set(Entity dataHolder, Integer value) {
dataHolder.hurtResistantTime = value;
 if (dataHolder instanceof EntityLivingBase) ((EntityLivingBase) dataHolder).hurtTime = value;
 return true;
} }","class _ { protected boolean set(Entity dataHolder, Integer value) {
dataHolder.hurtResistantTime = value;
if (dataHolder instanceof EntityLivingBase) {
((EntityLivingBase) dataHolder).hurtTime = value;
} return true;
} }",1
33295,"class _ { public void testLogoDetectGcs() throws Exception {
LogoDetectionGcs.detectLogoGcs(""gs://cloud-samples-data/video/googlework_tiny.mp4"");
String got = bout.toString();
 assertThat(got).contains(""Description : Google Maps"");
 assertThat(got).contains(""Confidence"");
assertThat(got).contains(""Start Time Offset"");
assertThat(got).contains(""End Time Offset"");
} }","class _ { public void testLogoDetectGcs() throws IOException, ExecutionException, InterruptedException, TimeoutException {
LogoDetectionGcs.detectLogoGcs(""gs://cloud-samples-data/video/googlework_tiny.mp4"");
String got = bout.toString();
assertThat(got).contains(""Description"");
assertThat(got).contains(""Confidence"");
assertThat(got).contains(""Start Time Offset"");
assertThat(got).contains(""End Time Offset"");
} }",1
33296,"class _ { private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) {
 assertTrue(dataObject.getProperty(""id"") != null);
 int EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1;
assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size());
} }","class _ { private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) {
assertNotNull(dataObject.getProperty(""id""));
int EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1;
assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size());
} }",1
33305,"class _ { protected void setSyncConfig(SyncToolConfig syncConfig) {
this.syncConfig = syncConfig;
this.syncConfig.setVersion(version);
File exclusionListFile = this.syncConfig.getExcludeList();
if(exclusionListFile != null){
this.fileExclusionManager = new FileExclusionManager(exclusionListFile);
} else{
 fileExclusionManager = new FileExclusionManager();
 } ChangedList.getInstance() .setFileExclusionManager(this.fileExclusionManager);
} }","class _ { protected void setSyncConfig(SyncToolConfig syncConfig) {
this.syncConfig = syncConfig;
this.syncConfig.setVersion(version);
File exclusionListFile = this.syncConfig.getExcludeList();
if(exclusionListFile != null){
this.fileExclusionManager = new FileExclusionManager(exclusionListFile);
} else{
this.fileExclusionManager = new FileExclusionManager();
} ChangedList.getInstance() .setFileExclusionManager(this.fileExclusionManager);
} }",1
33345,"class _ { public void uniqueCorrelationIDs() throws MuleException {
CoreEvent firstEvent = getEventBuilder().message(of(""first"")).build();
CoreEvent secondEvent = getEventBuilder().message(of(""second"")).build();
assertThat(""Duplicated correlationID"", firstEvent.getContext().getCorrelationId(),  not(Is.is(secondEvent.getContext().getCorrelationId())));
 } }","class _ { public void uniqueCorrelationIDs() throws MuleException {
CoreEvent firstEvent = getEventBuilder().message(of(""first"")).build();
CoreEvent secondEvent = getEventBuilder().message(of(""second"")).build();
assertThat(""Duplicated correlationID"", firstEvent.getContext().getCorrelationId(), not(is(secondEvent.getContext().getCorrelationId())));
} }",1
33359,"class _ { public void changeQuestionAnswer(User u, String question, String answer) throws DAOException {
log.info(""Updating secret question and answer for "" + u.getUsername());
LoginCredential credentials = getLoginCredential(u);
credentials.setSecretQuestion(question);
 String hashedAnswer = Security.encodeString(answer + credentials.getSalt());
 credentials.setSecretAnswer(hashedAnswer);
credentials.setDateChanged(new Date());
credentials.setChangedBy(u);
updateLoginCredential(credentials);
} }","class _ { public void changeQuestionAnswer(User u, String question, String answer) throws DAOException {
log.info(""Updating secret question and answer for "" + u.getUsername());
LoginCredential credentials = getLoginCredential(u);
credentials.setSecretQuestion(question);
String hashedAnswer = Security.encodeString(answer.toLowerCase() + credentials.getSalt());
credentials.setSecretAnswer(hashedAnswer);
credentials.setDateChanged(new Date());
credentials.setChangedBy(u);
updateLoginCredential(credentials);
} }",1
33360,"class _ {  public void afterEach(ExtensionContext context) throws Exception {
 BrokerRunningSupport brokerRunning = BROKER_RUNNING_HOLDER.get();
if (brokerRunning != null && brokerRunning.isPurgeAfterEach()) {
brokerRunning.purgeTestQueues();
} } }","class _ { public void afterEach(ExtensionContext context) {
BrokerRunningSupport brokerRunning = BROKER_RUNNING_HOLDER.get();
if (brokerRunning != null && brokerRunning.isPurgeAfterEach()) {
brokerRunning.purgeTestQueues();
} } }",1
33385,"class _ { protected @NonNull Iterable<@NonNull IAnalysisModule> getDependentAnalyses() {
try {
ITmfTrace trace = getTrace();
if (trace != null) {
 final XmlPatternStateSystemModule stateSystemModule = new XmlPatternStateSystemModule(getId());
 stateSystemModule.setXmlFile(fXmlFile);
stateSystemModule.setTrace(trace);
setDependentModule(stateSystemModule);
return ImmutableList.of((IAnalysisModule) stateSystemModule);
} } catch (TmfAnalysisException e) {
Activator.logError(""Failed to set dependent analysis trace."");
} return super.getDependentAnalyses();
} }","class _ { protected @NonNull Iterable<@NonNull IAnalysisModule> getDependentAnalyses() {
try {
ITmfTrace trace = getTrace();
if (trace != null) {
final XmlPatternStateSystemModule stateSystemModule = new XmlPatternStateSystemModule(getDependentAnalysisId());
stateSystemModule.setXmlFile(fXmlFile);
stateSystemModule.setTrace(trace);
setDependentModule(stateSystemModule);
return ImmutableList.of((IAnalysisModule) stateSystemModule);
} } catch (TmfAnalysisException e) {
Activator.logError(""Failed to set dependent analysis trace."");
} return super.getDependentAnalyses();
} }",1
33397,"class _ { public void statusesChanged(Collection<ResourceStatusChange> changes) {
if (session != null) {
 if (SessionStatus.SYNC.equals(session.getStatus())) {
 marker = null;
} } } }","class _ { public void statusesChanged(Collection<ResourceStatusChange> changes) {
if (session != null) {
if (SessionStatus.SYNC == session.getStatus()) {
marker = null;
} } } }",1
33404,"class _ { public long deleteHorizonMs() {
 return -1L;
 } }","class _ { public long deleteHorizonMs() {
return RecordBatch.NO_TIMESTAMP;
} }",1
33409,"class _ { private void closeSideParts(MPart part, boolean left) {
MElementContainer<MUIElement> container = getParent(part);
 if (container == null)  return;
List<MPart> others = getCloseableSideParts(part, left);
closeSiblingParts(part, others, true);
} }","class _ { private void closeSideParts(MPart part, boolean left) {
MElementContainer<MUIElement> container = getParent(part);
if (container == null) {
return;
} List<MPart> others = getCloseableSideParts(part, left);
closeSiblingParts(part, others, true);
} }",1
33412,"class _ { private MockHttpServletRequest requestToSave() {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setServerPort(443);
request.setSecure(true);
request.setScheme(""https"");
request.setServerName(""abc.com"");
request.setRequestURI(""/destination"");
 request.setServletPath(""/destination"");
 request.setQueryString(""param1=a&param2=b&param3=1122"");
return request;
} }","class _ { private MockHttpServletRequest requestToSave() {
MockHttpServletRequest request = new MockHttpServletRequest();
request.setServerPort(443);
request.setSecure(true);
request.setScheme(""https"");
request.setServerName(""abc.com"");
request.setRequestURI(""/destination"");
request.setQueryString(""param1=a&param2=b&param3=1122"");
return request;
} }",1
33420,"class _ { public void removeNotificationListener(ObjectName name, NotificationListener listener) {
if(!isRunningInJmc() && !isRunningInJConsole() && !isRunningInJVisualVm()) {
 throw new UnsupportedOperationException(""removeNotificationListener not supported for Jolokia"");
 } } }","class _ { public void removeNotificationListener(ObjectName name, NotificationListener listener) {
if(!isRunningInJmc() && !isRunningInJConsole() && !isRunningInJVisualVm()) {
throw new UnsupportedOperationException(""removeNotificationListener not supported by Jolokia"");
} } }",1
33430,"class _ { public static void until(Callable<Boolean> condition, long timeout, TimeUnit timeUnit) {
 until(condition, 10, TimeUnit.SECONDS, 50);
 } }","class _ { public static void until(Callable<Boolean> condition, long timeout, TimeUnit timeUnit) {
until(condition, timeout, timeUnit, 50);
} }",1
33451,"class _ { public Object register(Object obj, Runnable action) {
try {
return createMtd.invoke(null, obj, action);
} catch (IllegalAccessException | InvocationTargetException e) {
 e.printStackTrace();
 throw new RuntimeException(""Reflection failure: invoke sun.misc.Cleaner.create method failed"", e);
} } }","class _ { public Object register(Object obj, Runnable action) {
try {
return createMtd.invoke(null, obj, action);
} catch (IllegalAccessException | InvocationTargetException e) {
throw new RuntimeException(""Reflection failure: invoke sun.misc.Cleaner.create method failed"", e);
} } }",1
33457,"class _ { public void ok() {
new OkButton().click();
 new WaitWhile(new ShellIsActive(""Open CDI Named Bean""));
 } }","class _ { public void ok() {
new OkButton().click();
new WaitWhile(new ShellIsAvailable(""Open CDI Named Bean""));
} }",1
33460,"class _ { public void setEnabled(boolean enabled, Composite parent) {
super.setEnabled(enabled, parent);
group.setEnabled(enabled);
for (Control  element :  group.getChildren()) {
element.setEnabled(enabled);
} } }","class _ { public void setEnabled(boolean enabled, Composite parent) {
super.setEnabled(enabled, parent);
group.setEnabled(enabled);
for (Control child : group.getChildren()) {
child.setEnabled(enabled);
} } }",1
33511,"class _ { private void validate() throws UnloggedFailure {
if (active && inactive) {
throw new UnloggedFailure(1, ""--active and --inactive options are mutually exclusive."");
} if (clearHttpPassword && !Strings.isNullOrEmpty(httpPassword)) {
throw new UnloggedFailure(1, ""--http-password and --clear-http-password options are mutually "" + ""exclusive."");
} if (addSshKeys.contains(""-"") && deleteSshKeys.contains(""-"")) {
throw new UnloggedFailure(1, ""Only one option may use the stdin"");
} if (deleteSshKeys.contains(""ALL"")) {
deleteSshKeys = Collections.singletonList(""ALL"");
} if (deleteEmails.contains(""ALL"")) {
deleteEmails = Collections.singletonList(""ALL"");
}  if (!Strings.isNullOrEmpty(preferredEmail) && !deleteEmails.isEmpty()) {
if (deleteEmails.contains(preferredEmail)) {
throw new UnloggedFailure(1, ""--preferred-email and --delete-email options are mutually "" + ""exclusive for the same email address."");
} }  } }","class _ { private void validate() throws UnloggedFailure {
if (active && inactive) {
throw new UnloggedFailure(1, ""--active and --inactive options are mutually exclusive."");
} if (clearHttpPassword && !Strings.isNullOrEmpty(httpPassword)) {
throw new UnloggedFailure(1, ""--http-password and --clear-http-password options are mutually "" + ""exclusive."");
} if (addSshKeys.contains(""-"") && deleteSshKeys.contains(""-"")) {
throw new UnloggedFailure(1, ""Only one option may use the stdin"");
} if (deleteSshKeys.contains(""ALL"")) {
deleteSshKeys = Collections.singletonList(""ALL"");
} if (deleteEmails.contains(""ALL"")) {
deleteEmails = Collections.singletonList(""ALL"");
} if (deleteEmails.contains(preferredEmail)) {
throw new UnloggedFailure(1, ""--preferred-email and --delete-email options are mutually "" + ""exclusive for the same email address."");
} } }",1
33513,"class _ { public RepositoryDTO fetchInstallableApplications() {
try {
final List<CategoryDTO> categoryDTOs = new ArrayList<>();
Resource[] resources = resourceResolver.getResources(packagePath + ""/*"");
for (Resource resource : resources) {
final CategoryDTO category = buildCategory(resource.getFilename());
if (!category.getApplications().isEmpty()) {
categoryDTOs.add(category);
} } Collections.sort(categoryDTOs, Comparator.comparing(CategoryDTO::getName));
final RepositoryDTO.Builder repositoryDTOBuilder = new RepositoryDTO.Builder() .withName(""classpath repository"").withCategories(categoryDTOs);
return repositoryDTOBuilder.build();
} catch (IOException e) {
LOGGER.warn(""Error while reading resource directory"", e);
 return null;
 } } }","class _ { public RepositoryDTO fetchInstallableApplications() {
try {
final List<CategoryDTO> categoryDTOs = new ArrayList<>();
Resource[] resources = resourceResolver.getResources(packagePath + ""/*"");
for (Resource resource : resources) {
final CategoryDTO category = buildCategory(resource.getFilename());
if (!category.getApplications().isEmpty()) {
categoryDTOs.add(category);
} } Collections.sort(categoryDTOs, Comparator.comparing(CategoryDTO::getName));
final RepositoryDTO.Builder repositoryDTOBuilder = new RepositoryDTO.Builder() .withName(""classpath repository"").withCategories(categoryDTOs);
return repositoryDTOBuilder.build();
} catch (IOException e) {
LOGGER.warn(""Error while reading resource directory"", e);
return new RepositoryDTO.Builder().build();
} } }",1
33522,"class _ { public TTransport getTransport(final TTransport trans) {
TSocket tSocket = null;
if (trans instanceof TSocket) {
tSocket = (TSocket) trans;
} else if (trans instanceof TSaslServerTransport) {
TSaslServerTransport saslTrans = (TSaslServerTransport) trans;
tSocket = (TSocket)(saslTrans.getUnderlyingTransport());
} String remoteHost = tSocket != null ? tSocket.getSocket().getInetAddress().getCanonicalHostName() : null;
if (remoteHost != null && isHostFromTrustedDomain(remoteHost, trustedDomain)) {
LOG.info(""No authentication performed because the connecting host "" + remoteHost + "" is "" + ""from the trusted domain "" + trustedDomain);
return noAuthFactory.getTransport(trans);
 } else {
 return otherFactory.getTransport(trans);
} } }","class _ { public TTransport getTransport(final TTransport trans) {
TSocket tSocket = null;
if (trans instanceof TSocket) {
tSocket = (TSocket) trans;
} else if (trans instanceof TSaslServerTransport) {
TSaslServerTransport saslTrans = (TSaslServerTransport) trans;
tSocket = (TSocket)(saslTrans.getUnderlyingTransport());
} String remoteHost = tSocket != null ? tSocket.getSocket().getInetAddress().getCanonicalHostName() : null;
if (remoteHost != null && isHostFromTrustedDomain(remoteHost, trustedDomain)) {
LOG.info(""No authentication performed because the connecting host "" + remoteHost + "" is "" + ""from the trusted domain "" + trustedDomain);
return noAuthFactory.getTransport(trans);
} return otherFactory.getTransport(trans);
} }",1
33548,"class _ { public void clearRegionCache( String region ) {
if ( cacheEnabled ) {
Cache cache = regionCache.get( region );
if ( cache != null ) {
try {
 synchronized ( cache ) {
 cache.clear();
} } catch ( CacheException e ) {
CacheManager.logger.error( Messages.getInstance().getString( ""CacheManager.ERROR_0006_CACHE_EXCEPTION"", e.getLocalizedMessage() ) );
} } else {
CacheManager.logger.info( Messages.getInstance().getString( ""CacheManager.INFO_0001_CACHE_DOES_NOT_EXIST"", region ) );
} } else {
CacheManager.logger.warn( Messages.getInstance().getString( ""CacheManager.WARN_0001_CACHE_NOT_ENABLED"" ) );
} } }","class _ { public void clearRegionCache( String region ) {
if ( cacheEnabled ) {
Cache cache = regionCache.get( region );
if ( cache != null ) {
try {
cache.clear();
} catch ( CacheException e ) {
CacheManager.logger.error( Messages.getInstance().getString( ""CacheManager.ERROR_0006_CACHE_EXCEPTION"", e.getLocalizedMessage() ) );
} } else {
CacheManager.logger.info( Messages.getInstance().getString( ""CacheManager.INFO_0001_CACHE_DOES_NOT_EXIST"", region ) );
} } else {
CacheManager.logger.warn( Messages.getInstance().getString( ""CacheManager.WARN_0001_CACHE_NOT_ENABLED"" ) );
} } }",1
33580,"class _ { public Boolean ChangeState(String deviceId, Boolean newStateIsOn) {
Reader reader = null;
logger.debug( ""Change state for device id '{}', new state is on: '{}'"", deviceId, newStateIsOn);
try {
HttpURLConnection httpURLConnection;
 httpURLConnection = (HttpURLConnection) new URL(API_URL + ""device/switch"" +  ""?authToken="" + this.authToken + ""&id="" + deviceId + ""&on="" + newStateIsOn.toString()) .openConnection();
InputStream inputStream = httpURLConnection.getInputStream();
reader = new InputStreamReader(inputStream, ""UTF-8"");
JsonObject jsonObject = (JsonObject) jsonParser.parse(reader);
String status = jsonObject.get(""status"").getAsString();
if(!status.equals(""ok"")){
String error = jsonObject.get(""error"").getAsString();
logger.error(""Unable to switch state for device '{}' error '{}'"", deviceId, error);
return false;
} String newState = jsonObject.get(""state"").getAsString();
logger.debug( ""Switch state for device '{}' successfull, state is '{}'"", deviceId, newState);
return true;
} catch(Exception ex) {
logger.error(""Error set state: '{}'"", ex.toString());
return false;
} finally {
if (reader != null) {
try {
reader.close();
} catch (IOException ignored) {
} } } } }","class _ { public Boolean ChangeState(String deviceId, Boolean newStateIsOn) {
Reader reader = null;
logger.debug(""Change state for device id '{}', new state is on: '{}'"", deviceId, newStateIsOn);
try {
String url = API_URL + ""device/switch"" + ""?authToken="" + this.authToken + ""&id="" + deviceId + ""&on="" + newStateIsOn.toString();
HttpURLConnection httpURLConnection;
httpURLConnection = (HttpURLConnection) new URL(url) .openConnection();
InputStream inputStream = httpURLConnection.getInputStream();
reader = new InputStreamReader(inputStream, ""UTF-8"");
JsonObject jsonObject = (JsonObject) jsonParser.parse(reader);
String status = jsonObject.get(""status"").getAsString();
if (!status.equals(""ok"")) {
String error = jsonObject.get(""error"").getAsString();
logger.error( ""Unable to switch state for device '{}' error '{}'"", deviceId, error);
return false;
} String newState = jsonObject.get(""state"").getAsString();
logger.debug( ""Switch state for device '{}' successfull, state is '{}'"", deviceId, newState);
return true;
} catch (Exception ex) {
logger.error(""Error set state: '{}'"", ex.toString());
return false;
} finally {
if (reader != null) {
try {
reader.close();
} catch (IOException ignored) {
} } } } }",1
33596,"class _ { private IFolder copyExperiment(final String newName) {
WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {
@Override public void execute(IProgressMonitor monitor) throws CoreException {
try {
monitor.beginTask("""", 1000);
if (monitor.isCanceled()) {
throw new OperationCanceledException();
}  fExperiment.copy(newName, fExperimentFolder, true);
 if (monitor.isCanceled()) {
throw new OperationCanceledException();
} } finally {
monitor.done();
} } };
try {
PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
} catch (InterruptedException exception) {
return null;
} catch (InvocationTargetException exception) {
MessageDialog.openError(getShell(), """", NLS.bind("""", exception.getTargetException().getMessage()));
return null;
} catch (RuntimeException exception) {
return null;
} return fExperiment.getResource();
} }","class _ { private IFolder copyExperiment(final String newName) {
WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {
@Override public void execute(IProgressMonitor monitor) throws CoreException {
try {
monitor.beginTask("""", 1000);
if (monitor.isCanceled()) {
throw new OperationCanceledException();
} fExperiment.copy(newName, true);
if (monitor.isCanceled()) {
throw new OperationCanceledException();
} } finally {
monitor.done();
} } };
try {
PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
} catch (InterruptedException exception) {
return null;
} catch (InvocationTargetException exception) {
MessageDialog.openError(getShell(), """", NLS.bind("""", exception.getTargetException().getMessage()));
return null;
} catch (RuntimeException exception) {
return null;
} return fExperiment.getResource();
} }",1
33602,"class _ { private void waitForFinishedNotification() {
waitForTransportState(""PLAYING"");
String notificationTitle = stateMap.get(""CurrentTitle"");
long playstart = System.currentTimeMillis();
 while (System.currentTimeMillis() - playstart < (this.notificationTimeout.longValue() * 1000)) {
 try {
Thread.sleep(50);
if (!notificationTitle.equals(stateMap.get(""CurrentTitle"")) || !""PLAYING"".equals(stateMap.get(""TransportState""))) {
break;
} } catch (InterruptedException e) {
logger.error(""InterruptedException during playing a notification sound"");
} } } }","class _ { private void waitForFinishedNotification() {
waitForTransportState(""PLAYING"");
String notificationTitle = stateMap.get(""CurrentTitle"");
long playstart = System.currentTimeMillis();
while (System.currentTimeMillis() - playstart < this.notificationTimeout.longValue() * 1000) {
try {
Thread.sleep(50);
if (!notificationTitle.equals(stateMap.get(""CurrentTitle"")) || !""PLAYING"".equals(stateMap.get(""TransportState""))) {
break;
} } catch (InterruptedException e) {
logger.error(""InterruptedException during playing a notification sound"");
} } } }",1
33610,"class _ { public Connector tagImageActionName() {
return integrationContext -> {
Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();
System.out.println(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet());
System.out.println(""tagImageActionName inbound variables values: "" + inBoundVariables.values());
  boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey"");
integrationContext.addOutBoundVariable(""approved"", expectedValue);
assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2"");
return integrationContext;
};
} }","class _ { public Connector tagImageActionName() {
return integrationContext -> {
Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables();
LOGGER.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet());
LOGGER.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values());
boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey"");
integrationContext.addOutBoundVariable(""approved"", expectedValue);
assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2"");
return integrationContext;
};
} }",1
33626,"class _ { public User formBackingObject(WebRequest request, @RequestParam(required = false, value = ""person_id"") Integer personId) {
String userId = request.getParameter(""userId"");
User u = null;
try {
u = Context.getUserService().getUser(Integer.valueOf(userId));
} catch (Exception ex) {
log.debug (""Error while getting user"",ex);
 }  if (u == null) {
u = new User();
} if (personId != null) {
u.setPerson(Context.getPersonService().getPerson(personId));
} else if (u.getPerson() == null) {
Person p = new Person();
p.addName(new PersonName());
u.setPerson(p);
} return u;
} }","class _ { public User formBackingObject(WebRequest request, @RequestParam(required = false, value = ""person_id"") Integer personId) {
String userId = request.getParameter(""userId"");
User u = null;
try {
u = Context.getUserService().getUser(Integer.valueOf(userId));
} catch (Exception ex) {
log.error (""Error while getting user"", ex);
} if (u == null) {
u = new User();
} if (personId != null) {
u.setPerson(Context.getPersonService().getPerson(personId));
} else if (u.getPerson() == null) {
Person p = new Person();
p.addName(new PersonName());
u.setPerson(p);
} return u;
} }",1
33630,"class _ { public void updatePresentation(@NotNull NodePresentation presentation) {
final StringBuilder cssBuilder = new StringBuilder();
final Optional<Marker> presentableTextMarker = getData().getMarker(PresentableTextMarker.ID);
if (presentableTextMarker.isPresent() && getData() instanceof Container) {
presentation.setPresentableText( ((PresentableTextMarker) presentableTextMarker.get()).getPresentableText());
} else {
presentation.setPresentableText(getData().getName());
} if (resourceIsCut) {
cssBuilder.append(""opacity:0.5;"");
} else {
cssBuilder.append(""opacity:1;"");
} SVGResource icon = null;
for (NodeIconProvider iconProvider : nodeIconProviders) {
icon = iconProvider.getIcon(getData());
if (icon != null) {
break;
} } if (icon != null) {
presentation.setPresentableIcon(icon);
} else {
if (getData().getResourceType() == FOLDER) {
presentation.setPresentableIcon( getData().getName().startsWith(""."") ? nodesResources.hiddenSimpleFolder() : nodesResources.simpleFolder());
} else if (getData().getResourceType() == PROJECT) {
 Log.info(getClass(), ((Project) getData()).isProblem());
 presentation.setPresentableIcon( ((Project) getData()).isProblem() ? nodesResources.notValidProjectFolder() : nodesResources.projectFolder());
cssBuilder.append(""font-weight:bold;"");
} else if (getData().getResourceType() == FILE) {
presentation.setPresentableIcon(nodesResources.file());
} } presentation.setPresentableTextCss(cssBuilder.toString());
if (getData().isFile() && getData().asFile().getVcsStatus() != null) {
VcsStatus vcsStatus = getData().asFile().getVcsStatus();
if (vcsStatus != NOT_MODIFIED) {
presentation.setPresentableTextCss(""color: "" + vcsStatus.getColor() + "";"");
} } } }","class _ { public void updatePresentation(@NotNull NodePresentation presentation) {
final StringBuilder cssBuilder = new StringBuilder();
final Optional<Marker> presentableTextMarker = getData().getMarker(PresentableTextMarker.ID);
if (presentableTextMarker.isPresent() && getData() instanceof Container) {
presentation.setPresentableText( ((PresentableTextMarker) presentableTextMarker.get()).getPresentableText());
} else {
presentation.setPresentableText(getData().getName());
} if (resourceIsCut) {
cssBuilder.append(""opacity:0.5;"");
} else {
cssBuilder.append(""opacity:1;"");
} SVGResource icon = null;
for (NodeIconProvider iconProvider : nodeIconProviders) {
icon = iconProvider.getIcon(getData());
if (icon != null) {
break;
} } if (icon != null) {
presentation.setPresentableIcon(icon);
} else {
if (getData().getResourceType() == FOLDER) {
presentation.setPresentableIcon( getData().getName().startsWith(""."") ? nodesResources.hiddenSimpleFolder() : nodesResources.simpleFolder());
} else if (getData().getResourceType() == PROJECT) {
presentation.setPresentableIcon( ((Project) getData()).isProblem() ? nodesResources.notValidProjectFolder() : nodesResources.projectFolder());
cssBuilder.append(""font-weight:bold;"");
} else if (getData().getResourceType() == FILE) {
presentation.setPresentableIcon(nodesResources.file());
} } presentation.setPresentableTextCss(cssBuilder.toString());
if (getData().isFile() && getData().asFile().getVcsStatus() != null) {
VcsStatus vcsStatus = getData().asFile().getVcsStatus();
if (vcsStatus != NOT_MODIFIED) {
presentation.setPresentableTextCss(""color: "" + vcsStatus.getColor() + "";"");
} } } }",1
33641,"class _ { private void saveStateAsLast(URL url) {
File lastBundlesTxt = getLastBundleInfo();
try (OutputStream destinationStream = new FileOutputStream(lastBundlesTxt)) {
ArrayList<File> sourcesLocation = SimpleConfiguratorUtils.getInfoFiles();
List<InputStream> sourceStreams = new ArrayList<>(sourcesLocation.size() + 1);
sourceStreams.add(url.openStream());
if (Activator.EXTENDED) {
for (File  element :  sourcesLocation) {
sourceStreams.add(new FileInputStream(element));
} } SimpleConfiguratorUtils.transferStreams(sourceStreams, destinationStream);
} catch (URISyntaxException e) {
} catch (IOException e) {
} } }","class _ { private void saveStateAsLast(URL url) {
File lastBundlesTxt = getLastBundleInfo();
try (OutputStream destinationStream = new FileOutputStream(lastBundlesTxt)) {
ArrayList<File> sourcesLocation = SimpleConfiguratorUtils.getInfoFiles();
List<InputStream> sourceStreams = new ArrayList<>(sourcesLocation.size() + 1);
sourceStreams.add(url.openStream());
if (Activator.EXTENDED) {
for (File source : sourcesLocation) {
sourceStreams.add(new FileInputStream(source));
} } SimpleConfiguratorUtils.transferStreams(sourceStreams, destinationStream);
} catch (URISyntaxException e) {
} catch (IOException e) {
} } }",1
33671,"class _ { private List<String> getAssignedVariablesNames(StatementTree currentStatement) {
ExpressionTree variable = null;
if (currentStatement.is(Kind.EXPRESSION_STATEMENT)) {
ExpressionTree expression = ((ExpressionStatementTree) currentStatement).expression();
if (expression instanceof AssignmentExpressionTree) {
variable = ((AssignmentExpressionTree) expression).variable();
} else if (expression.is(Kind.ASSIGNMENT_BY_REFERENCE)) {
variable = ((AssignmentByReferenceTree) expression).variable();
} }  List<String> names = new LinkedList<>();
 if (variable != null) {
if (variable.is(Kind.VARIABLE_IDENTIFIER)) {
names.add(((VariableIdentifierTree) variable).variableExpression().text());
} else if (variable.is(Kind.LIST_EXPRESSION)) {
names.addAll(getVariablesFromList((ListExpressionTree) variable));
} } return names;
} }","class _ { private List<String> getAssignedVariablesNames(StatementTree currentStatement) {
ExpressionTree variable = null;
if (currentStatement.is(Kind.EXPRESSION_STATEMENT)) {
ExpressionTree expression = ((ExpressionStatementTree) currentStatement).expression();
if (expression instanceof AssignmentExpressionTree) {
variable = ((AssignmentExpressionTree) expression).variable();
} else if (expression.is(Kind.ASSIGNMENT_BY_REFERENCE)) {
variable = ((AssignmentByReferenceTree) expression).variable();
} } List<String> names = new ArrayList<>();
if (variable != null) {
if (variable.is(Kind.VARIABLE_IDENTIFIER)) {
names.add(((VariableIdentifierTree) variable).variableExpression().text());
} else if (variable.is(Kind.LIST_EXPRESSION)) {
names.addAll(getVariablesFromList((ListExpressionTree) variable));
} } return names;
} }",1
33682,"class _ { public void setJobOverrideProperty(Project project, Props prop, String jobName, User modifier) throws ProjectManagerException {
prop.setSource(jobName + "".jor"");
Props oldProps = projectLoader.fetchProjectProperty(project, prop.getSource());
if (oldProps == null) {
oldProps = new Props();
 projectLoader.uploadProjectProperty(project, prop);
 } else {
projectLoader.updateProjectProperty(project, prop);
} String diffMessage = PropsUtils.getPropertyDiff(oldProps, prop);
projectLoader.postEvent(project, EventType.PROPERTY_OVERRIDE, modifier.getUserId(), diffMessage);
return;
} }","class _ { public void setJobOverrideProperty(Project project, Props prop, String jobName, User modifier) throws ProjectManagerException {
prop.setSource(jobName + "".jor"");
Props oldProps = projectLoader.fetchProjectProperty(project, prop.getSource());
projectLoader.updateProjectProperty(project, prop);
String diffMessage = PropsUtils.getPropertyDiff(oldProps, prop);
projectLoader.postEvent(project, EventType.PROPERTY_OVERRIDE, modifier.getUserId(), diffMessage);
return;
} }",1
33699,"class _ { public GeneralQueryResult getBySingleKeyBetweenRangeKeys(final String key, final String rangeKey1, final String rangeKey2, final int limit) {
final Map<String, Condition> queryConditions = Maps.newHashMap();
if (rangeKeyColumnName.isPresent()) {
final List<AttributeValue> values = Lists.newArrayList();
 values.add(new AttributeValue().withS(rangeKey1));
 values.add(new AttributeValue().withS(rangeKey2));
final Condition selectRangeKeyCondition = new Condition() .withComparisonOperator(ComparisonOperator.BETWEEN.toString()) .withAttributeValueList(values);
queryConditions.put(rangeKeyColumnName.get(), selectRangeKeyCondition);
} return getBySingleKey(key, queryConditions, limit);
} }","class _ { public GeneralQueryResult getBySingleKeyBetweenRangeKeys(final String key, final String rangeKey1, final String rangeKey2, final int limit) {
final Map<String, Condition> queryConditions = Maps.newHashMap();
if (rangeKeyColumnName.isPresent()) {
final List<AttributeValue> values = Lists.newArrayList( new AttributeValue().withS(rangeKey1), new AttributeValue().withS(rangeKey2));
final Condition selectRangeKeyCondition = new Condition() .withComparisonOperator(ComparisonOperator.BETWEEN.toString()) .withAttributeValueList(values);
queryConditions.put(rangeKeyColumnName.get(), selectRangeKeyCondition);
} return getBySingleKey(key, queryConditions, limit);
} }",1
33724,"class _ { private Object[] mapExpandedElements(AbstractHistoryCategory[] categories, Object[] expandedElements) {
HashSet<String> names = new HashSet<>();
for (Object expandedElement : expandedElements) {
names.add(((DateHistoryCategory) expandedElement).getName());
} ArrayList<AbstractHistoryCategory> expandable = new ArrayList<>();
for (AbstractHistoryCategory  categorie :  categories) {
if (names.contains(categorie.getName())) {
expandable.add(categorie);
} } return expandable.toArray(new Object[expandable.size()]);
} }","class _ { private Object[] mapExpandedElements(AbstractHistoryCategory[] categories, Object[] expandedElements) {
HashSet<String> names = new HashSet<>();
for (Object expandedElement : expandedElements) {
names.add(((DateHistoryCategory) expandedElement).getName());
} ArrayList<AbstractHistoryCategory> expandable = new ArrayList<>();
for (AbstractHistoryCategory category : categories) {
if (names.contains(category.getName())) {
expandable.add(category);
} } return expandable.toArray(new Object[expandable.size()]);
} }",1
33729,"class _ { private boolean overwrite(String name) {
for (Object  propertie :  getProperties()) {
Property property = (Property) propertie;
String propertyName = property.getName();
if (propertyName.equals(name)) {
if (property.isDefault()) {
MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] {
propertyName, property.getPluginLabel() }));
return false;
} boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] {
name }));
if (!overWrite) {
return false;
} ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property);
break;
} } return true;
} }","class _ { private boolean overwrite(String name) {
for (Object prop : getProperties()) {
Property property = (Property) prop;
String propertyName = property.getName();
if (propertyName.equals(name)) {
if (property.isDefault()) {
MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] {
propertyName, property.getPluginLabel() }));
return false;
} boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] {
name }));
if (!overWrite) {
return false;
} ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property);
break;
} } return true;
} }",1
33731,"class _ { private JFreeChart createDebugEventGanttChart() {
eventStatistics = new EventStatistics( InitializationManager.getInstance().getDebugEventManager(), selectedDebugInterval);
 final GanttCategoryDataset dataset = eventStatistics  .createDebugEventGanttChartDataset();
final JFreeChart chart = ChartFactory.createGanttChart( ""Debug Events During Selected Debug Interval"", ""Event"", ""Time"", dataset, false, true, false);
CategoryPlot plot = chart.getCategoryPlot();
ValueAxis axis = plot.getRangeAxis();
axis.setRangeWithMargins(selectedDebugInterval.getStart().getTime(), selectedDebugInterval.getEnd().getTime());
plot.setRenderer(new WatchDogGanttRenderer());
return chart;
} }","class _ { private JFreeChart createDebugEventGanttChart() {
eventStatistics = new EventStatistics( InitializationManager.getInstance().getDebugEventManager(), selectedDebugInterval);
GanttCategoryDataset dataset = eventStatistics .createDebugEventGanttChartDataset();
JFreeChart chart = ChartFactory.createGanttChart( ""Debug Events During Selected Debug Interval"", ""Event"", ""Time"", dataset, false, true, false);
CategoryPlot plot = chart.getCategoryPlot();
ValueAxis axis = plot.getRangeAxis();
axis.setRangeWithMargins(selectedDebugInterval.getStart().getTime(), selectedDebugInterval.getEnd().getTime());
plot.setRenderer(new WatchDogGanttRenderer());
return chart;
} }",1
33741,"class _ { private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException {
final File tmpFile = new File(baseDir, name);
filesInProcess.add(tmpFile);
return new SmooshedWriter() {
private final FileOutputStream out = new FileOutputStream(tmpFile);
private final GatheringByteChannel channel = out.getChannel();
private final Closer closer = Closer.create();
 ;
 private int currOffset = 0;
{
closer.register(out);
closer.register(channel);
} @Override public void close() throws IOException {
closer.close();
completedFiles.add(tmpFile);
filesInProcess.remove(tmpFile);
if (!writerCurrentlyInUse) {
mergeWithSmoosher();
} } public int bytesLeft() {
return (int) (size - currOffset);
} @Override public int write(ByteBuffer buffer) throws IOException {
return addToOffset(channel.write(buffer));
} @Override public int write(InputStream in) throws IOException {
return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel));
} @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException {
return addToOffset(channel.write(srcs, offset, length));
} @Override public long write(ByteBuffer[] srcs) throws IOException {
return addToOffset(channel.write(srcs));
} public int addToOffset(long numBytesWritten) {
if (numBytesWritten > bytesLeft()) {
throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don't do that."", numBytesWritten, bytesLeft());
} currOffset += numBytesWritten;
return Ints.checkedCast(numBytesWritten);
} @Override public boolean isOpen() {
return channel.isOpen();
} };
} }","class _ { private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException {
final File tmpFile = new File(baseDir, name);
filesInProcess.add(tmpFile);
return new SmooshedWriter() {
private final FileOutputStream out = new FileOutputStream(tmpFile);
private final GatheringByteChannel channel = out.getChannel();
private final Closer closer = Closer.create();
private int currOffset = 0;
{
closer.register(out);
closer.register(channel);
} @Override public void close() throws IOException {
closer.close();
completedFiles.add(tmpFile);
filesInProcess.remove(tmpFile);
if (!writerCurrentlyInUse) {
mergeWithSmoosher();
} } public int bytesLeft() {
return (int) (size - currOffset);
} @Override public int write(ByteBuffer buffer) throws IOException {
return addToOffset(channel.write(buffer));
} @Override public int write(InputStream in) throws IOException {
return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel));
} @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException {
return addToOffset(channel.write(srcs, offset, length));
} @Override public long write(ByteBuffer[] srcs) throws IOException {
return addToOffset(channel.write(srcs));
} public int addToOffset(long numBytesWritten) {
if (numBytesWritten > bytesLeft()) {
throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don't do that."", numBytesWritten, bytesLeft());
} currOffset += numBytesWritten;
return Ints.checkedCast(numBytesWritten);
} @Override public boolean isOpen() {
return channel.isOpen();
} };
} }",1
33750,"class _ { public static int searchAndReplace(File fDirToLook, File fFileName) throws Throwable {
if (fDirToLook == null) {
return 0;
} if (fDirToLook.isDirectory()) {
int iCopies = 0;
File[] faFilesInDir = fDirToLook.listFiles();
if (faFilesInDir != null && faFilesInDir.length > 0) {
for (File fFile : faFilesInDir) {
iCopies += searchAndReplace(fFile, fFileName);
} } return iCopies;
} else if (fDirToLook.isFile()) {
if (fDirToLook.getCanonicalPath().equalsIgnoreCase(fFileName.getCanonicalPath())) {
return 0;
} else if (fDirToLook.getName().equalsIgnoreCase(fFileName.getName())) {
try {
boolean bCopied = copy(fFileName, fDirToLook);
if (bCopied) {
 LOG.debug(""Replaced file: "" + fDirToLook.getCanonicalPath());
 return 1;
} else {
return 0;
} } catch (Exception e) {
LOG.error(""Failed to replace file {}: {}"", fDirToLook.getCanonicalPath(), e.getLocalizedMessage(), e);
} } } return 0;
} }","class _ { public static int searchAndReplace(File fDirToLook, File fFileName) throws Throwable {
if (fDirToLook == null) {
return 0;
} if (fDirToLook.isDirectory()) {
int iCopies = 0;
File[] faFilesInDir = fDirToLook.listFiles();
if (faFilesInDir != null && faFilesInDir.length > 0) {
for (File fFile : faFilesInDir) {
iCopies += searchAndReplace(fFile, fFileName);
} } return iCopies;
} else if (fDirToLook.isFile()) {
if (fDirToLook.getCanonicalPath().equalsIgnoreCase(fFileName.getCanonicalPath())) {
return 0;
} else if (fDirToLook.getName().equalsIgnoreCase(fFileName.getName())) {
try {
boolean bCopied = copy(fFileName, fDirToLook);
if (bCopied) {
LOG.debug(""Replaced file: {}"" , fDirToLook.getCanonicalPath());
return 1;
} else {
return 0;
} } catch (Exception e) {
LOG.error(""Failed to replace file {}: {}"", fDirToLook.getCanonicalPath(), e.getLocalizedMessage(), e);
} } } return 0;
} }",1
33760,"class _ { private void exportAnalysis() {
FileDialog dialog = TmfFileDialogFactory.create(Display.getCurrent().getActiveShell(), SWT.SAVE);
String selection = fAnalysesTable.getSelection()[0].getText();
dialog.setText(NLS.bind(Messages.ManageXMLAnalysisDialog_SelectFileExport, selection));
dialog.setFilterExtensions(new String[] {
XML_FILTER_EXTENSION, TmfXmlStrings.WILDCARD });
String selectionXml = XmlUtils.createXmlFileString(selection);
dialog.setFileName(selectionXml);
String path = dialog.open();
 if (path != null) {
if (!XmlUtils.exportXmlFile(selectionXml, path).isOK()) {
Activator.logError(NLS.bind(Messages.ManageXMLAnalysisDialog_FailedToExport, selectionXml));
} }  } }","class _ { private void exportAnalysis() {
FileDialog dialog = TmfFileDialogFactory.create(Display.getCurrent().getActiveShell(), SWT.SAVE);
String selection = fAnalysesTable.getSelection()[0].getText();
dialog.setText(NLS.bind(Messages.ManageXMLAnalysisDialog_SelectFileExport, selection));
dialog.setFilterExtensions(new String[] {
XML_FILTER_EXTENSION, TmfXmlStrings.WILDCARD });
String selectionXml = XmlUtils.createXmlFileString(selection);
dialog.setFileName(selectionXml);
String path = dialog.open();
if (path != null && !XmlUtils.exportXmlFile(selectionXml, path).isOK()) {
Activator.logError(NLS.bind(Messages.ManageXMLAnalysisDialog_FailedToExport, selectionXml));
} } }",1
33762,"class _ { private void deleteFile(final OplogFile olf) {
synchronized (this.lock) {
if (olf.currSize != 0) {
this.dirHolder.decrementTotalOplogSize(olf.currSize);
olf.currSize = 0;
} if (olf.f == null) return;
if (!olf.f.exists()) return;
assert olf.RAFClosed;
 if (!olf.RAFClosed && olf.raf != null) {
 try {
olf.raf.close();
olf.RAFClosed = true;
} catch (IOException ignore) {
} } getParent().executeDelayedExpensiveWrite(new Runnable() {
@Override public void run() {
if (!olf.f.delete() && olf.f.exists()) {
logger.warn(""Could not delete the file {} {} for disk store {}."", Oplog.this.toString(), getFileType(olf), getParent().getName());
} else {
logger.info(""Deleted {} {} for disk store {}."", Oplog.this.toString(), getFileType(olf), getParent().getName());
} } });
} } }","class _ { private void deleteFile(final OplogFile olf) {
synchronized (this.lock) {
if (olf.currSize != 0) {
this.dirHolder.decrementTotalOplogSize(olf.currSize);
olf.currSize = 0;
} if (olf.f == null) return;
if (!olf.f.exists()) return;
assert olf.RAFClosed;
if (olf.raf != null) {
try {
olf.raf.close();
olf.RAFClosed = true;
} catch (IOException ignore) {
} } getParent().executeDelayedExpensiveWrite(new Runnable() {
@Override public void run() {
if (!olf.f.delete() && olf.f.exists()) {
logger.warn(""Could not delete the file {} {} for disk store {}."", Oplog.this.toString(), getFileType(olf), getParent().getName());
} else {
logger.info(""Deleted {} {} for disk store {}."", Oplog.this.toString(), getFileType(olf), getParent().getName());
} } });
} } }",1
33800,"class _ {  protected Supplier<BsonValue> getReader(final T t) {
 final Class<?> documentClass = t.getClass();
final Optional<Method> maybeIdGetter = getIdGetter(documentClass);
if (maybeIdGetter.isPresent()) {
Method getter = maybeIdGetter.get();
getter.setAccessible(true);
return () -> {
try {
return constructValue(getter.invoke(t));
} catch (Exception e) {
e.printStackTrace();
return BsonNull.VALUE;
} };
} else {
final Optional<Field> maybeField = getIdField(documentClass);
if (maybeField.isPresent()) {
Field field = maybeField.get();
field.setAccessible(true);
return () -> {
try {
return constructValue(field.get(t));
} catch (Exception e) {
e.printStackTrace();
return BsonNull.VALUE;
} };
} else {
return () -> BsonNull.VALUE;
} } } }","class _ { private Supplier<BsonValue> getReader(final T t) {
final Class<?> documentClass = t.getClass();
final Optional<Method> maybeIdGetter = getIdGetter(documentClass);
if (maybeIdGetter.isPresent()) {
Method getter = maybeIdGetter.get();
getter.setAccessible(true);
return () -> {
try {
return constructValue(getter.invoke(t));
} catch (Exception e) {
e.printStackTrace();
return BsonNull.VALUE;
} };
} else {
final Optional<Field> maybeField = getIdField(documentClass);
if (maybeField.isPresent()) {
Field field = maybeField.get();
field.setAccessible(true);
return () -> {
try {
return constructValue(field.get(t));
} catch (Exception e) {
e.printStackTrace();
return BsonNull.VALUE;
} };
} else {
return () -> BsonNull.VALUE;
} } } }",1
33802,"class _ { public void postEvents(int id) throws Exception {
final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_PREFIX + id);
eventReceiverSelector.start();
try {
ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, ""Event Receiver"");
String host = config.getMiddleManagerHost() + "":"" + eventReceiverSelector.pick().getPort();
LOG.info(""Event Receiver Found at host [%s]"", host);
LOG.info(""Checking worker /status/health for [%s]"", host);
 final StatusResponseHandler handler = StatusResponseHandler.getInstance();
 RetryUtil.retryUntilTrue( () -> {
try {
StatusResponseHolder response = httpClient.go( new Request(HttpMethod.GET, new URL(StringUtils.format(""https://%s/status/health"", host))), handler ).get();
return response.getStatus().equals(HttpResponseStatus.OK);
} catch (Throwable e) {
LOG.error(e, """");
return false;
} }, StringUtils.format(""Checking /status/health for worker [%s]"", host) );
LOG.info(""Finished checking worker /status/health for [%s], success"", host);
EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient( host, EVENT_RECEIVER_SERVICE_PREFIX + id, jsonMapper, httpClient, smileMapper );
client.postEventsFromFile(UNION_DATA_FILE);
} finally {
eventReceiverSelector.stop();
} } }","class _ { public void postEvents(int id) throws Exception {
final ServerDiscoverySelector eventReceiverSelector = factory.createSelector(EVENT_RECEIVER_SERVICE_PREFIX + id);
eventReceiverSelector.start();
try {
ServerDiscoveryUtil.waitUntilInstanceReady(eventReceiverSelector, ""Event Receiver"");
String host = config.getMiddleManagerHost() + "":"" + eventReceiverSelector.pick().getPort();
LOG.info(""Event Receiver Found at host [%s]"", host);
LOG.info(""Checking worker /status/health for [%s]"", host);
RetryUtil.retryUntilTrue( () -> {
try {
StatusResponseHolder response = httpClient.go( new Request(HttpMethod.GET, new URL(StringUtils.format(""https://%s/status/health"", host))), StatusResponseHandler.getInstance() ).get();
return response.getStatus().equals(HttpResponseStatus.OK);
} catch (Throwable e) {
LOG.error(e, """");
return false;
} }, StringUtils.format(""Checking /status/health for worker [%s]"", host) );
LOG.info(""Finished checking worker /status/health for [%s], success"", host);
EventReceiverFirehoseTestClient client = new EventReceiverFirehoseTestClient( host, EVENT_RECEIVER_SERVICE_PREFIX + id, jsonMapper, httpClient, smileMapper );
client.postEventsFromFile(UNION_DATA_FILE);
} finally {
eventReceiverSelector.stop();
} } }",1
33806,"class _ { public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {
PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));
message.addEntry(entryData);
doReturn(keys).when(message).getKeysToBeLocked();
when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);
when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());
doNothing().when(bucketRegion).lockRVVForBulkOp();
doNothing().when(bucketRegion).unlockRVVForBulkOp();
InternalCache cache = mock(InternalCache.class);
InternalDistributedSystem ids = mock(InternalDistributedSystem.class);
when(bucketRegion.getCache()).thenReturn(cache);
when(cache.getDistributedSystem()).thenReturn(ids);
when(ids.getOffHeapStore()).thenReturn(null);
 try {
message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);
fail(""Expect PrimaryBucketException"");
} catch (Exception e) {
assertThat(e instanceof PrimaryBucketException);
}  InOrder inOrder = inOrder(bucketRegion);
inOrder.verify(bucketRegion).waitUntilLocked(keys);
inOrder.verify(bucketRegion).lockRVVForBulkOp();
inOrder.verify(bucketRegion).unlockRVVForBulkOp();
inOrder.verify(bucketRegion).removeAndNotifyKeys(keys);
} }","class _ { public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {
PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));
message.addEntry(entryData);
doReturn(keys).when(message).getKeysToBeLocked();
when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);
when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());
doNothing().when(bucketRegion).lockRVVForBulkOp();
doNothing().when(bucketRegion).unlockRVVForBulkOp();
InternalCache cache = mock(InternalCache.class);
InternalDistributedSystem ids = mock(InternalDistributedSystem.class);
when(bucketRegion.getCache()).thenReturn(cache);
when(cache.getDistributedSystem()).thenReturn(ids);
when(ids.getOffHeapStore()).thenReturn(null);
assertThatThrownBy( () -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1)) .isInstanceOf(PrimaryBucketException.class);
InOrder inOrder = inOrder(bucketRegion);
inOrder.verify(bucketRegion).waitUntilLocked(keys);
inOrder.verify(bucketRegion).lockRVVForBulkOp();
inOrder.verify(bucketRegion).unlockRVVForBulkOp();
inOrder.verify(bucketRegion).removeAndNotifyKeys(keys);
} }",1
33815,"class _ { public Iterator<List<ExternalTupleSet>> getValidIndexCombos( List<ExternalTupleSet> indexSet) {
Collections.shuffle(indexSet);
final List<ExternalTupleSet> list = indexSet;
final Iterator<List<Integer>> iter = getValidCombos(list);
return new Iterator<List<ExternalTupleSet>>() {
private List<ExternalTupleSet> next = null;
private List<Integer> nextCombo = null;
private boolean hasNextCalled = false;
private boolean isEmpty = false;
@Override public boolean hasNext() {
if (!hasNextCalled && !isEmpty) {
if (!iter.hasNext()) {
isEmpty = true;
return false;
} else {
nextCombo = iter.next();
List<ExternalTupleSet> indexCombo = Lists .newArrayList();
for (Integer i : nextCombo) {
indexCombo.add(list.get(i));
} next = indexCombo;
hasNextCalled = true;
return true;
} } else  return !isEmpty;
 } @Override public List<ExternalTupleSet> next() {
if (hasNextCalled) {
hasNextCalled = false;
return next;
} else if (isEmpty) {
throw new NoSuchElementException();
} else {
if (this.hasNext()) {
hasNextCalled = false;
return next;
} else {
throw new NoSuchElementException();
} } } @Override public void remove() {
throw new UnsupportedOperationException( ""Cannot delete from iterator!"");
} };
} }","class _ { public Iterator<List<ExternalTupleSet>> getValidIndexCombos( List<ExternalTupleSet> indexSet) {
Collections.shuffle(indexSet);
final List<ExternalTupleSet> list = indexSet;
final Iterator<List<Integer>> iter = getValidCombos(list);
return new Iterator<List<ExternalTupleSet>>() {
private List<ExternalTupleSet> next = null;
private List<Integer> nextCombo = null;
private boolean hasNextCalled = false;
private boolean isEmpty = false;
@Override public boolean hasNext() {
if (!hasNextCalled && !isEmpty) {
if (!iter.hasNext()) {
isEmpty = true;
return false;
} else {
nextCombo = iter.next();
List<ExternalTupleSet> indexCombo = Lists .newArrayList();
for (Integer i : nextCombo) {
indexCombo.add(list.get(i));
} next = indexCombo;
hasNextCalled = true;
return true;
} } else {
return !isEmpty;
} } @Override public List<ExternalTupleSet> next() {
if (hasNextCalled) {
hasNextCalled = false;
return next;
} else if (isEmpty) {
throw new NoSuchElementException();
} else {
if (this.hasNext()) {
hasNextCalled = false;
return next;
} else {
throw new NoSuchElementException();
} } } @Override public void remove() {
throw new UnsupportedOperationException( ""Cannot delete from iterator!"");
} };
} }",1
33818,"class _ { public final int scan(final String table, final String startkey, final int recordcount, final Set<String> fields, final Vector<HashMap<String, ByteIterator>> result) {
try {
final MongoCollection collection = database.getCollection(table);
final Find.Builder find = Find.builder().query(where(""_id"").greaterThanOrEqualTo(startkey)) .limit(recordcount).batchSize(recordcount).sort(Sort.asc(""_id"")) .readPreference(readPreference);
if (fields != null) {
final DocumentBuilder fieldsDoc = BuilderFactory.start();
for (final String field : fields) {
fieldsDoc.add(field, INCLUDE);
} find.projection(fieldsDoc);
} result.ensureCapacity(recordcount);
final MongoIterator<Document> cursor = collection.find(find);
if (!cursor.hasNext()) {
System.err.println(""Nothing found in scan for key "" + startkey);
 return StatusCode.ERROR;
 } while (cursor.hasNext()) {
final Document doc = cursor.next();
final HashMap<String, ByteIterator> docAsMap = new HashMap<String, ByteIterator>();
fillMap(docAsMap, doc);
result.add(docAsMap);
} return StatusCode.OK;
} catch (final Exception e) {
System.err.println(e.toString());
return StatusCode.ERROR;
} } }","class _ { public final Status scan(final String table, final String startkey, final int recordcount, final Set<String> fields, final Vector<HashMap<String, ByteIterator>> result) {
try {
final MongoCollection collection = database.getCollection(table);
final Find.Builder find = Find.builder().query(where(""_id"").greaterThanOrEqualTo(startkey)) .limit(recordcount).batchSize(recordcount).sort(Sort.asc(""_id"")) .readPreference(readPreference);
if (fields != null) {
final DocumentBuilder fieldsDoc = BuilderFactory.start();
for (final String field : fields) {
fieldsDoc.add(field, INCLUDE);
} find.projection(fieldsDoc);
} result.ensureCapacity(recordcount);
final MongoIterator<Document> cursor = collection.find(find);
if (!cursor.hasNext()) {
System.err.println(""Nothing found in scan for key "" + startkey);
return Status.NOT_FOUND;
} while (cursor.hasNext()) {
final Document doc = cursor.next();
final HashMap<String, ByteIterator> docAsMap = new HashMap<String, ByteIterator>();
fillMap(docAsMap, doc);
result.add(docAsMap);
} return Status.OK;
} catch (final Exception e) {
System.err.println(e.toString());
return Status.ERROR;
} } }",1
33848,"class _ { public void deleteUnauthorized() throws Exception {
context.turnOffAuthorisationSystem();
MetadataField metadataField = MetadataFieldBuilder.createMetadataField(context, ELEMENT, QUALIFIER, SCOPE_NOTE)  .build();
 getClient().perform(get(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isOk());
getClient() .perform(delete(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isUnauthorized());
getClient().perform(get(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isOk());
} }","class _ { public void deleteUnauthorized() throws Exception {
context.turnOffAuthorisationSystem();
MetadataField metadataField = MetadataFieldBuilder.createMetadataField(context, ELEMENT, QUALIFIER, SCOPE_NOTE) .build();
context.restoreAuthSystemState();
getClient().perform(get(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isOk());
getClient() .perform(delete(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isUnauthorized());
getClient().perform(get(""/api/core/metadatafields/"" + metadataField.getID())) .andExpect(status().isOk());
} }",1
33892,"class _ { public void setBootSequence(BootSequence value) {
ArrayList<BootSequence> items = new ArrayList<BootSequence>();
for (char a : value.toString().toCharArray()) {
items.add(BootSequence.valueOf((Character.valueOf(a)).toString()));
 }  Object firstBootDevice = null;
for (Object item : getFirstBootDevice().getItems()) {
EntityModel a = (EntityModel) item;
if ((BootSequence) a.getEntity() == Linq.FirstOrDefault(items)) {
firstBootDevice = a;
} } getFirstBootDevice().setSelectedItem(firstBootDevice);
ArrayList<EntityModel> secondDeviceOptions = Linq.<EntityModel> Cast(getSecondBootDevice().getItems());
if (items.size() > 1) {
BootSequence last = items.get(items.size() - 1);
for (EntityModel a : secondDeviceOptions) {
if (a.getEntity() != null && (BootSequence) a.getEntity() == last) {
getSecondBootDevice().setSelectedItem(a);
break;
} } } else {
for (EntityModel a : secondDeviceOptions) {
if (a.getEntity() == null) {
getSecondBootDevice().setSelectedItem(a);
break;
} } } } }","class _ { public void setBootSequence(BootSequence value) {
ArrayList<BootSequence> items = new ArrayList<BootSequence>();
for (char a : value.toString().toCharArray()) {
items.add(BootSequence.valueOf(String.valueOf(a)));
} Object firstBootDevice = null;
for (Object item : getFirstBootDevice().getItems()) {
EntityModel a = (EntityModel) item;
if ((BootSequence) a.getEntity() == Linq.FirstOrDefault(items)) {
firstBootDevice = a;
} } getFirstBootDevice().setSelectedItem(firstBootDevice);
ArrayList<EntityModel> secondDeviceOptions = Linq.<EntityModel> Cast(getSecondBootDevice().getItems());
if (items.size() > 1) {
BootSequence last = items.get(items.size() - 1);
for (EntityModel a : secondDeviceOptions) {
if (a.getEntity() != null && (BootSequence) a.getEntity() == last) {
getSecondBootDevice().setSelectedItem(a);
break;
} } } else {
for (EntityModel a : secondDeviceOptions) {
if (a.getEntity() == null) {
getSecondBootDevice().setSelectedItem(a);
break;
} } } } }",1
33895,"class _ { protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
String requestUri = request.getRequestURI();
logger.debug(""Starting execution of proxy request for {}"", requestUri);
SiteContext siteContext = SiteContext.getCurrent();
if (siteContext == null) {
throw new IllegalStateException(""Can't resolve site context for current request"");
} String siteName = siteContext.getSiteName();
logger.debug(""Resolved site {} for proxy request {}"", siteName, requestUri);
String targetUrl = getTargetUrl(siteContext, requestUri);
logger.debug(""Resolved target url {} for proxy request {}"", targetUrl, requestUri);
if (request.getRequestURL().toString().contains(targetUrl)) {
logger.debug(""Resolved target url for request {} is local, will skip proxy"", requestUri);
 throw new HttpProxyException(""Local target url detected"");
 } request.setAttribute(ATTR_TARGET_URI, targetUrl);
request.setAttribute(ATTR_TARGET_HOST, URIUtils.extractHost(URI.create(targetUrl)));
super.service(request, response);
} }","class _ { protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
String requestUri = request.getRequestURI();
logger.debug(""Starting execution of proxy request for {}"", requestUri);
SiteContext siteContext = SiteContext.getCurrent();
if (siteContext == null) {
throw new IllegalStateException(""Can't resolve site context for current request"");
} String siteName = siteContext.getSiteName();
logger.debug(""Resolved site {} for proxy request {}"", siteName, requestUri);
String targetUrl = getTargetUrl(siteContext, requestUri);
logger.debug(""Resolved target url {} for proxy request {}"", targetUrl, requestUri);
if (request.getRequestURL().toString().contains(targetUrl)) {
logger.debug(""Resolved target url for request {} is local, will skip proxy"", requestUri);
throw new LocalTargetUrlProxyException(""Local target url detected"");
} request.setAttribute(ATTR_TARGET_URI, targetUrl);
request.setAttribute(ATTR_TARGET_HOST, URIUtils.extractHost(URI.create(targetUrl)));
super.service(request, response);
} }",1
33931,"class _ { private void flatMap(IndexedRecord input, ProcessContext context) throws IOException {
python.set(""inputJSON"", new PyString(input.toString()));
python.exec(""input = json.loads(inputJSON)"");
python.exec(""outputList = []"");
python.exec(properties.pythonCode.getValue());
python.exec(""outputJSON = [ json.dumps(outputElement) for outputElement in outputList ]"");
PyObject outputList = python.get(""outputJSON"");
if (outputList instanceof PyList) {
PyList list = (PyList) outputList;
for (Object output : list) {
 JsonSchemaInferrer jsonSchemaInferrer = new JsonSchemaInferrer(new ObjectMapper());
 Schema jsonSchema = jsonSchemaInferrer.inferSchema(output.toString());
JsonGenericRecordConverter jsonGenericRecordConverter = new JsonGenericRecordConverter(jsonSchema);
GenericRecord outputRecord = jsonGenericRecordConverter.convertToAvro(output.toString());
context.output(outputRecord);
} } } }","class _ { private void flatMap(IndexedRecord input, ProcessContext context) throws IOException {
python.set(""inputJSON"", new PyString(input.toString()));
python.exec(""input = json.loads(inputJSON)"");
python.exec(""outputList = []"");
python.exec(properties.pythonCode.getValue());
python.exec(""outputJSON = [ json.dumps(outputElement) for outputElement in outputList ]"");
PyObject outputList = python.get(""outputJSON"");
if (outputList instanceof PyList) {
PyList list = (PyList) outputList;
for (Object output : list) {
if (jsonGenericRecordConverter == null) {
JsonSchemaInferrer jsonSchemaInferrer = new JsonSchemaInferrer(new ObjectMapper());
Schema jsonSchema = jsonSchemaInferrer.inferSchema(output.toString());
jsonGenericRecordConverter = new JsonGenericRecordConverter(jsonSchema);
} GenericRecord outputRecord = jsonGenericRecordConverter.convertToAvro(output.toString());
context.output(outputRecord);
} } } }",1
33961,"class _ { public void execute() throws Exception {
try {
DataModel model = getParser().getDataModels().get(0);
DataLoadTimeSummary dataLoadTimeSummary = new DataLoadTimeSummary();
DataLoadThreadTime dataLoadThreadTime = new DataLoadThreadTime();
for (Scenario scenario : getParser().getScenarios()) {
List<Future> writeBatches = new ArrayList<Future>();
logger.info(""\nLoading "" + scenario.getRowCount() + "" rows for "" + scenario.getTableName());
long start = System.currentTimeMillis();
RowCalculator rowCalculator = new RowCalculator(getThreadPoolSize(), scenario.getRowCount());
for (int i = 0;
i < getThreadPoolSize();
i++) {
List<Column> phxMetaCols = pUtil.getColumnsFromPhoenix( scenario.getSchemaName(), scenario.getTableNameWithoutSchemaName(), pUtil.getConnection());
int threadRowCount = rowCalculator.getNext();
logger.info(""Kick off thread (#"" + i + "")for upsert with ("" + threadRowCount + "") rows."");
Future<Info> write = upsertData(scenario, phxMetaCols, scenario.getTableName(), threadRowCount, dataLoadThreadTime);
writeBatches.add(write);
} if (writeBatches.isEmpty()) {
throw new PherfException( ""Holy shit snacks! Throwing up hands in disbelief and exiting. Could not write data for some unknown reason."");
} int sumRows = 0, sumDuration = 0;
for (Future<Info> write : writeBatches) {
Info writeInfo = write.get();
sumRows += writeInfo.getRowCount();
sumDuration += writeInfo.getDuration();
 System.out  .println(""Executor writes complete with row count ("" + writeInfo.getRowCount() + "") in Ms ("" + writeInfo.getDuration() + "")"");
} logger.info(""Writes completed with total row count ("" + sumRows + "") with total time of("" + sumDuration + "") Ms"");
dataLoadTimeSummary.add(scenario.getTableName(), sumRows, (int) (System.currentTimeMillis() - start));
updatePhoenixStats(scenario.getTableName());
} resultUtil.write(dataLoadTimeSummary);
resultUtil.write(dataLoadThreadTime);
} finally {
pool.shutdown();
} } }","class _ { public void execute() throws Exception {
try {
DataModel model = getParser().getDataModels().get(0);
DataLoadTimeSummary dataLoadTimeSummary = new DataLoadTimeSummary();
DataLoadThreadTime dataLoadThreadTime = new DataLoadThreadTime();
for (Scenario scenario : getParser().getScenarios()) {
List<Future> writeBatches = new ArrayList<Future>();
logger.info(""\nLoading "" + scenario.getRowCount() + "" rows for "" + scenario.getTableName());
long start = System.currentTimeMillis();
RowCalculator rowCalculator = new RowCalculator(getThreadPoolSize(), scenario.getRowCount());
for (int i = 0;
i < getThreadPoolSize();
i++) {
List<Column> phxMetaCols = pUtil.getColumnsFromPhoenix( scenario.getSchemaName(), scenario.getTableNameWithoutSchemaName(), pUtil.getConnection());
int threadRowCount = rowCalculator.getNext();
logger.info(""Kick off thread (#"" + i + "")for upsert with ("" + threadRowCount + "") rows."");
Future<Info> write = upsertData(scenario, phxMetaCols, scenario.getTableName(), threadRowCount, dataLoadThreadTime);
writeBatches.add(write);
} if (writeBatches.isEmpty()) {
throw new PherfException( ""Holy shit snacks! Throwing up hands in disbelief and exiting. Could not write data for some unknown reason."");
} int sumRows = 0, sumDuration = 0;
for (Future<Info> write : writeBatches) {
Info writeInfo = write.get();
sumRows += writeInfo.getRowCount();
sumDuration += writeInfo.getDuration();
logger.info(""Executor writes complete with row count ("" + writeInfo.getRowCount() + "") in Ms ("" + writeInfo.getDuration() + "")"");
} logger.info(""Writes completed with total row count ("" + sumRows + "") with total time of("" + sumDuration + "") Ms"");
dataLoadTimeSummary.add(scenario.getTableName(), sumRows, (int) (System.currentTimeMillis() - start));
updatePhoenixStats(scenario.getTableName());
} resultUtil.write(dataLoadTimeSummary);
resultUtil.write(dataLoadThreadTime);
} finally {
pool.shutdown();
} } }",1
33985,"class _ { public static boolean isValidOverBlackListPatterns(String input, String... blackListPatterns) {
if (ArrayUtils.isEmpty(blackListPatterns)) {
throw new IllegalArgumentException(""Should provide at least one black list pattern"");
} boolean isValid = false;
 if (input != null) {
 for (String key : blackListPatterns) {
if (validatorConfig.getPattern(key) != null) {
isValid = !validatorConfig.getPattern(key).matcher(input).matches();
if (!isValid) {
break;
} } } } return isValid;
} }","class _ { public static boolean isValidOverBlackListPatterns(String input, String... blackListPatterns) {
if (ArrayUtils.isEmpty(blackListPatterns)) {
throw new IllegalArgumentException(""Should provide at least one black list pattern"");
} if (StringUtils.isEmpty(input)) {
return true;
} boolean isValid = false;
for (String key : blackListPatterns) {
if (validatorConfig.getPattern(key) != null) {
isValid = !validatorConfig.getPattern(key).matcher(input).matches();
if (!isValid) {
break;
} } } return isValid;
} }",1
33987,"class _ { public void slightlyOccupiedAABBTest() {
Level check = new Level(emptyPlayer, emptyUnit, new Grid<>(Arrays.asList( Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL), 3, 3));
CollisionHandler handler = new CollisionHandler(check);
Cell cell = handler.checkLevelAABB( new AABB(new Point(1.5, 1.5), new Point(2.5, 2.5)), new Point(0, 0));
 assertFalse(cell.getType() == Cell.EMPTY);
 } }","class _ { public void slightlyOccupiedAABBTest() {
Level check = new Level(emptyPlayer, emptyUnit, new Grid<>(Arrays.asList( Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL, Cell.EMPTY, Cell.WALL, Cell.WALL, Cell.WALL, Cell.WALL), 3, 3));
CollisionHandler handler = new CollisionHandler(check);
Cell cell = handler.checkLevelAABB( new AABB(new Point(1.5, 1.5), new Point(2.5, 2.5)), new Point(0, 0));
assertNotEquals(cell, Cell.EMPTY);
} }",1
34011,"class _ { private String getIPv4inSubnet(String subnet) {
try {
final Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
while (interfaces.hasMoreElements()) {
final NetworkInterface current = interfaces.nextElement();
if (!current.isUp() || current.isLoopback() || current.isVirtual()) {
continue;
} for (InterfaceAddress ifAddr : current.getInterfaceAddresses()) {
InetAddress addr = ifAddr.getAddress();
if (addr.isLoopbackAddress() || (addr instanceof Inet6Address)) {
continue;
} String ipv4Address = addr.getHostAddress();
String subNetString = getIpv4NetAddress(ipv4Address, ifAddr.getNetworkPrefixLength()) + ""/"" + String.valueOf(ifAddr.getNetworkPrefixLength());
if (subNetString.equals(subnet)) {
return ipv4Address;
} } } } catch (SocketException ex) {
LOGGER.error(""Could not retrieve network interface: {}"", ex.getMessage(), ex);
 return null;
 } return null;
} }","class _ { private String getIPv4inSubnet(String subnet) {
try {
final Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
while (interfaces.hasMoreElements()) {
final NetworkInterface current = interfaces.nextElement();
if (!current.isUp() || current.isLoopback() || current.isVirtual()) {
continue;
} for (InterfaceAddress ifAddr : current.getInterfaceAddresses()) {
InetAddress addr = ifAddr.getAddress();
if (addr.isLoopbackAddress() || (addr instanceof Inet6Address)) {
continue;
} String ipv4Address = addr.getHostAddress();
String subNetString = getIpv4NetAddress(ipv4Address, ifAddr.getNetworkPrefixLength()) + ""/"" + String.valueOf(ifAddr.getNetworkPrefixLength());
if (subNetString.equals(subnet)) {
return ipv4Address;
} } } } catch (SocketException ex) {
LOGGER.error(""Could not retrieve network interface: {}"", ex.getMessage(), ex);
} return null;
} }",1
34036,"class _ { public void batch_update_using_sso_credential() {
final WhoisResources whoisResources = mapRpslObjects( RpslObject.parse( ""inetnum: 19.0.0.0 - 19.1.255.255\n"" + ""netname: TEST-NET-NAME\n"" + ""descr: TEST network\n"" + ""country: BE\n"" + ""admin-c: TP1-TEST\n"" + ""tech-c: TP1-TEST\n"" + ""status: ASSIGNED PA\n"" + ""mnt-by: OWNER4-MNT\n"" + ""source: TEST"") );
try {
RestTest.target(getPort(), ""whois/batch/TEST"") .request() .cookie(""crowd.token_key"", ""valid-token"") .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);
 } catch (BadRequestException bre) {
 final WhoisResources response = bre.getResponse().readEntity(WhoisResources.class);
System.out.println(response);
} assertNotNull(databaseHelper.lookupObject(ObjectType.INETNUM, ""19.0.0.0 - 19.1.255.255""));
} }","class _ { public void batch_update_using_sso_credential() {
final WhoisResources whoisResources = mapRpslObjects( RpslObject.parse( ""inetnum: 19.0.0.0 - 19.1.255.255\n"" + ""netname: TEST-NET-NAME\n"" + ""descr: TEST network\n"" + ""country: BE\n"" + ""admin-c: TP1-TEST\n"" + ""tech-c: TP1-TEST\n"" + ""status: ASSIGNED PA\n"" + ""mnt-by: OWNER4-MNT\n"" + ""source: TEST"") );
RestTest.target(getPort(), ""whois/batch/TEST"") .request() .cookie(""crowd.token_key"", ""valid-token"") .post(Entity.entity(whoisResources, MediaType.APPLICATION_JSON_TYPE), WhoisResources.class);
assertNotNull(databaseHelper.lookupObject(ObjectType.INETNUM, ""19.0.0.0 - 19.1.255.255""));
} }",1
34051,"class _ { public void multiRequestMixedReduced() throws IOException {
init();
ViewMultipleRequest<String, Object> multi = db.getViewRequestBuilder(""example"", ""by_tag"") .newMultipleRequest(Key.Type.STRING, Object.class) .reduce(false).keys(""java"") .add() .reduce(true) .add() .build();
List<ViewResponse<String, Object>> responses = multi.getViewResponses();
 assertEquals(2, responses.size(), ""There should be 2 respones for 2 requests"");
 List<String> javaTagKeys = responses.get(0).getKeys();
assertEquals(1, javaTagKeys.size(), ""There should be 1 java tag result"");
assertEquals(""java"", javaTagKeys.get(0), ""The key should be java"");
List<Object> allTagsReduced = responses.get(1).getValues();
assertEquals(1, allTagsReduced.size(), ""There should be 1 reduced result"");
assertEquals(4, ((Number) allTagsReduced.get(0)).intValue(), ""The result should be 4"");
} }","class _ { public void multiRequestMixedReduced() throws IOException {
init();
ViewMultipleRequest<String, Object> multi = db.getViewRequestBuilder(""example"", ""by_tag"") .newMultipleRequest(Key.Type.STRING, Object.class) .reduce(false).keys(""java"") .add() .reduce(true) .add() .build();
List<ViewResponse<String, Object>> responses = multi.getViewResponses();
assertEquals(2, responses.size(), ""There should be 2 responses for 2 requests"");
List<String> javaTagKeys = responses.get(0).getKeys();
assertEquals(1, javaTagKeys.size(), ""There should be 1 java tag result"");
assertEquals(""java"", javaTagKeys.get(0), ""The key should be java"");
List<Object> allTagsReduced = responses.get(1).getValues();
assertEquals(1, allTagsReduced.size(), ""There should be 1 reduced result"");
assertEquals(4, ((Number) allTagsReduced.get(0)).intValue(), ""The result should be 4"");
} }",1
34053,"class _ { private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {
if (fileRepositoryLookupCache.containsKey(file.getId())) {
return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);
} if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {
throw new TskCoreException(""Missing SHA-256 hash for file "" + file.getName() + ""(ID: "" + file.getId() + "")"");
} try {
boolean exists = FileRepository.exists(file);
if (exists) {
fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);
} else {
fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);
} return exists;
} catch (IOException | FileRepositoryException ex) {
 throw new TskCoreException(""Error looking up file in file repository"");
 } } }","class _ { private boolean fileIsInRepository(AbstractFile file) throws TskCoreException {
if (fileRepositoryLookupCache.containsKey(file.getId())) {
return fileRepositoryLookupCache.get(file.getId()).equals(FileRepoState.EXISTS);
} if (file.getSha256Hash() == null || file.getSha256Hash().isEmpty()) {
throw new TskCoreException(""Missing SHA-256 hash for file "" + file.getName() + ""(ID: "" + file.getId() + "")"");
} try {
boolean exists = FileRepository.exists(file);
if (exists) {
fileRepositoryLookupCache.put(file.getId(), FileRepoState.EXISTS);
} else {
fileRepositoryLookupCache.put(file.getId(), FileRepoState.DOES_NOT_EXIST);
} return exists;
} catch (IOException | FileRepositoryException ex) {
throw new TskCoreException(""Error looking up file in file repository"", ex);
} } }",1
34058,"class _ { public void validateTrialInstanceValue(final List<MeasurementVariable> conditions, final Map<String, List<Message>> errorMessages) {
for (final MeasurementVariable varCondition : conditions) {
if (varCondition.getTermId() == TermId.TRIAL_INSTANCE_FACTOR.getId()) {
final Optional<Message> message = Util.validateVariableValues(varCondition, varCondition.getValue());
if (message.isPresent()) {
 if (errorMessages.containsKey(Constants.INVALID_TRIAL)) {
 errorMessages.get(Constants.INVALID_TRIAL).add(message.get());
} else {
errorMessages.put(Constants.INVALID_TRIAL, Arrays.asList(message.get()));
} } } } } }","class _ { public void validateTrialInstanceValue(final List<MeasurementVariable> conditions, final Map<String, List<Message>> errorMessages) {
for (final MeasurementVariable varCondition : conditions) {
if (varCondition.getTermId() == TermId.TRIAL_INSTANCE_FACTOR.getId()) {
final Optional<Message> message = Util.validateVariableValues(varCondition, varCondition.getValue());
if (message.isPresent()) {
errorMessages.putIfAbsent(Constants.INVALID_TRIAL, new ArrayList<>());
errorMessages.get(Constants.INVALID_TRIAL).add(message.get());
} } } } }",1
34103,"class _ { public String execute(final LnClientConnection conn, final DlmsDevice device, final DataObject object) throws IOException, TimeoutException, ProtocolAdapterException {
final AttributeAddress attributeAddress = new AttributeAddress(CLASS_ID, OBIS_CODE, ATTRIBUTE_ID);
LOGGER.info(""Retrieving configuration objects for class id: {}, obis code: {}, attribute id: {}"", CLASS_ID, OBIS_CODE, ATTRIBUTE_ID);
final List<GetResult> getResultList = conn.get(attributeAddress);
if (getResultList.isEmpty()) {
throw new ProtocolAdapterException(""No GetResult received while retrieving configuration objects."");
} if (getResultList.size() > 1 || getResultList.get(0) == null) {
throw new ProtocolAdapterException(""Expected 1 GetResult while retrieving configuration objects, got "" + getResultList.size());
} final DataObject resultData = getResultList.get(0).resultData();
if (!resultData.isComplex()) {
this.throwUnexpectedTypeProtocolAdapterException();
} @SuppressWarnings(""unchecked"") final List<DataObject> resultDataValue = (List<DataObject>) getResultList.get(0).resultData().value();
final List<ClassIdObisAttr> allObisCodes = this.getAllObisCodes(resultDataValue);
this.logAllObisCodes(allObisCodes);
final String output = this.createOutput(conn, allObisCodes);
 LOGGER.info(""Total output is: {}"", output);
 return output;
} }","class _ { public String execute(final LnClientConnection conn, final DlmsDevice device, final DataObject object) throws IOException, TimeoutException, ProtocolAdapterException {
final AttributeAddress attributeAddress = new AttributeAddress(CLASS_ID, OBIS_CODE, ATTRIBUTE_ID);
LOGGER.debug(""Retrieving configuration objects for class id: {}, obis code: {}, attribute id: {}"", CLASS_ID, OBIS_CODE, ATTRIBUTE_ID);
final List<GetResult> getResultList = conn.get(attributeAddress);
if (getResultList.isEmpty()) {
throw new ProtocolAdapterException(""No GetResult received while retrieving configuration objects."");
} if (getResultList.size() > 1 || getResultList.get(0) == null) {
throw new ProtocolAdapterException(""Expected 1 GetResult while retrieving configuration objects, got "" + getResultList.size());
} final DataObject resultData = getResultList.get(0).resultData();
if (!resultData.isComplex()) {
this.throwUnexpectedTypeProtocolAdapterException();
} @SuppressWarnings(""unchecked"") final List<DataObject> resultDataValue = (List<DataObject>) getResultList.get(0).resultData().value();
final List<ClassIdObisAttr> allObisCodes = this.getAllObisCodes(resultDataValue);
this.logAllObisCodes(allObisCodes);
final String output = this.createOutput(conn, allObisCodes);
LOGGER.debug(""Total output is: {}"", output);
return output;
} }",1
34149,"class _ { private boolean hidePart(MPart part, boolean save, boolean confirm, boolean force, boolean local) {
if (!partService.getParts().contains(part)) {
if (local) {
return false;
} part.setToBeRendered(false);
return true;
} Object clientObject = part.getObject();
if  (clientObject == null || !(clientObject  instanceof CompatibilityPart)) {
if (save) {
if (partService.savePart(part, confirm)) {
partService.hidePart(part, force);
return true;
} return false;
} partService.hidePart(part, force);
return true;
} IWorkbenchPart workbenchPart = getWrappedPart((CompatibilityPart) clientObject);
if (save && workbenchPart != null) {
ISaveablePart saveablePart = SaveableHelper.getSaveable(workbenchPart);
if (saveablePart != null) {
if (saveablePart.isSaveOnCloseNeeded()) {
if (!saveSaveable(saveablePart, workbenchPart, confirm, true)) {
return false;
} } } } for (IViewReference viewRef : viewReferences) {
if (workbenchPart == viewRef.getPart(false)) {
partService.hidePart(part, force);
return true;
} } for (IEditorReference viewRef : editorReferences) {
if (workbenchPart == viewRef.getPart(false)) {
partService.hidePart(part, force);
return true;
} } return false;
} }","class _ { private boolean hidePart(MPart part, boolean save, boolean confirm, boolean force, boolean local) {
if (!partService.getParts().contains(part)) {
if (local) {
return false;
} part.setToBeRendered(false);
return true;
} Object clientObject = part.getObject();
if (!(clientObject instanceof CompatibilityPart)) {
if (save) {
if (partService.savePart(part, confirm)) {
partService.hidePart(part, force);
return true;
} return false;
} partService.hidePart(part, force);
return true;
} IWorkbenchPart workbenchPart = getWrappedPart((CompatibilityPart) clientObject);
if (save && workbenchPart != null) {
ISaveablePart saveablePart = SaveableHelper.getSaveable(workbenchPart);
if (saveablePart != null) {
if (saveablePart.isSaveOnCloseNeeded()) {
if (!saveSaveable(saveablePart, workbenchPart, confirm, true)) {
return false;
} } } } for (IViewReference viewRef : viewReferences) {
if (workbenchPart == viewRef.getPart(false)) {
partService.hidePart(part, force);
return true;
} } for (IEditorReference viewRef : editorReferences) {
if (workbenchPart == viewRef.getPart(false)) {
partService.hidePart(part, force);
return true;
} } return false;
} }",1
34150,"class _ { public static void populateStockIdInListDataProject(final List<ListDataProject> data , InventoryDataManager inventoryDataManager) {
final List<Integer> gids = new ArrayList<>();
if (data != null && !data.isEmpty()) {
for (final ListDataProject listDataProject : data) {
gids.add(listDataProject.getGermplasmId());
} } Map<Integer, String> stockIds = inventoryDataManager.retrieveStockIds(gids);
if (data != null && !data.isEmpty()) {
for (final ListDataProject ListData : data) {
String stockIdValue = """";
if (stockIds != null) {
for (final Integer gid : stockIds.keySet()) {
if (ListData.getGermplasmId().equals(gid)) {
stockIdValue = stockIds.get(gid);
break;
} } }  ListData.setStockIDs(stockIdValue);
 } } } }","class _ { public static void populateStockIdInListDataProject(final List<ListDataProject> data , InventoryDataManager inventoryDataManager) {
final List<Integer> gids = new ArrayList<>();
if (data != null && !data.isEmpty()) {
for (final ListDataProject listDataProject : data) {
gids.add(listDataProject.getGermplasmId());
} } Map<Integer, String> stockIds = inventoryDataManager.retrieveStockIds(gids);
if (data != null && !data.isEmpty()) {
for (final ListDataProject listData : data) {
String stockIdValue = """";
if (stockIds != null) {
for (final Integer gid : stockIds.keySet()) {
if (listData.getGermplasmId().equals(gid)) {
stockIdValue = stockIds.get(gid);
break;
} } } listData.setStockIDs(stockIdValue);
} } } }",1
34167,"public String solveProblemForAll() {
for (Task task : this.steps) {
this.currentStep = task;
this.solution.setId(getIdForCorrection(this.solutionTask));
serviceManager.getWorkflowService().setSolution(getSolution());
try {
setCurrentStep(serviceManager.getWorkflowService().solveProblem(this.currentStep));
saveStep();
} catch (DAOException | DataException e) {
Helper.setFehlerMeldung(""correctionSolveProblem"");
 logger.error(e.getMessage(), e);
 } } setSolution(serviceManager.getWorkflowService().getSolution());
this.solutionTask = """";
AktuelleSchritteForm asf = (AktuelleSchritteForm) Helper.getManagedBeanValue(""#{AktuelleSchritteForm}"");
return asf.filterAll();
}","public String solveProblemForAll() {
for (Task task : this.steps) {
this.currentStep = task;
this.solution.setId(getIdForCorrection(this.solutionTask));
serviceManager.getWorkflowControllerService().setSolution(getSolution());
try {
setCurrentStep(serviceManager.getWorkflowControllerService().solveProblem(this.currentStep));
saveStep();
} catch (DAOException | DataException e) {
Helper.setErrorMessage(""correctionSolveProblem"", logger, e);
} } setSolution(serviceManager.getWorkflowControllerService().getSolution());
this.solutionTask = """";
AktuelleSchritteForm asf = (AktuelleSchritteForm) Helper.getManagedBeanValue(""#{AktuelleSchritteForm}"");
return asf.filterAll();
}",1
34168,"class _ { public void setTabs() {
List<Fragment> fragmentList = new ArrayList<>();
List<String> titleList = new ArrayList<>();
searchImageFragment = new SearchImageFragment();
searchCategoryFragment= new SearchCategoryFragment();
fragmentList.add(searchImageFragment);
titleList.add(getResources().getString(R.string.search_tab_title_media));
fragmentList.add(searchCategoryFragment);
titleList.add(getResources().getString(R.string.search_tab_title_categories));
viewPagerAdapter.setTabData(fragmentList, titleList);
viewPagerAdapter.notifyDataSetChanged();
searchDisposable = RxSearchView.queryTextChanges(searchView) .takeUntil(RxView.detaches(searchView)) .debounce(500, TimeUnit.MILLISECONDS) .observeOn(AndroidSchedulers.mainThread()) .subscribe(query -> {
this.query = query.toString();
if (!TextUtils.isEmpty(query)) {
viewPager.setVisibility(View.VISIBLE);
tabLayout.setVisibility(View.VISIBLE);
searchHistoryContainer.setVisibility(View.GONE);
 if (searchImageFragment != null  && searchImageFragment.isAdded() && !searchImageFragment.isDetached()) {
searchImageFragment.updateImageList(query.toString());
} if (searchCategoryFragment != null && searchCategoryFragment.isAdded() && !searchCategoryFragment.isDetached()) {
searchCategoryFragment.updateCategoryList(query.toString());
} } else {
viewPager.setVisibility(View.GONE);
tabLayout.setVisibility(View.GONE);
searchHistoryContainer.setVisibility(View.VISIBLE);
recentSearchesFragment.updateRecentSearches();
} });
} }","class _ { public void setTabs() {
List<Fragment> fragmentList = new ArrayList<>();
List<String> titleList = new ArrayList<>();
searchImageFragment = new SearchImageFragment();
searchCategoryFragment= new SearchCategoryFragment();
fragmentList.add(searchImageFragment);
titleList.add(getResources().getString(R.string.search_tab_title_media));
fragmentList.add(searchCategoryFragment);
titleList.add(getResources().getString(R.string.search_tab_title_categories));
viewPagerAdapter.setTabData(fragmentList, titleList);
viewPagerAdapter.notifyDataSetChanged();
searchDisposable = RxSearchView.queryTextChanges(searchView) .takeUntil(RxView.detaches(searchView)) .debounce(500, TimeUnit.MILLISECONDS) .observeOn(AndroidSchedulers.mainThread()) .subscribe(query -> {
this.query = query.toString();
if (!TextUtils.isEmpty(query)) {
viewPager.setVisibility(View.VISIBLE);
tabLayout.setVisibility(View.VISIBLE);
searchHistoryContainer.setVisibility(View.GONE);
if (FragmentUtils.isFragmentUIActive(searchImageFragment)) {
searchImageFragment.updateImageList(query.toString());
} if (FragmentUtils.isFragmentUIActive(searchCategoryFragment)) {
searchCategoryFragment.updateCategoryList(query.toString());
} } else {
viewPager.setVisibility(View.GONE);
tabLayout.setVisibility(View.GONE);
searchHistoryContainer.setVisibility(View.VISIBLE);
recentSearchesFragment.updateRecentSearches();
} });
} }",1
34183,"class _ { public static String getSessionToken(String url) {
String token = ""undefined"";
try {
String decodedURL = URLDecoder.decode(url, ""UTF-8"");
 String[] splitedURL = decodedURL.split(""\\?"");
 if (splitedURL.length == 2) {
String params = splitedURL[1];
for (String param : params.split(""\\&"")) {
if (param.startsWith(""sessionToken="")) {
token = param.split(""\\="")[1];
} } } } catch (UnsupportedEncodingException e) {
log.error(e.toString());
} return token;
} }","class _ { public static String getSessionToken(String url) {
String token = ""undefined"";
try {
String decodedURL = URLDecoder.decode(url, ""UTF-8"");
String[] splitURL = decodedURL.split(""\\?"");
if (splitURL.length == 2) {
String params = splitURL[1];
for (String param : params.split(""\\&"")) {
if (param.startsWith(""sessionToken="")) {
token = param.split(""\\="")[1];
} } } } catch (UnsupportedEncodingException e) {
log.error(e.toString());
} return token;
} }",1
34186,"class _ { private byte[] mirrorImage(byte[] data) {
ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
Bitmap photo = BitmapFactory.decodeStream(inputStream);
Matrix m = new Matrix();
m.preScale(-1, 1);
 Bitmap mirroredImage = Bitmap.createBitmap(photo, 0, 0, photo.getWidth(), photo.getHeight(), m, true);
 byte[] result = null;
try {
result = compress(mirroredImage, 85);
} catch (OutOfMemoryError e) {
try {
result = compress(mirroredImage, 70);
} catch (OutOfMemoryError e2) {
e.printStackTrace();
} } try {
inputStream.close();
} catch (IOException e) {
e.printStackTrace();
} return result;
} }","class _ { private byte[] mirrorImage(byte[] data) {
ByteArrayInputStream inputStream = new ByteArrayInputStream(data);
Bitmap photo = BitmapFactory.decodeStream(inputStream);
Matrix m = new Matrix();
m.preScale(-1, 1);
Bitmap mirroredImage = Bitmap.createBitmap(photo, 0, 0, photo.getWidth(), photo.getHeight(), m, false);
byte[] result = null;
try {
result = compress(mirroredImage, 85);
} catch (OutOfMemoryError e) {
try {
result = compress(mirroredImage, 70);
} catch (OutOfMemoryError e2) {
e.printStackTrace();
} } try {
inputStream.close();
} catch (IOException e) {
e.printStackTrace();
} return result;
} }",1
34190,"class _ { public static URL join(URL urlBase, File... elements) {
if (urlBase == null) {
return null;
} final StringBuilder buf = new StringBuilder(urlBase.getPath());
for (final File elt : elements) {
 if (!elt.isAbsolute() && buf.length() == 0 || buf.charAt(buf.length() - 1) != URL_PATH_SEPARATOR_CHAR) {
 buf.append(URL_PATH_SEPARATOR_CHAR);
} buf.append(getFilePath(elt));
} try {
if (isJarURL(urlBase)) {
return new URL( urlBase.getProtocol(), urlBase.getHost(), urlBase.getPort(), buf.toString());
} return new URI( urlBase.getProtocol(), urlBase.getUserInfo(), urlBase.getHost(), urlBase.getPort(), decodeHTMLEntities(buf.toString()), decodeHTMLEntities(urlBase.getQuery()), urlBase.getRef()).toURL();
} catch (Throwable exception) {
} try {
return new URL( urlBase.getProtocol(), urlBase.getHost(), buf.toString());
} catch (Throwable exception) {
return null;
} } }","class _ { public static URL join(URL urlBase, File... elements) {
if (urlBase == null) {
return null;
} final StringBuilder buf = new StringBuilder(urlBase.getPath());
for (final File elt : elements) {
if (!elt.isAbsolute() && (buf.length() == 0 || buf.charAt(buf.length() - 1) != URL_PATH_SEPARATOR_CHAR)) {
buf.append(URL_PATH_SEPARATOR_CHAR);
} buf.append(getFilePath(elt));
} try {
if (isJarURL(urlBase)) {
return new URL( urlBase.getProtocol(), urlBase.getHost(), urlBase.getPort(), buf.toString());
} return new URI( urlBase.getProtocol(), urlBase.getUserInfo(), urlBase.getHost(), urlBase.getPort(), decodeHTMLEntities(buf.toString()), decodeHTMLEntities(urlBase.getQuery()), urlBase.getRef()).toURL();
} catch (Throwable exception) {
} try {
return new URL( urlBase.getProtocol(), urlBase.getHost(), buf.toString());
} catch (Throwable exception) {
return null;
} } }",1
34203,"class _ { public void testListSecurityGroups() {
HttpRequest list = HttpRequest.builder().method(""GET"").endpoint( URI.create(""<LINK_0>"")).headers( ImmutableMultimap.<String, String> builder().put(""Accept"", ""application/json"").put(""X-Auth-Token"", authToken).build()).build();
HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload( payloadFromResource(""/securitygroup_list.json"")).build();
Builder<HttpRequest, HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest, HttpResponse> builder();
requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName, responseWithKeystoneAccess);
requestResponseMap.put(extensionsOfNovaRequest, extensionsOfNovaResponse);
requestResponseMap.put(list, listResponse).build();
SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get();
Set<SecurityGroup> groups = extension.listSecurityGroups();
 assertEquals(1, groups.size());
 } }","class _ { public void testListSecurityGroups() {
HttpRequest list = HttpRequest.builder().method(""GET"").endpoint( URI.create(""<LINK_0>"")).headers( ImmutableMultimap.<String, String> builder().put(""Accept"", ""application/json"").put(""X-Auth-Token"", authToken).build()).build();
HttpResponse listResponse = HttpResponse.builder().statusCode(200).payload( payloadFromResource(""/securitygroup_list.json"")).build();
Builder<HttpRequest, HttpResponse> requestResponseMap = ImmutableMap.<HttpRequest, HttpResponse> builder();
requestResponseMap.put(keystoneAuthWithUsernameAndPasswordAndTenantName, responseWithKeystoneAccess);
requestResponseMap.put(extensionsOfNovaRequest, extensionsOfNovaResponse);
requestResponseMap.put(list, listResponse).build();
SecurityGroupExtension extension = requestsSendResponses(requestResponseMap.build()).getSecurityGroupExtension().get();
Set<SecurityGroup> groups = extension.listSecurityGroups();
assertEquals(groups.size(), 1);
} }",1
34213,"class _ { public Set<String> filterDistributorEntitlementIds(Iterable<String> entsIdsToFilter) {
Set<String> filteredIds = new HashSet<String>();
if (entsIdsToFilter != null && entsIdsToFilter.iterator().hasNext()) {
String querySql = ""SELECT DISTINCT e.id "" + ""FROM Entitlement e JOIN e.consumer c JOIN c.type t "" + ""WHERE t.manifest = true AND e.id IN (:entitlement_ids)"";
Query query = this.getEntityManager().createQuery(querySql);
 int blockSize = Math.min(this.getInBlockSize(), this.getQueryParameterLimit() / 2);
 for (List<String> block : Iterables.partition(entsIdsToFilter, blockSize)) {
query.setParameter(""entitlement_ids"", block);
filteredIds.addAll(query.getResultList());
} } return filteredIds;
} }","class _ { public Set<String> filterDistributorEntitlementIds(Iterable<String> entsIdsToFilter) {
Set<String> filteredIds = new HashSet<String>();
if (entsIdsToFilter != null && entsIdsToFilter.iterator().hasNext()) {
String querySql = ""SELECT DISTINCT e.id "" + ""FROM Entitlement e JOIN e.consumer c JOIN c.type t "" + ""WHERE t.manifest = true AND e.id IN (:entitlement_ids)"";
Query query = this.getEntityManager().createQuery(querySql);
int blockSize = Math.min(this.getInBlockSize(), this.getQueryParameterLimit());
for (List<String> block : Iterables.partition(entsIdsToFilter, blockSize)) {
query.setParameter(""entitlement_ids"", block);
filteredIds.addAll(query.getResultList());
} } return filteredIds;
} }",1
34215,"class _ {  public synchronized String getFieldString(int size, String s) {
 try {
buffer.replace(0, size, emptyString);
buffer.setLength(size);
int maxSize = size;
if (s != null) {
buffer.replace(0, size, s);
int currentBytes = s.substring(0, Math.min(size, s.length())) .getBytes(charset.name()).length;
if (currentBytes > size) {
char[] c = new char[1];
for (int index = size - 1;
currentBytes > size;
index--) {
c[0] = buffer.charAt(index);
String string = new String(c);
buffer.deleteCharAt(index);
currentBytes -= string.getBytes().length;
maxSize--;
} } else {
if (s.length() < size) {
maxSize = size - (currentBytes - s.length());
for (int i = s.length();
i < size;
i++) {
buffer.append(' ');
} } } } buffer.setLength(maxSize);
return buffer.toString();
} catch(UnsupportedEncodingException e) {
throw new RuntimeException(""This error should never occurr"", e);
} } }","class _ { public String getFieldString(int size, String s) {
try {
buffer.replace(0, size, emptyString);
buffer.setLength(size);
int maxSize = size;
if (s != null) {
buffer.replace(0, size, s);
int currentBytes = s.substring(0, Math.min(size, s.length())) .getBytes(charset.name()).length;
if (currentBytes > size) {
char[] c = new char[1];
for (int index = size - 1;
currentBytes > size;
index--) {
c[0] = buffer.charAt(index);
String string = new String(c);
buffer.deleteCharAt(index);
currentBytes -= string.getBytes().length;
maxSize--;
} } else {
if (s.length() < size) {
maxSize = size - (currentBytes - s.length());
for (int i = s.length();
i < size;
i++) {
buffer.append(' ');
} } } } buffer.setLength(maxSize);
return buffer.toString();
} catch(UnsupportedEncodingException e) {
throw new RuntimeException(""This error should never occurr"", e);
} } }",1
34248,"class _ { public void location_lock_dir_error_03() throws IOException {
Assume.assumeTrue(negativePidsTreatedAsAlive);
Location dir = Location.create(tempDir.getRoot().getAbsolutePath());
LocationLock lock = dir.getLock();
Assert.assertTrue(lock.canLock());
Assert.assertFalse(lock.isLocked());
Assert.assertFalse(lock.isOwned());
Assert.assertTrue(lock.canObtain());
try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) {
writer.write(Integer.toString(-1234));
writer.write('\n');
} try {
lock.canObtain();
Assert.fail(""Expected the lock file to be considered invalid"");
} catch (FileException e) {
String errMsg = e.getMessage();
Assert.assertNotNull(errMsg);
 System.out.println(errMsg);
 Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database""));
} } }","class _ { public void location_lock_dir_error_03() throws IOException {
Assume.assumeTrue(negativePidsTreatedAsAlive);
Location dir = Location.create(tempDir.getRoot().getAbsolutePath());
LocationLock lock = dir.getLock();
Assert.assertTrue(lock.canLock());
Assert.assertFalse(lock.isLocked());
Assert.assertFalse(lock.isOwned());
Assert.assertTrue(lock.canObtain());
try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) {
writer.write(Integer.toString(-1234));
writer.write('\n');
} try {
lock.canObtain();
Assert.fail(""Expected the lock file to be considered invalid"");
} catch (FileException e) {
String errMsg = e.getMessage();
Assert.assertNotNull(errMsg);
Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database""));
} } }",1
34252,"class _ { private SelectItem createTagsSelect() {
SelectItem tagsCb = new SelectItem();
tagsCb.setTitle(""<b>Dirac tag</b>"");
tagsCb.setType(""comboBox"");
final AsyncCallback<List<String>> callback = new AsyncCallback<List<String>>() {
@Override public void onFailure(Throwable caught) {
Layout.getInstance().setWarningMessage(""Unable to retrieve configurated list of requirements, setting it to None:<br />"" + caught.getMessage());
tagsCb.setValueMap(""None"");
} @Override public void onSuccess(List<String> result) {
if(!result.contains(""None"")){
result.add(""None"");
}  LinkedHashMap<String, String> requirementsValues = new LinkedHashMap<String, String>();
 for (String requirement : result) {
requirementsValues.put(requirement, requirement);
} tagsCb.setValueMap(requirementsValues);
} };
ApplicationImporterService.Util.getInstance().getApplicationImporterRequirements(callback);
tagsCb.setValue(""None"");
return tagsCb;
} }","class _ { private SelectItem createTagsSelect() {
SelectItem tagsCb = new SelectItem();
tagsCb.setTitle(""<b>Dirac tag</b>"");
tagsCb.setType(""comboBox"");
final AsyncCallback<List<String>> callback = new AsyncCallback<List<String>>() {
@Override public void onFailure(Throwable caught) {
Layout.getInstance().setWarningMessage(""Unable to retrieve configurated list of requirements, setting it to None:<br />"" + caught.getMessage());
tagsCb.setValueMap(""None"");
} @Override public void onSuccess(List<String> result) {
if(!result.contains(""None"")){
result.add(""None"");
} Map<String, String> requirementsValues = new LinkedHashMap<>();
for (String requirement : result) {
requirementsValues.put(requirement, requirement);
} tagsCb.setValueMap(requirementsValues);
} };
ApplicationImporterService.Util.getInstance().getApplicationImporterRequirements(callback);
tagsCb.setValue(""None"");
return tagsCb;
} }",1
34265,"class _ { final int createServerSocketChannel(InetAddress bindAddress, int initialPort, boolean bindAny) {
int portCount = networkConfig.getPortCount();
boolean portAutoIncrement = networkConfig.isPortAutoIncrement();
logger.finest(""inet reuseAddress:"" + networkConfig.isReuseAddress());
if (initialPort == 0) {
initialPort = networkConfig.getPort() ;
} if (initialPort == 0) {
logger.info(""No explicit port is given, system will pick up an ephemeral port."");
} int portTrialCount = initialPort > 0 && portAutoIncrement ? portCount : 1;
try {
return tryOpenServerSocketChannel(bindAddress, initialPort, portTrialCount, bindAny);
} catch (IOException e) {
String message = ""Cannot bind to a given address: "" + bindAddress + "". Hazelcast cannot start. "";
if (networkConfig.isPortAutoIncrement()) {
 message += ""Config-port: "" + networkConfig.getPort() + "", latest-port: "" + (initialPort + portTrialCount);
 } else {
message += ""Port ["" + initialPort + ""] is already in use and auto-increment is disabled."";
} throw new HazelcastException(message, e);
} } }","class _ { final int createServerSocketChannel(InetAddress bindAddress, int initialPort, boolean bindAny) {
int portCount = networkConfig.getPortCount();
boolean portAutoIncrement = networkConfig.isPortAutoIncrement();
logger.finest(""inet reuseAddress:"" + networkConfig.isReuseAddress());
if (initialPort == 0) {
initialPort = networkConfig.getPort() ;
} if (initialPort == 0) {
logger.info(""No explicit port is given, system will pick up an ephemeral port."");
} int portTrialCount = initialPort > 0 && portAutoIncrement ? portCount : 1;
try {
return tryOpenServerSocketChannel(bindAddress, initialPort, portTrialCount, bindAny);
} catch (IOException e) {
String message = ""Cannot bind to a given address: "" + bindAddress + "". Hazelcast cannot start. "";
if (networkConfig.isPortAutoIncrement()) {
message += ""Config-port: "" + networkConfig.getPort() + "", latest-port: "" + (initialPort + portTrialCount - 1);
} else {
message += ""Port ["" + initialPort + ""] is already in use and auto-increment is disabled."";
} throw new HazelcastException(message, e);
} } }",1
34269,"class _ { public void executeCommand() {
addAuditLogForPartialVMs();
super.executeCommand();
if (getParameters().isImagesExistOnTargetStorageDomain()) {
if (!getImages().isEmpty()) {
findAndSaveDiskCopies();
 for (DiskImage diskImage : getImages()) {
initQcowVersionForDisks(diskImage.getId());
}  } unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), null);
unregisteredDisksDao.removeUnregisteredDiskRelatedToVM(ovfEntityData.getEntityId(), null);
} setActionReturnValue(getVmTemplate().getId());
setSucceeded(true);
} }","class _ { public void executeCommand() {
addAuditLogForPartialVMs();
super.executeCommand();
if (getParameters().isImagesExistOnTargetStorageDomain()) {
if (!getImages().isEmpty()) {
findAndSaveDiskCopies();
getImages().stream().forEach(diskImage -> {
initQcowVersionForDisks(diskImage.getId());
});
} unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), null);
unregisteredDisksDao.removeUnregisteredDiskRelatedToVM(ovfEntityData.getEntityId(), null);
} setActionReturnValue(getVmTemplate().getId());
setSucceeded(true);
} }",1
34272,"class _ { protected void setErrorMessageUI(String message, boolean showNotificationButton) {
setLoginBoxesColorError();
username.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.icon_user_attnneg), null, null, null);
passwordOrPin.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.icon_lock_attnneg), null, null, null);
loginButton.setBackgroundColor(getResources().getColor(R.color.cc_attention_negative_bg));
loginButton.setTextColor(getResources().getColor(R.color.cc_attention_negative_text));
errorContainer.setVisibility(View.VISIBLE);
errorTextView.setText(message);
if(showNotificationButton) {
notificationButtonView.setVisibility(View.VISIBLE);
 }  } }","class _ { protected void setErrorMessageUI(String message, boolean showNotificationButton) {
setLoginBoxesColorError();
username.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.icon_user_attnneg), null, null, null);
passwordOrPin.setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(R.drawable.icon_lock_attnneg), null, null, null);
loginButton.setBackgroundColor(getResources().getColor(R.color.cc_attention_negative_bg));
loginButton.setTextColor(getResources().getColor(R.color.cc_attention_negative_text));
errorContainer.setVisibility(View.VISIBLE);
errorTextView.setText(message);
notificationButtonView.setVisibility(showNotificationButton ? View.VISIBLE : View.GONE);
} }",1
34294,"class _ { public void loadProductiveCollectionSheet(int centerId, CollectionSheetRequestPayload payload) {
checkViewAttached();
getMvpView().showProgressbar(true);
mSubscription.add(collectionDataManager.fetchProductiveCollectionSheet(centerId, payload) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(new Subscriber<CollectionSheetResponse>() {
@Override public void onCompleted() {
} @Override public void onError(Throwable e) {
getMvpView().showProgressbar(false);
try {
if (e instanceof HttpException) {
 String errorMessage = ((HttpException) e).response().errorBody()  .string();
getMvpView().showError(MFErrorParser.parseError(errorMessage) .getErrors().get(0).getDefaultUserMessage());
} } catch (Throwable throwable) {
RxJavaPlugins.getInstance().getErrorHandler().handleError(e);
} } @Override public void onNext(CollectionSheetResponse sheet) {
getMvpView().showProgressbar(false);
getMvpView().showProductive(sheet);
} }));
} }","class _ { public void loadProductiveCollectionSheet(int centerId, CollectionSheetRequestPayload payload) {
checkViewAttached();
getMvpView().showProgressbar(true);
mSubscription.add(collectionDataManager.fetchProductiveCollectionSheet(centerId, payload) .observeOn(AndroidSchedulers.mainThread()) .subscribeOn(Schedulers.io()) .subscribe(new Subscriber<CollectionSheetResponse>() {
@Override public void onCompleted() {
} @Override public void onError(Throwable e) {
getMvpView().showProgressbar(false);
getMvpView().showError(MFErrorParser.errorMessage(e));
} @Override public void onNext(CollectionSheetResponse collectionSheetResponse) {
getMvpView().showProgressbar(false);
getMvpView().showProductive(collectionSheetResponse);
} }));
} }",1
34310,"class _ { public ModelAndView saveAbout(@ProjectIdentifier @PathVariable(""ProjectId"") String projectId, @Validated @ModelAttribute(""aboutTextBean"") AboutText formBean, BindingResult result, ModelAndView model, Principal principal, @InjectProject IProject project) throws QuadrigaStorageException {
 model = new ModelAndView(""auth/editabout"");
 List<INetwork> networks = nwManager.getNetworksInProject(projectId, INetworkStatus.APPROVED);
model.addObject(""project"", project);
model.addObject(""networks"", networks);
if (result.hasErrors()) {
model.addObject(""aboutTextBean"", formBean);
} else {
aboutTextManager.saveAbout(projectId, formBean);
model.addObject(""show_success_alert"", true);
model.addObject(""success_alert_msg"", ""You successfully edited the about text"");
} return model;
} }","class _ { public ModelAndView saveAbout(@ProjectIdentifier @PathVariable(""ProjectId"") String projectId, @Validated @ModelAttribute(""aboutTextBean"") AboutText formBean, BindingResult result, ModelAndView model, Principal principal, @InjectProject IProject project) throws QuadrigaStorageException {
List<INetwork> networks = nwManager.getNetworksInProject(projectId, INetworkStatus.APPROVED);
model.addObject(""project"", project);
model.addObject(""networks"", networks);
if (result.hasErrors()) {
model.addObject(""aboutTextBean"", formBean);
} else {
aboutTextManager.saveAbout(projectId, formBean);
model.addObject(""show_success_alert"", true);
model.addObject(""success_alert_msg"", ""You successfully edited the about text"");
} return model;
} }",1
34312,"class _ { public void processBatch(MappedStatement ms, Statement stmt, Object parameter) {
final String[] keyProperties = ms.getKeyProperties();
if (keyProperties == null || keyProperties.length == 0) {
return;
}  try (final ResultSet rs = stmt.getGeneratedKeys()) {
 final Configuration configuration = ms.getConfiguration();
if (rs.getMetaData().getColumnCount() >= keyProperties.length) {
Object soleParam = getSoleParameter(parameter);
if (soleParam != null) {
assignKeysToParam(configuration, rs, keyProperties, soleParam);
} else {
assignKeysToOneOfParams(configuration, rs, keyProperties, (Map<?, ?>) parameter);
} } } catch (Exception e) {
throw new ExecutorException(""Error getting generated key or setting result to parameter object. Cause: "" + e, e);
} } }","class _ { public void processBatch(MappedStatement ms, Statement stmt, Object parameter) {
final String[] keyProperties = ms.getKeyProperties();
if (keyProperties == null || keyProperties.length == 0) {
return;
} try (ResultSet rs = stmt.getGeneratedKeys()) {
final Configuration configuration = ms.getConfiguration();
if (rs.getMetaData().getColumnCount() >= keyProperties.length) {
Object soleParam = getSoleParameter(parameter);
if (soleParam != null) {
assignKeysToParam(configuration, rs, keyProperties, soleParam);
} else {
assignKeysToOneOfParams(configuration, rs, keyProperties, (Map<?, ?>) parameter);
} } } catch (Exception e) {
throw new ExecutorException(""Error getting generated key or setting result to parameter object. Cause: "" + e, e);
} } }",1
34343,"class _ { public void startEditingHeaderCell(final int uiHeaderRowIndex) {
if (!EditableHeaderUtilities.hasEditableHeader(this)) {
return;
} if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) {
return;
} final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();
final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation();
 final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(rendererHelper.getColumnOffset(this) + this.getWidth() / 2);
 final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex);
final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex);
headerMetaData.edit(context);
} }","class _ { public void startEditingHeaderCell(final int uiHeaderRowIndex) {
if (!EditableHeaderUtilities.hasEditableHeader(this)) {
return;
} if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) {
return;
} final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper();
final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation();
final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2;
final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate);
final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex);
final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex);
headerMetaData.edit(context);
} }",1
34355,"class _ { private Map<String, Object> getConfigMap(String config) {
if (config == null) {
return null;
} String configStr = config;
 if (configStr.startsWith(""{"")) {
 configStr = configStr.substring(1, configStr.length());
} if (configStr.endsWith(""}"")) {
configStr = configStr.substring(0, configStr.length() - 1);
} Map<String, Object> map = new HashMap<>();
for (String part : configStr.split(""\\s*,\\s*"")) {
String[] subparts = part.split(""="", 2);
if (subparts.length == 2 && subparts[0] != null && subparts[1] != null) {
map.put(subparts[0].trim(), subparts[1].trim());
} } return map;
} }","class _ { private Map<String, Object> getConfigMap(String config) {
if (config == null) {
return null;
} String configStr = config;
if (configStr.startsWith(""{"") && configStr.endsWith(""}"")) {
configStr = configStr.substring(1, configStr.length() - 1);
} Map<String, Object> map = new HashMap<>();
for (String part : configStr.split(""\\s*,\\s*"")) {
String[] subparts = part.split(""="", 2);
if (subparts.length == 2 && subparts[0] != null && subparts[1] != null) {
map.put(subparts[0].trim(), subparts[1].trim());
} } return map;
} }",1
34363,"class _ { private AbstractTreeIterator combineDF(final AbstractTreeIterator minRef) throws CorruptObjectException {
AbstractTreeIterator treeMatch = null;
for (final AbstractTreeIterator t : trees) {
if (t.matches == minRef || t.eof()) continue;
for (;;) {
final int cmp = t.pathCompare(minRef, TREE_MODE);
if (cmp < 0) {
t.matchShift++;
t.next(1);
if (t.eof()) {
t.back(t.matchShift);
t.matchShift = 0;
break;
} } else if (cmp == 0) {
t.matches = minRef;
treeMatch = t;
break;
} else {
if (t.matchShift != 0) {
t.back(t.matchShift);
t.matchShift = 0;
} break;
} } } if (treeMatch != null) {
for (final AbstractTreeIterator t : trees) if (t.matches == minRef) t.matches = treeMatch;
 if (dfConflict == null && !isGitlink(minRef))  dfConflict = treeMatch;
return treeMatch;
} return minRef;
} }","class _ { private AbstractTreeIterator combineDF(final AbstractTreeIterator minRef) throws CorruptObjectException {
AbstractTreeIterator treeMatch = null;
for (final AbstractTreeIterator t : trees) {
if (t.matches == minRef || t.eof()) continue;
for (;;) {
final int cmp = t.pathCompare(minRef, TREE_MODE);
if (cmp < 0) {
t.matchShift++;
t.next(1);
if (t.eof()) {
t.back(t.matchShift);
t.matchShift = 0;
break;
} } else if (cmp == 0) {
t.matches = minRef;
treeMatch = t;
break;
} else {
if (t.matchShift != 0) {
t.back(t.matchShift);
t.matchShift = 0;
} break;
} } } if (treeMatch != null) {
for (final AbstractTreeIterator t : trees) if (t.matches == minRef) t.matches = treeMatch;
if (dfConflict == null && !isGitlink(minRef)) {
dfConflict = treeMatch;
} return treeMatch;
} return minRef;
} }",1
34367,"class _ { public int get(PageId pageId, int pageOffset, int bytesToRead, byte[] buffer, int offsetInBuffer) {
Preconditions.checkArgument(pageOffset <= mPageSize, ""Read exceeds page boundary: offset=%s size=%s"", pageOffset, mPageSize);
Preconditions.checkArgument(bytesToRead <= buffer.length - offsetInBuffer, ""buffer does not have enough space: bufferLength=%s offsetInBuffer=%s bytesToRead=%s"", buffer.length, offsetInBuffer, bytesToRead);
LOG.debug(""get({},pageOffset={}) enters"", pageId, pageOffset);
if (mState.get() == NOT_IN_USE) {
Metrics.GET_NOT_READY_ERRORS.inc();
Metrics.GET_ERRORS.inc();
 return 0;
 } boolean hasPage;
ReadWriteLock pageLock = getPageLock(pageId);
try (LockResource r = new LockResource(pageLock.readLock())) {
try (LockResource r2 = new LockResource(mMetaLock.readLock())) {
hasPage = mMetaStore.hasPage(pageId);
} if (!hasPage) {
LOG.debug(""get({},pageOffset={}) fails due to page not found"", pageId, pageOffset);
return 0;
} int bytesRead = getPage(pageId, pageOffset, bytesToRead, buffer, offsetInBuffer);
if (bytesRead <= 0) {
Metrics.GET_ERRORS.inc();
Metrics.GET_STORE_READ_ERRORS.inc();
try (LockResource r2 = new LockResource(mMetaLock.writeLock())) {
mMetaStore.removePage(pageId);
} catch (PageNotFoundException e) {
Metrics.CLEANUP_GET_ERRORS.inc();
} return -1;
} LOG.debug(""get({},pageOffset={}) exits"", pageId, pageOffset);
return bytesRead;
} } }","class _ { public int get(PageId pageId, int pageOffset, int bytesToRead, byte[] buffer, int offsetInBuffer) {
Preconditions.checkArgument(pageOffset <= mPageSize, ""Read exceeds page boundary: offset=%s size=%s"", pageOffset, mPageSize);
Preconditions.checkArgument(bytesToRead <= buffer.length - offsetInBuffer, ""buffer does not have enough space: bufferLength=%s offsetInBuffer=%s bytesToRead=%s"", buffer.length, offsetInBuffer, bytesToRead);
LOG.debug(""get({},pageOffset={}) enters"", pageId, pageOffset);
if (mState.get() == NOT_IN_USE) {
Metrics.GET_NOT_READY_ERRORS.inc();
Metrics.GET_ERRORS.inc();
return -1;
} boolean hasPage;
ReadWriteLock pageLock = getPageLock(pageId);
try (LockResource r = new LockResource(pageLock.readLock())) {
try (LockResource r2 = new LockResource(mMetaLock.readLock())) {
hasPage = mMetaStore.hasPage(pageId);
} if (!hasPage) {
LOG.debug(""get({},pageOffset={}) fails due to page not found"", pageId, pageOffset);
return 0;
} int bytesRead = getPage(pageId, pageOffset, bytesToRead, buffer, offsetInBuffer);
if (bytesRead <= 0) {
Metrics.GET_ERRORS.inc();
Metrics.GET_STORE_READ_ERRORS.inc();
try (LockResource r2 = new LockResource(mMetaLock.writeLock())) {
mMetaStore.removePage(pageId);
} catch (PageNotFoundException e) {
Metrics.CLEANUP_GET_ERRORS.inc();
} return -1;
} LOG.debug(""get({},pageOffset={}) exits"", pageId, pageOffset);
return bytesRead;
} } }",1
70193,"class _ { protected void finalize() {
try {
threadGroup.destroy();
 } catch (RuntimeException e) {
 log.warn(e, ""Leaked thread group"");
  } } }","class _ { protected void finalize() {
try {
threadGroup.destroy();
 } catch (RuntimeException e) {
log.warn(e, ""Leaked thread group '%s'"", threadGroup.getName());
 } } }",1
70194,"class _ { public String getRegionName() {
List<String> rg = getRegionNames();
 if (rg.size() == 0) {
rg.add(file.getName());
 } String ls = rg.get(0);
 if (ls.lastIndexOf('_') != -1) {
if (!ls.endsWith("".obf"") || !ls.matches("".*\\d+.*"")) {
return ls.substring(0, ls.lastIndexOf('_')).replace('_', ' ');
  } else if (ls.matches(""[a-zA-Z_-]+([0-9]+_*){3}[.a-z]+"")){
 String res = ls.substring(0, (ls.length() - 13));
 return res.substring(0, res.lastIndexOf('_')).replace('_', ' ');
 } } return ls;
 } }","class _ { public String getRegionName() {
List<String> rg = getRegionNames();
 if (rg.size() == 0) {
rg.add(file.getName());
 } String ls = rg.get(0);
 if (ls.lastIndexOf('_') != -1) {
if (ls.matches("".*([0-9]+_*){3}\\.obf"")) {
Pattern osmDiffDateEnding = Pattern.compile(""_([0-9]+_*){3}\\.obf"");
 Matcher m = osmDiffDateEnding.matcher(ls);
 if (m.find()) {
ls = ls.substring(0, m.start());
 } return ls.substring(0, ls.lastIndexOf('_')).replace('_', ' ');
 } else {
if (ls.contains(""."")) {
ls = ls.substring(0, ls.indexOf("".""));
 } if (ls.endsWith(""_2"")) {
ls = ls.substring(0, ls.length() - ""_2"".length());
 } return ls.substring(0, ls.lastIndexOf('_')).replace('_', ' ');
 } } return ls;
 } }",1
70195,"class _ { public boolean shouldRetryRequest(HttpCommand command, HttpResponse response) {
boolean retry = false;
 try {
switch (response.getStatusCode()) {
case 401: Multimap<String, String> headers = command.getCurrentRequest().getHeaders();
 if (headers != null && headers.containsKey(AuthHeaders.AUTH_USER) && headers.containsKey(AuthHeaders.AUTH_KEY) && !headers.containsKey(AuthHeaders.AUTH_TOKEN)) {
retry = false;
 } else {
closeClientButKeepContentStream(response);
 Integer count = retryCountMap.getIfPresent(command);
 if (count == null) {
logger.debug(""invalidating authentication token - first time for %s"", command);
 retryCountMap.put(command, 1);
 authenticationResponseCache.invalidateAll();
 retry = true;
 } else {
if (count + 1 >= NUM_RETRIES) {
logger.debug(""too many 401s - giving up after: %s for %s"", count, command);
 retry = false;
 } else {
logger.debug(""invalidating authentication token - retry %s for %s"", count, command);
 retryCountMap.put(command, count + 1);
 authenticationResponseCache.invalidateAll();
 Uninterruptibles.sleepUninterruptibly(5, TimeUnit.SECONDS);
 retry = true;
 } } } break;
 } return retry;
 } finally {
 closeClientButKeepContentStream(response);
  } } }","class _ { public boolean shouldRetryRequest(HttpCommand command, HttpResponse response) {
boolean retry = false;
 switch (response.getStatusCode()) {
case 401: Multimap<String, String> headers = command.getCurrentRequest().getHeaders();
 if (headers != null && headers.containsKey(AuthHeaders.AUTH_USER) && headers.containsKey(AuthHeaders.AUTH_KEY) && !headers.containsKey(AuthHeaders.AUTH_TOKEN)) {
retry = false;
 } else {
Integer count = retryCountMap.getIfPresent(command);
 if (count == null) {
logger.debug(""invalidating authentication token - first time for %s"", command);
 retryCountMap.put(command, 1);
 authenticationResponseCache.invalidateAll();
 retry = true;
 } else {
if (count + 1 >= NUM_RETRIES) {
logger.debug(""too many 401s - giving up after: %s for %s"", count, command);
 retry = false;
 } else {
logger.debug(""invalidating authentication token - retry %s for %s"", count, command);
 retryCountMap.put(command, count + 1);
 authenticationResponseCache.invalidateAll();
 Uninterruptibles.sleepUninterruptibly(5, TimeUnit.SECONDS);
 retry = true;
 } } } break;
 } return retry;
 } }",1
70198,"class _ { public void testShutdownWhileWaitingForReply() throws Exception {
ConnectionFactory mockConnectionFactory = mock(ConnectionFactory.class);
 Connection mockConnection = mock(Connection.class);
 Channel mockChannel = mock(Channel.class);
 given(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).willReturn(mockConnection);
 given(mockConnection.isOpen()).willReturn(true);
 given(mockConnection.createChannel()).willReturn(mockChannel);
 given(mockChannel.queueDeclare()).willReturn(new AMQImpl.Queue.DeclareOk(""foo"", 0, 0));
 final AtomicReference<ShutdownListener> listener = new AtomicReference<>();
 final CountDownLatch shutdownLatch = new CountDownLatch(1);
 willAnswer(invocation -> {
listener.set(invocation.getArgument(0));
 shutdownLatch.countDown();
 return null;
 }).given(mockChannel).addShutdownListener(any());
 SingleConnectionFactory connectionFactory = new SingleConnectionFactory(mockConnectionFactory);
 connectionFactory.setExecutor(mock(ExecutorService.class));
 RabbitTemplate template = new RabbitTemplate(connectionFactory);
 template.setReplyTimeout(60_000);
 Message input = new Message(""Hello, world!"".getBytes(), new MessageProperties());
  Executors.newSingleThreadExecutor().execute(() -> {
 try {
shutdownLatch.await(10, TimeUnit.SECONDS);
 } catch (InterruptedException e) {
Thread.currentThread().interrupt();
 } listener.get().shutdownCompleted(new ShutdownSignalException(true, false, null, null));
 });
 try {
template.doSendAndReceiveWithTemporary(""foo"", ""bar"", input, null);
 fail(""Expected exception"");
 } catch (AmqpException e) {
assertThat(e.getCause(), instanceOf(ShutdownSignalException.class));
 } } }","class _ { public void testShutdownWhileWaitingForReply() throws Exception {
ConnectionFactory mockConnectionFactory = mock(ConnectionFactory.class);
 Connection mockConnection = mock(Connection.class);
 Channel mockChannel = mock(Channel.class);
 given(mockConnectionFactory.newConnection(any(ExecutorService.class), anyString())).willReturn(mockConnection);
 given(mockConnection.isOpen()).willReturn(true);
 given(mockConnection.createChannel()).willReturn(mockChannel);
 given(mockChannel.queueDeclare()).willReturn(new AMQImpl.Queue.DeclareOk(""foo"", 0, 0));
 final AtomicReference<ShutdownListener> listener = new AtomicReference<>();
 final CountDownLatch shutdownLatch = new CountDownLatch(1);
 willAnswer(invocation -> {
listener.set(invocation.getArgument(0));
 shutdownLatch.countDown();
 return null;
 }).given(mockChannel).addShutdownListener(any());
 SingleConnectionFactory connectionFactory = new SingleConnectionFactory(mockConnectionFactory);
 connectionFactory.setExecutor(mock(ExecutorService.class));
 RabbitTemplate template = new RabbitTemplate(connectionFactory);
 template.setReplyTimeout(60_000);
 Message input = new Message(""Hello, world!"".getBytes(), new MessageProperties());
 ExecutorService exec = Executors.newSingleThreadExecutor();
 exec.execute(() -> {
try {
shutdownLatch.await(10, TimeUnit.SECONDS);
 } catch (InterruptedException e) {
Thread.currentThread().interrupt();
 } listener.get().shutdownCompleted(new ShutdownSignalException(true, false, null, null));
 });
 try {
template.doSendAndReceiveWithTemporary(""foo"", ""bar"", input, null);
 fail(""Expected exception"");
 } catch (AmqpException e) {
assertThat(e.getCause(), instanceOf(ShutdownSignalException.class));
 } exec.shutdownNow();
 } }",1
70199,"class _ { public void declarative() throws Exception {
 WorkflowJob p = r.jenkins.createProject(WorkflowJob.class, ""job with dir"");
  p.setDefinition(new CpsFlowDefinition(loadPipelineScript(""declarativePod.groovy""), true));
 WorkflowRun b = p.scheduleBuild2(0).waitForStart();
 assertNotNull(b);
 r.assertBuildStatusSuccess(r.waitForCompletion(b));
 r.assertLogContains(""Apache Maven 3.3.9"", b);
 r.assertLogContains(""INSIDE_CONTAINER_ENV_VAR = "" + CONTAINER_ENV_VAR_VALUE + ""\n"", b);
 } }","class _ { public void declarative() throws Exception {
WorkflowJob p = r.jenkins.createProject(WorkflowJob.class, ""declarative pipeline with podTemplate"");
 p.setDefinition(new CpsFlowDefinition(loadPipelineScript(""declarativePod.groovy""), true));
 WorkflowRun b = p.scheduleBuild2(0).waitForStart();
 assertNotNull(b);
 r.assertBuildStatusSuccess(r.waitForCompletion(b));
 r.assertLogContains(""Apache Maven 3.3.9"", b);
 r.assertLogContains(""INSIDE_CONTAINER_ENV_VAR = "" + CONTAINER_ENV_VAR_VALUE + ""\n"", b);
 } }",1
70200,"class _ { public void statusRedundancyWithExcludeRegionArgumentReturnsStatusForAllExceptThatRegion() {
createAndPopulateRegions();
 String command = new CommandStringBuilder(COMMAND_NAME) .addOption(EXCLUDE_REGION, ZERO_COPIES_REGION) .getCommandString();
 CommandResultAssert commandResult = gfsh.executeAndAssertThat(command);
 commandResult.statusIsSuccess() .hasNoSection(ZERO_REDUNDANCY_SECTION) .doesNotContainOutput(ZERO_COPIES_REGION);
 verifySummarySection(commandResult, 0, 1, 2);
  InfoResultModelAssert underRedundancy = commandResult.hasInfoSection(UNDER_REDUNDANCY_SECTION);
 underRedundancy.hasHeader().isEqualTo(REDUNDANCY_NOT_SATISFIED_FOR_REGIONS);
 underRedundancy.hasOutput().contains(UNSATISFIED_REGION);
 InfoResultModelAssert satisfiedRedundancy = commandResult.hasInfoSection(SATISFIED_REDUNDANCY_SECTION);
 satisfiedRedundancy.hasHeader().isEqualTo(REDUNDANCY_SATISFIED_FOR_REGIONS);
 satisfiedRedundancy.hasOutput().contains(SATISFIED_REGION, NO_CONFIGURED_REDUNDANCY_REGION);
  } }","class _ { public void statusRedundancyWithExcludeRegionArgumentReturnsStatusForAllExceptThatRegion() {
createAndPopulateRegions();
 String excludedRegion = ZERO_COPIES_REGION;
 String command = new CommandStringBuilder(STATUS_REDUNDANCY) .addOption(REDUNDANCY_EXCLUDE_REGION, excludedRegion) .getCommandString();
 CommandResultAssert commandResult = gfsh.executeAndAssertThat(command).statusIsSuccess() .doesNotContainOutput(excludedRegion);
 List<String> satisfiedRegions = Arrays.asList(SATISFIED_REGION, NO_CONFIGURED_REDUNDANCY_REGION);
 verifyGfshOutput(commandResult, new ArrayList<>(), Collections.singletonList(UNSATISFIED_REGION), satisfiedRegions);
 } }",1
70203,"class _ { public String[] getConfigInformation(int id) {
try {
try {
Class.forName(jdbcDriver);
 } catch (ClassNotFoundException e) {
e.printStackTrace();
 } Connection connection = DriverManager.getConnection(mysqlURL, username, password);
 String sql = ""SELECT teamName, description, datasetName, evaluator, id FROM configurations WHERE id = "" + id + "";
"";
 PreparedStatement insertStmt = connection.prepareStatement(sql);
 ResultSet configInfoList = insertStmt.executeQuery();
 configInfoList.next();
  String configInfo[] = new String[6];
  configInfo[0] = configInfoList.getString(1);
 configInfo[1] = configInfoList.getString(2);
 configInfo[2] = configInfoList.getString(3);
 configInfo[3] = ""task_variant_b"";
 configInfo[4] = configInfoList.getString(4);
 configInfo[5] = Integer.toString(configInfoList.getInt(5));
 connection.close();
 return configInfo;
 } catch (SQLException e) {
e.printStackTrace();
 return null;
 } } }","class _ { public models.Configuration getConfigInformation(int id) {
try {
try {
Class.forName(jdbcDriver);
 } catch (ClassNotFoundException e) {
e.printStackTrace();
 } Connection connection = DriverManager.getConnection(mysqlURL, username, password);
 String sql = ""SELECT teamName, description, datasetName, evaluator, id FROM configurations WHERE id = "" + id + "";
"";
 PreparedStatement insertStmt = connection.prepareStatement(sql);
 ResultSet configInfoList = insertStmt.executeQuery();
 configInfoList.next();
 models.Configuration config = new models.Configuration(configInfoList.getString(1), configInfoList.getString(2), configInfoList.getString(3), ""task_variant_b"", configInfoList.getString(4), Integer.toString(configInfoList.getInt(5)));
 connection.close();
 return config;
 } catch (SQLException e) {
e.printStackTrace();
 return null;
 } } }",1
70209,"class _ { private void forceUnlockForLeavingMembers(Set<Object> possibleOwners) {
clusteredLockManager.execute(() -> {
log.tracef(""LOCK[%s] Call force unlock for %s from %s "", getName(), possibleOwners, originator);
  viewChangeUnlockHappening.set(true);
  unlock(null, possibleOwners) .whenComplete((unlockResult, ex) -> {
log.tracef(""LOCK[%s] Force unlock call completed for %s from %s "", getName(), possibleOwners, originator);
 viewChangeUnlockHappening.set(false);
 if (ex == null) {
log.tracef(""LOCK[%s] Force unlock result %b for %s from %s "", getName(), unlockResult, possibleOwners, originator);
 } else {
log.errorf(ex, ""LOCK[%s] Unlock failed from node %s"", getName(), originator);
 } retryPendingUnlocks();
 retryPendingRequests();
 });
 } );
 } }","class _ { private void forceUnlockForLeavingMembers(Set<Object> possibleOwners) {
clusteredLockManager.execute(() -> {
log.tracef(""LOCK[%s] Call force unlock for %s from %s "", getName(), possibleOwners, originator);
 int viewChangeUnlockValue = viewChangeUnlockHappening.incrementAndGet();
 log.tracef(""LOCK[%s] viewChangeUnlockHappening value in %s "", getName(), viewChangeUnlockValue, originator);
 unlock(null, possibleOwners) .whenComplete((unlockResult, ex) -> {
log.tracef(""LOCK[%s] Force unlock call completed for %s from %s "", getName(), possibleOwners, originator);
 int viewChangeUnlockValueAfterUnlock = viewChangeUnlockHappening.decrementAndGet();
 log.tracef(""LOCK[%s] viewChangeUnlockHappening value in %s "", getName(), viewChangeUnlockValueAfterUnlock, originator);
 if (ex == null) {
log.tracef(""LOCK[%s] Force unlock result %b for %s from %s "", getName(), unlockResult, possibleOwners, originator);
 } else {
log.error(ex, log.unlockFailed(getName(), getOriginator()));
 } retryPendingRequests();
 });
 } );
 } }",1
70211,"class _ { public void testWidthHeaderColumnTo0() {
openVSM();
 setNewHeaderColumnWidth(0);
 SWTBotTree treeTable = createCrossTable();
 Display.getDefault().syncExec(new Runnable() {
@Override public void run() {
assertTrue(""Header column size should be greater than 0 to be  adapt to  column content."", treeTable.widget.getColumn(0).getWidth() > 0);
 } });
 } }","class _ { public void testWidthHeaderColumnTo0() {
openVSM();
 setNewHeaderColumnWidth(0);
 SWTBotTree treeTable = createCrossTable();
 Display.getDefault().syncExec(new Runnable() {
@Override public void run() {
assertTrue(""Header column size should be greater than 0 to be adapted to column content."", treeTable.widget.getColumn(0).getWidth() > 0);
 } });
 } }",1
70212,"class _ { public void setLicenses(LicenseConfiguration[] licenses) {
 this.licenses = licenses;
  } }","class _ { public void setLicenses(LicenseConfiguration[] licenses) throws IOException {
if (!ArrayUtils.isEmpty(licenses)) {
if (licenses.length > 1) {
throw new IOException(""PyPi doesn't support multiple licenses!"");
 } } this.licenses = licenses;
 } }",1
70215,"class _ { public LogicalPlanner(Session session, List<PlanOptimizer> planOptimizers, PlanSanityChecker planSanityChecker, PlanNodeIdAllocator idAllocator, Metadata metadata, SqlParser sqlParser, StatsCalculator statsCalculator, CostCalculator costCalculator) {
requireNonNull(session, ""session is null"");
 requireNonNull(planOptimizers, ""planOptimizers is null"");
 requireNonNull(planSanityChecker, ""planSanityChecker is null"");
 requireNonNull(idAllocator, ""idAllocator is null"");
 requireNonNull(metadata, ""metadata is null"");
 requireNonNull(sqlParser, ""sqlParser is null"");
  requireNonNull(statsCalculator, ""statsCalculator is null"");
  requireNonNull(costCalculator, ""costCalculator is null"");
 this.session = session;
 this.planOptimizers = planOptimizers;
 this.planSanityChecker = planSanityChecker;
 this.idAllocator = idAllocator;
 this.metadata = metadata;
 this.sqlParser = sqlParser;
 this.statisticsAggregationPlanner = new StatisticsAggregationPlanner(symbolAllocator, metadata);
 this.statsCalculator = statsCalculator;
 this.costCalculator = costCalculator;
 } }","class _ { public LogicalPlanner(Session session, List<PlanOptimizer> planOptimizers, PlanSanityChecker planSanityChecker, PlanNodeIdAllocator idAllocator, Metadata metadata, SqlParser sqlParser, StatsCalculator statsCalculator, CostCalculator costCalculator) {
this.session = requireNonNull(session, ""session is null"");
 this.planOptimizers = requireNonNull(planOptimizers, ""planOptimizers is null"");
 this.planSanityChecker = requireNonNull(planSanityChecker, ""planSanityChecker is null"");
 this.idAllocator = requireNonNull(idAllocator, ""idAllocator is null"");
 this.metadata = requireNonNull(metadata, ""metadata is null"");
 this.sqlParser = requireNonNull(sqlParser, ""sqlParser is null"");
 this.statisticsAggregationPlanner = new StatisticsAggregationPlanner(symbolAllocator, metadata);
 this.statsCalculator = requireNonNull(statsCalculator, ""statsCalculator is null"");
 this.costCalculator = requireNonNull(costCalculator, ""costCalculator is null"");
 } }",1
70220,"class _ {  default Set<EntityHit> getIntersectingEntities(Entity looker, double distance, Predicate<EntityHit> filter) {
 final Vector3d rotation = looker.getRotation();
 final Vector3d direction = Quaterniond.fromAxesAnglesDeg(rotation.getX(), -rotation.getY(), rotation.getZ()).getDirection();
 final Optional<EyeLocationProperty> data = looker.getProperty(EyeLocationProperty.class);
 final Vector3d start = data.map(EyeLocationProperty::getValue).orElse(looker.getLocation().getPosition());
 return getIntersectingEntities(start, direction, distance, filter);
 } }","class _ { default Set<EntityHit> getIntersectingEntities(Entity looker, double distance, Predicate<EntityHit> filter) {
checkNotNull(looker, ""looker"");
 final Vector3d rotation = looker.getRotation();
 final Vector3d direction = Quaterniond.fromAxesAnglesDeg(rotation.getX(), -rotation.getY(), rotation.getZ()).getDirection();
 final Optional<EyeLocationProperty> data = looker.getProperty(EyeLocationProperty.class);
 final Vector3d start = data.map(EyeLocationProperty::getValue).orElse(looker.getLocation().getPosition());
 return getIntersectingEntities(start, direction, distance, filter);
 } }",1
70221,"class _ { public void marshal(ITypeMarshalBuffer buffer) throws CoreException {
final short SECOND_LAST_FLAG= ITypeMarshalBuffer.LAST_FLAG / 2;
 final int kind= getKind().ordinal();
 final int shiftedKind= kind * ITypeMarshalBuffer.FIRST_FLAG;
 final int modifiers= getModifiers();
 short firstBytes = (short) (ITypeMarshalBuffer.BASIC_TYPE | shiftedKind);
 if (modifiers != 0) firstBytes |= ITypeMarshalBuffer.LAST_FLAG;
 if (getAssociatedNumericalValue() != null) firstBytes |= SECOND_LAST_FLAG;
 buffer.putShort(firstBytes);
 if (modifiers != 0) buffer.putByte((byte) modifiers);
  if (getAssociatedNumericalValue() != null)  buffer.putLong(getAssociatedNumericalValue());
 } }","class _ { public void marshal(ITypeMarshalBuffer buffer) throws CoreException {
final int kind= getKind().ordinal();
 final int shiftedKind= kind * ITypeMarshalBuffer.FIRST_FLAG;
 final int modifiers= getModifiers();
 short firstBytes = (short) (ITypeMarshalBuffer.BASIC_TYPE | shiftedKind);
 if (modifiers != 0) firstBytes |= ITypeMarshalBuffer.LAST_FLAG;
 if (fAssociatedValue != null) firstBytes |= ITypeMarshalBuffer.SECOND_LAST_FLAG;
 buffer.putShort(firstBytes);
 if (modifiers != 0) buffer.putByte((byte) modifiers);
 if (fAssociatedValue != null) buffer.putLong(getAssociatedNumericalValue());
 } }",1
70222,"class _ { protected void checkVdsActivateSucceeded(final GuideModel guideModel, final String searchStr) {
Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(searchStr, SearchType.VDS), new AsyncQuery(this, new INewAsyncCallback() {
@Override public void onSuccess(Object target, Object returnValue) {
 ArrayList<VDS> hosts = ((VdcQueryReturnValue) returnValue).getReturnValue();
  boolean succeeded = true;
 for (VDS host : hosts) {
if (host.getStatus() != VDSStatus.Up) {
succeeded = false;
 } } guideModel.getWindow().stopProgress();
 guideModel.cancel();
 if (succeeded) {
guideModel.postAction();
 } else {
errorPopupManager.show(ConstantsManager.getInstance().getConstants().hostActivationTimeOut());
 } } }));
 } }","class _ { protected void checkVdsActivateSucceeded(final GuideModel guideModel, final String searchStr) {
Frontend.getInstance().runQuery(VdcQueryType.Search, new SearchParameters(searchStr, SearchType.VDS), new AsyncQuery(this, new INewAsyncCallback() {
@Override public void onSuccess(Object target, Object returnValue) {
List<VDS> hosts = ((VdcQueryReturnValue) returnValue).getReturnValue();
 boolean succeeded = true;
 for (VDS host : hosts) {
if (host.getStatus() != VDSStatus.Up) {
succeeded = false;
 } } guideModel.getWindow().stopProgress();
 guideModel.cancel();
 if (succeeded) {
guideModel.postAction();
 } else {
errorPopupManager.show(ConstantsManager.getInstance().getConstants().hostActivationTimeOut());
 } } }));
 } }",1
70223,"class _ { public void updatePresentation(@NotNull NodePresentation presentation) {
final StringBuilder cssBuilder = new StringBuilder();
 final Optional<Marker> presentableTextMarker = getData().getMarker(PresentableTextMarker.ID);
 if (presentableTextMarker.isPresent() && getData() instanceof Container) {
presentation.setPresentableText( ((PresentableTextMarker) presentableTextMarker.get()).getPresentableText());
 } else {
presentation.setPresentableText(getData().getName());
 } if (resourceIsCut) {
cssBuilder.append(""opacity:0.5;
"");
 } else {
cssBuilder.append(""opacity:1;
"");
 } SVGResource icon = null;
 for (NodeIconProvider iconProvider : nodeIconProviders) {
icon = iconProvider.getIcon(getData());
 if (icon != null) {
break;
 } } if (icon != null) {
presentation.setPresentableIcon(icon);
 } else {
if (getData().getResourceType() == FOLDER) {
presentation.setPresentableIcon( getData().getName().startsWith(""."") ? nodesResources.hiddenSimpleFolder() : nodesResources.simpleFolder());
 } else if (getData().getResourceType() == PROJECT) {
 Log.info(getClass(), ((Project) getData()).isProblem());
  presentation.setPresentableIcon( ((Project) getData()).isProblem() ? nodesResources.notValidProjectFolder() : nodesResources.projectFolder());
 cssBuilder.append(""font-weight:bold;
"");
 } else if (getData().getResourceType() == FILE) {
presentation.setPresentableIcon(nodesResources.file());
 } } presentation.setPresentableTextCss(cssBuilder.toString());
 if (getData().isFile() && getData().asFile().getVcsStatus() != null) {
VcsStatus vcsStatus = getData().asFile().getVcsStatus();
 if (vcsStatus != NOT_MODIFIED) {
presentation.setPresentableTextCss(""color: "" + vcsStatus.getColor() + "";
"");
 } } } }","class _ { public void updatePresentation(@NotNull NodePresentation presentation) {
final StringBuilder cssBuilder = new StringBuilder();
 final Optional<Marker> presentableTextMarker = getData().getMarker(PresentableTextMarker.ID);
 if (presentableTextMarker.isPresent() && getData() instanceof Container) {
presentation.setPresentableText( ((PresentableTextMarker) presentableTextMarker.get()).getPresentableText());
 } else {
presentation.setPresentableText(getData().getName());
 } if (resourceIsCut) {
cssBuilder.append(""opacity:0.5;
"");
 } else {
cssBuilder.append(""opacity:1;
"");
 } SVGResource icon = null;
 for (NodeIconProvider iconProvider : nodeIconProviders) {
icon = iconProvider.getIcon(getData());
 if (icon != null) {
break;
 } } if (icon != null) {
presentation.setPresentableIcon(icon);
 } else {
if (getData().getResourceType() == FOLDER) {
presentation.setPresentableIcon( getData().getName().startsWith(""."") ? nodesResources.hiddenSimpleFolder() : nodesResources.simpleFolder());
 } else if (getData().getResourceType() == PROJECT) {
presentation.setPresentableIcon( ((Project) getData()).isProblem() ? nodesResources.notValidProjectFolder() : nodesResources.projectFolder());
 cssBuilder.append(""font-weight:bold;
"");
 } else if (getData().getResourceType() == FILE) {
presentation.setPresentableIcon(nodesResources.file());
 } } presentation.setPresentableTextCss(cssBuilder.toString());
 if (getData().isFile() && getData().asFile().getVcsStatus() != null) {
VcsStatus vcsStatus = getData().asFile().getVcsStatus();
 if (vcsStatus != NOT_MODIFIED) {
presentation.setPresentableTextCss(""color: "" + vcsStatus.getColor() + "";
"");
 } } } }",1
70231,"class _ { public static String escape(String text) {
String specials = ""&<>\'\"""";
 String[] replacements = new String[]{""&amp;
"", ""&lt;
"", ""&gt;
"",  ""&#39;
"", ""&quot;
""};
  StringBuilder sb = null;
 int low = 0;
 for (int i = 0;
 i < text.length();
 ++i) {
int s = specials.indexOf(text.charAt(i));
 if (s != -1) {
if (sb == null) {
sb = new StringBuilder();
 } sb.append(text.substring(low, i));
 sb.append(replacements[s]);
 low = i + 1;
 } } if (sb == null) {
return text;
 } sb.append(text.substring(low));
 return sb.toString();
 } }","class _ { public static String escape(String text) {
String specials = ""&<>\'\"""";
 String[] replacements = new String[]{""&amp;
"", ""&lt;
"", ""&gt;
"", ""&apos;
"", ""&quot;
""};
 StringBuilder sb = null;
 int low = 0;
 for (int i = 0;
 i < text.length();
 ++i) {
int s = specials.indexOf(text.charAt(i));
 if (s != -1) {
if (sb == null) {
sb = new StringBuilder();
 } sb.append(text.substring(low, i));
 sb.append(replacements[s]);
 low = i + 1;
 } } if (sb == null) {
return text;
 } sb.append(text.substring(low));
 return sb.toString();
 } }",1
70232,"class _ { private Set<String> filterUntrackedFolders(Set<String> untracked, Set<String> untrackedFolders) {
Set<String> filtered = new TreeSet<String>();
 fileLoop: for (String file : untracked) {
for (String folder : untrackedFolders) {
if (file.startsWith(folder)) {
 continue fileLoop;
  } } filtered.add(file);
 } return filtered;
 } }","class _ { private Set<String> filterUntrackedFolders(Set<String> untracked, Set<String> untrackedFolders) {
Set<String> filtered = new TreeSet<String>(untracked);
 for (String file : untracked) for (String folder : untrackedFolders) if (file.startsWith(folder)) {
filtered.remove(file);
 break;
 } return filtered;
 } }",1
70234,"class _ { public void valueOutOfUpperRange() {
initConfiguredRange();
  Set<ConstraintViolation<ConfiguredRangeContainer>> validate =  validate(new ConfiguredRangeContainer(TEST_OUT_OF_UPPER_RANGE));
 Assert.assertTrue(validate.size() > 0);
 } }","class _ { public void valueOutOfUpperRange() {
initConfiguredRange();
 validateAndAssertResult(new ConfiguredRangeContainer(TEST_OUT_OF_UPPER_RANGE), false);
 } }",1
70235,"class _ { public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration maxLockRenewalDuration) {
if (isDisposed.get()) {
throw logger.logThrowableAsError(new IllegalStateException(  String.format(INVALID_OPERATION_DISPOSED_RECEIVER, ""getAutoRenewSessionLock"")));
  } else if (!receiverOptions.isSessionReceiver()) {
throw logger.logThrowableAsError(new IllegalStateException( ""Cannot renew session lock on a non-session receiver.""));
 } else if (maxLockRenewalDuration == null) {
throw logger.logThrowableAsError(new NullPointerException(""'maxLockRenewalDuration' cannot be null.""));
 } else if (maxLockRenewalDuration.isNegative()) {
throw logger.logThrowableAsError(new IllegalArgumentException( ""'maxLockRenewalDuration' cannot be negative.""));
 } return new LockRenewalOperation(sessionId, maxLockRenewalDuration, true, this::renewSessionLock);
 } }","class _ { public LockRenewalOperation getAutoRenewSessionLock(String sessionId, Duration maxLockRenewalDuration) {
if (isDisposed.get()) {
throw logger.logExceptionAsError(new IllegalStateException( String.format(INVALID_OPERATION_DISPOSED_RECEIVER, ""getAutoRenewSessionLock"")));
 } else if (!receiverOptions.isSessionReceiver()) {
throw logger.logExceptionAsError(new IllegalStateException( ""Cannot renew session lock on a non-session receiver.""));
 } else if (maxLockRenewalDuration == null) {
throw logger.logExceptionAsError(new NullPointerException(""'maxLockRenewalDuration' cannot be null.""));
 } else if (maxLockRenewalDuration.isNegative()) {
throw logger.logExceptionAsError(new IllegalArgumentException( ""'maxLockRenewalDuration' cannot be negative.""));
 } else if (Objects.isNull(sessionId)) {
throw logger.logExceptionAsError(new NullPointerException(""'sessionId' cannot be null.""));
 } else if (sessionId.isEmpty()) {
throw logger.logExceptionAsError(new IllegalArgumentException(""'sessionId' cannot be empty.""));
 } final LockRenewalOperation operation = new LockRenewalOperation(sessionId, maxLockRenewalDuration, true, this::renewSessionLock);
 renewalContainer.addOrUpdate(sessionId, Instant.now().plus(maxLockRenewalDuration), operation);
 return operation;
 } }",1
70238,"class _ { private String toJSONString() {
JSONStringer js = new JSONStringer();
 try {
js.object();
 js.key(JSON_TOKENCOUNT_KEY).value(m_tokenCount);
 js.key(JSON_TOKENPARTITION_KEY).object();
 for (Map.Entry<Integer, Integer> entry : m_tokensMap.get().entrySet()) {
js.key(entry.getKey().toString()).value(entry.getValue());
 } js.endObject().endObject();
  }catch (JSONException e) {
 throw new RuntimeException(""Failed to serialized Hashinator Configuration to JSON."", e);
 } return js.toString();
 } }","class _ { private String toJSONString() {
JSONStringer js = new JSONStringer();
 try {
js.object();
 for (Map.Entry<Integer, Integer> entry : m_tokensMap.get().entrySet()) {
js.key(entry.getKey().toString()).value(entry.getValue());
 } js.endObject();
 } catch (JSONException e) {
throw new RuntimeException(""Failed to serialize Hashinator Configuration to JSON."", e);
 } return js.toString();
 } }",1
70240,"class _ { public TrackingToken createTokenAt(Instant dateTime) {
return events.values() .stream() .filter(event -> event.getTimestamp().equals(dateTime) || event.getTimestamp().isAfter(dateTime)) .min(Comparator.comparingLong(e -> ((GlobalSequenceTrackingToken) e.trackingToken()) .getGlobalIndex())) .map(TrackedEventMessage::trackingToken) .map(tt -> (GlobalSequenceTrackingToken) tt) .map(tt -> new GlobalSequenceTrackingToken(tt.getGlobalIndex() - 1)) .map(tt -> (TrackingToken) tt)  .orElse(createHeadToken());
  } }","class _ { public TrackingToken createTokenAt(Instant dateTime) {
return events.values() .stream() .filter(event -> event.getTimestamp().equals(dateTime) || event.getTimestamp().isAfter(dateTime)) .min(Comparator.comparingLong(e -> ((GlobalSequenceTrackingToken) e.trackingToken()) .getGlobalIndex())) .map(TrackedEventMessage::trackingToken) .map(tt -> (GlobalSequenceTrackingToken) tt) .map(tt -> new GlobalSequenceTrackingToken(tt.getGlobalIndex() - 1)) .map(tt -> (TrackingToken) tt) .orElseGet(this::createHeadToken);
 } }",1
70242,"class _ { public Address read(Long id) {
 LOG.debug(""AddressDAO.read() - Begin"");
  if (id == null) {
LOG.info(""-- id Parameter is required for Address Query --"");
 LOG.debug(""AddressDAO.read() - End"");
 return null;
 } Address foundRecord = super.read(id, Address.class);
 LOG.debug(""AddressDAO.read() - End"");
 return foundRecord;
 } }","class _ { public Address read(Long id) {
LOG.trace(""AddressDAO.read() - Begin"");
 if (id == null) {
LOG.trace(""-- id Parameter is required for Address Query --"");
 LOG.trace(""AddressDAO.read() - End"");
 return null;
 } Address foundRecord = super.read(id, Address.class);
 LOG.trace(""AddressDAO.read() - End"");
 return foundRecord;
 } }",1
70244,"class _ { public void shouldSubstituteHexValuesInReplacementString() {
String replacement = ""abc\\x01\\xaadef"";
  ReplacerParamRule nonAsciiRegexRule =  new ReplacerParamRule( """", REQ_HEADER_STR, ""anyMatchString"", true, replacement, null, true);
 assertThat( nonAsciiRegexRule.getEscapedReplacement(), equalTo(new String(new byte[] {'a', 'b', 'c', 1, (byte) 170, 'd', 'e', 'f'})));
 } }","class _ { public void shouldSubstituteHexValuesInReplacementString() {
String replacement = ""abc\\x01\\xaadef"";
 ReplacerParamRule hexValueRegexRule = new ReplacerParamRule( """", REQ_HEADER_STR, ""anyMatchString"", true, replacement, null, true);
 assertThat( hexValueRegexRule.getEscapedReplacement(), equalTo( new String( new byte[] {'a', 'b', 'c', 1, (byte) 170, 'd', 'e', 'f'}, StandardCharsets.US_ASCII)));
 } }",1
70246,"class _ { public boolean isSupportedArrayComponentType(Class<?> componentType) {
 if (boolean.class == componentType) {
 return true;
 } if (short.class == componentType) {
return true;
 } if (int.class == componentType) {
return true;
 } if (long.class == componentType) {
return true;
 } if (double.class == componentType) {
return true;
 } return false;
 } }","class _ { public boolean isSupportedArrayComponentType(Class<?> componentType) {
return boolean.class == componentType || short.class == componentType || int.class == componentType || long.class == componentType || double.class == componentType;
 } }",1
70247,"class _ { public String getDefaultValue4Build() {
 if (isTrim() && defaultValue != null) {
 return defaultValue.trim();
 } else {
return defaultValue;
 } } }","class _ { public String getDefaultValue4Build() {
if (isTrim()) {
return Util.fixNull(defaultValue).trim();
 } return defaultValue;
 } }",1
70249,"class _ { public void visit(NodeTraversal traversal, Node node, Node parent) {
 Preconditions.checkNotNull(globalNames != null, ""Cannot call visit() before process()"");
  if (isPolymerCall(node)) {
if (polymerElementExterns != null) {
rewritePolymer1ClassDefinition(node, parent, traversal);
 } else if (!warnedPolymer1ExternsMissing) {
compiler.report(JSError.make(polymerElementExterns, POLYMER_MISSING_EXTERNS));
 warnedPolymer1ExternsMissing = true;
 } } else if (isPolymerClass(node)) {
rewritePolymer2ClassDefinition(node, parent, traversal);
 } } }","class _ { public void visit(NodeTraversal traversal, Node node, Node parent) {
Preconditions.checkNotNull(globalNames, ""Cannot call visit() before process()"");
 if (PolymerPassStaticUtils.isPolymerCall(node)) {
if (polymerElementExterns != null) {
rewritePolymer1ClassDefinition(node, parent, traversal);
 } else if (!warnedPolymer1ExternsMissing) {
compiler.report(JSError.make(polymerElementExterns, POLYMER_MISSING_EXTERNS));
 warnedPolymer1ExternsMissing = true;
 } } else if (PolymerPassStaticUtils.isPolymerClass(node)) {
rewritePolymer2ClassDefinition(node, parent, traversal);
 } } }",1
70250,"class _ { protected void addProvider(Provider<E> provider) {
if (!elementMap.containsKey(provider)) {
Collection<E> elementsOfProvider = provider.getAll();
 Collection<E> elements = new CopyOnWriteArraySet<E>();
 provider.addProviderChangeListener(this);
 elementMap.put(provider, elements);
 for (E element : elementsOfProvider) {
try {
K uid = element.getUID();
 if (uid != null && get(uid) != null) {
 logger.warn(String.format(  ""%s with Key \""%s\"" already exists! Failed to add a second with the same UID!"", element.getClass().getName(), uid));
 continue;
 } onAddElement(element);
 elements.add(element);
 notifyListenersAboutAddedElement(element);
 } catch (Exception ex) {
logger.warn(""Could not add element: "" + ex.getMessage(), ex);
 } } logger.debug(""Provider '{}' has been added."", provider.getClass().getName());
 } } }","class _ { protected void addProvider(Provider<E> provider) {
if (!elementMap.containsKey(provider)) {
Collection<E> elementsOfProvider = provider.getAll();
 Collection<E> elements = new CopyOnWriteArraySet<E>();
 provider.addProviderChangeListener(this);
 elementMap.put(provider, elements);
 for (E element : elementsOfProvider) {
try {
K uid = element.getUID();
 if (uid != null && get(uid) != null) {
logger.warn(""{} with key'{}' already exists! Failed to add a second with the same UID!"", element.getClass().getName(), uid);
 continue;
 } onAddElement(element);
 elements.add(element);
 notifyListenersAboutAddedElement(element);
 } catch (Exception ex) {
logger.warn(""Could not add element: {}"", ex.getMessage(), ex);
 } } logger.debug(""Provider '{}' has been added."", provider.getClass().getName());
 } } }",1
70254,"class _ { public static <T> Predicate<Location> idEqualTo(final T val) {
return new Predicate<Location>() {
@Override  public boolean apply(@Nullable Location input) {
 return Objects.equal(input.getId(), val);
 } };
 } }","class _ { public static <T> Predicate<Location> idEqualTo(final T val) {
return new Predicate<Location>() {
@Override public boolean apply(@Nullable Location input) {
return (input != null) && Objects.equal(input.getId(), val);
 } };
 } }",1
70257,"class _ { public static String removeTimezone(String timeWithTimezone) throws CoreException {
Matcher mb = PATTERN_TIME.matcher(timeWithTimezone);
 if (mb.find()) {
return mb.group();
 } throw new CoreException(new Status(IStatus.ERROR, BugzillaCorePlugin.ID_PLUGIN, timeWithTimezone  + "" is not a valide time""));
  } }","class _ { public static String removeTimezone(String timeWithTimezone) throws CoreException {
Matcher matcher = TIME_STAMP_PATTERN.matcher(timeWithTimezone);
 if (matcher.find()) {
return matcher.group();
 } throw new CoreException(new Status(IStatus.ERROR, BugzillaCorePlugin.ID_PLUGIN, NLS.bind( ""{0} is not a valid time"", timeWithTimezone)));
 } }",1
70258,"class _ { protected Loader<CompletedTask> createLoader(int id, Bundle bundle) {
if( id == LOADER_PERSONA ) {
startLoadingDialog();
 return new Bf3Loader(getContext(), UriFactory.getProfilePersonasUri(mProfileData.getId()));
 } else if( id == LOADER_STATS ) {
startLoadingDialog();
 return new Bf3Loader(getContext(), UriFactory.getPersonaOverviewUri(mSelectedPersona, mSelectedPlatformId));
 }  return null;
  } }","class _ { protected Loader<CompletedTask> createLoader(int id, Bundle bundle) {
if( id == LOADER_PERSONA ) {
startLoadingDialog();
 return new Bf3Loader(getContext(), UriFactory.getProfilePersonasUri(mProfileData.getId()));
 } else {
startLoadingDialog();
 return new Bf3Loader(getContext(), UriFactory.getPersonaOverviewUri(mSelectedPersona, mSelectedPlatformId));
 } } }",1
70260,"class _ { public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext context) {
VXQueryOptimizationContext vxqueryContext = (VXQueryOptimizationContext) context;
 String[] args = getFunctionalArguments(opRef, VXQueryCommons.collectionFunctions);
 VXQueryMetadataProvider metadata = (VXQueryMetadataProvider) context.getMetadataProvider();
 if (args != null) {
String collectionName = args[0];
 int collectionId = vxqueryContext.newCollectionId();
 String collectionTempName = collectionName;
 if (collectionName.contains(""|"")) {
 collectionTempName = collectionName.substring(0, collectionName.indexOf(""|""));
  } if (metadata.indexExists(collectionTempName)) {
VXQueryIndexingDataSource ids = VXQueryIndexingDataSource.create(collectionId, collectionName, SequenceType.create(AnyItemType.INSTANCE, Quantifier.QUANT_STAR), functionCall.getFunctionIdentifier().getName());
 if (ids != null) {
ids.setTotalDataSources(vxqueryContext.getTotalDataSources());
 return setDataSourceScan(ids, opRef);
 } } VXQueryCollectionDataSource ds = VXQueryCollectionDataSource.create(collectionId, collectionName, SequenceType.create(AnyItemType.INSTANCE, Quantifier.QUANT_STAR));
 if (ds != null) {
ds.setTotalDataSources(vxqueryContext.getTotalDataSources());
 if (args.length == 2) {
ds.setTotalDataSources(vxqueryContext.getTotalDataSources());
 ds.setTag(args[1]);
 } return setDataSourceScan(ds, opRef);
 } } return false;
 } }","class _ { public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext context) {
VXQueryOptimizationContext vxqueryContext = (VXQueryOptimizationContext) context;
 String[] args = getFunctionalArguments(opRef, VXQueryCommons.collectionFunctions);
 VXQueryMetadataProvider metadata = (VXQueryMetadataProvider) context.getMetadataProvider();
 if (args != null) {
String collectionName = args[0];
 int collectionId = vxqueryContext.newCollectionId();
 ArrayList<String> collectionTempName = new ArrayList<String>();
 collectionTempName.add(collectionName);
 if (collectionName.contains(""|"")) {
collectionTempName.remove(0);
 int index = collectionName.indexOf(""|"");
 int start = 0;
 while (index >= 0) {
collectionTempName.add(collectionName.substring(start, index));
 start = index + 1;
 index = collectionName.indexOf(""|"", index + 1);
 if (index == -1) {
collectionTempName.add(collectionName.substring(start));
 } } } if (metadata.hasIndex(collectionTempName)) {
VXQueryIndexingDataSource ids = VXQueryIndexingDataSource.create(collectionId, collectionName, SequenceType.create(AnyItemType.INSTANCE, Quantifier.QUANT_STAR), functionCall.getFunctionIdentifier().getName());
 if (ids != null) {
ids.setTotalDataSources(vxqueryContext.getTotalDataSources());
 return setDataSourceScan(ids, opRef);
 } } VXQueryCollectionDataSource ds = VXQueryCollectionDataSource.create(collectionId, collectionName, SequenceType.create(AnyItemType.INSTANCE, Quantifier.QUANT_STAR));
 if (ds != null) {
ds.setTotalDataSources(vxqueryContext.getTotalDataSources());
 if (args.length == 2) {
ds.setTotalDataSources(vxqueryContext.getTotalDataSources());
 ds.setTag(args[1]);
 } return setDataSourceScan(ds, opRef);
 } } return false;
 } }",1
70263,"class _ { public void eval( @Nonnull final ReadableTable tb, final int rowIdx, @Nullable final WritableColumn count, @Nonnull final WritableColumn result, @Nullable final ReadableTable state) throws InvocationTargetException, DbException, IOException {
 Preconditions.checkArgument(  evaluator != null, ""Call compile first or copy the data if it is the same in the input."");
 Preconditions.checkArgument( getExpression().isMultivalued() != (count == null), ""count must be null for a single-valued expression and non-null for a multivalued expression."");
 try {
evaluator.evaluate(tb, rowIdx, count, result, state);
 } catch (Exception e) {
LOGGER.error(getJavaExpressionWithAppend(), e);
 throw e;
 } } }","class _ { public void eval( @Nonnull final ReadableTable tb, final int rowIdx, @Nullable final WritableColumn count, @Nonnull final WritableColumn result, @Nullable final ReadableTable state) throws InvocationTargetException, DbException {
Preconditions.checkArgument( evaluator != null, ""Call compile first or copy the data if it is the same in the input."");
 Preconditions.checkArgument( getExpression().isMultiValued() != (count == null), ""count must be null for a single-valued expression and non-null for a multivalued expression."");
 try {
evaluator.evaluate(tb, rowIdx, count, result, state);
 } catch (Exception e) {
LOGGER.error(getJavaExpressionWithAppend(), e);
 throw e;
 } } }",1
70265,"class _ { public void actionPerformed(AnActionEvent e) {
 LOGGER.info(""Performing AddFileToTfIgnoreAction for "" + myServerFilePath);
  Workspace partialWorkspace = CommandUtils.getPartialWorkspace(myProject);
 String filePath = ObjectUtils.assertNotNull( TfsFileUtil.translateServerItemToLocalItem(partialWorkspace.getMappings(), myServerFilePath, false));
 File localFile = new File(filePath);
 LOGGER.info(""Local file path: "" + localFile.getAbsolutePath());
 File tfIgnore = TfIgnoreUtil.findNearestOrRootTfIgnore(partialWorkspace.getMappings(), localFile);
 LOGGER.info("".tfignore location: "" + (tfIgnore == null ? ""null"" : tfIgnore.getAbsolutePath()));
 if (tfIgnore != null) {
CommandProcessor.getInstance().executeCommand( myProject, () -> ApplicationManager.getApplication().runWriteAction(() -> {
try {
TfIgnoreUtil.addToTfIgnore(this, tfIgnore, localFile);
 } catch (IOException ex) {
LOGGER.error(ex);
 } }), null, null);
 RefreshAction.doRefresh(myProject);
 } } }","class _ { public void actionPerformed(AnActionEvent e) {
ourLogger.info(""Performing AddFileToTfIgnoreAction for "" + myServerFilePath);
 Workspace partialWorkspace = CommandUtils.getPartialWorkspace(myProject);
 String filePath = ObjectUtils.assertNotNull( TfsFileUtil.translateServerItemToLocalItem(partialWorkspace.getMappings(), myServerFilePath, false));
 File localFile = new File(filePath);
 ourLogger.info(""Local file path: "" + localFile.getAbsolutePath());
 File tfIgnore = TfIgnoreUtil.findNearestOrRootTfIgnore(partialWorkspace.getMappings(), localFile);
 ourLogger.info("".tfignore location: "" + (tfIgnore == null ? ""null"" : tfIgnore.getAbsolutePath()));
 if (tfIgnore != null) {
CommandProcessor.getInstance().executeCommand( myProject, () -> ApplicationManager.getApplication().runWriteAction(() -> {
try {
TfIgnoreUtil.addToTfIgnore(this, tfIgnore, localFile);
 } catch (IOException ex) {
ourLogger.error(ex);
 } }), null, null);
 RefreshAction.doRefresh(myProject);
 } } }",1
70269,"class _ { public <T> T makeRequest(Invocation<T> invocation, boolean countForTx) throws OperationLogic.RequestException {
if (recording()) {
 requests = stats.requestSet();
  } if (useTransactions && txRemainingOperations <= 0) {
try {
ongoingTx = stage.transactional.getTransaction();
 logic.transactionStarted();
 Request beginRequest = startTransaction();
 if (requests != null && beginRequest != null) {
requests.add(beginRequest);
 } txRemainingOperations = stage.transactionSize;
 } catch (TransactionException e) {
throw new OperationLogic.RequestException(e);
 } } T result = null;
 Exception exception = null;
 Request request = nextRequest();
 Operation operation = isUseTransactions() ? invocation.txOperation() : invocation.operation();
 try {
result = invocation.invoke();
 succeeded(request, operation);
 Blackhole.consume(result);
 if (countForTx) {
txRemainingOperations--;
 } } catch (Exception e) {
failed(request, operation);
 log.warn(""Error in request"", e);
 txRemainingOperations = 0;
 exception = e;
 } endTransactionAndRegisterStats(useTransactions && txRemainingOperations <= 0, request);
 if (exception != null) {
throw new OperationLogic.RequestException(exception);
 } return result;
 } }","class _ { public <T> T makeRequest(Invocation<T> invocation, boolean countForTx) throws OperationLogic.RequestException {
if (useTransactions && txRemainingOperations <= 0) {
try {
ongoingTx = stage.transactional.getTransaction();
 logic.transactionStarted();
 if (recording()) {
requests = stats.requestSet();
 } Request beginRequest = startTransaction();
 if (requests != null && beginRequest != null) {
requests.add(beginRequest);
 } txRemainingOperations = stage.transactionSize;
 } catch (TransactionException e) {
throw new OperationLogic.RequestException(e);
 } } T result = null;
 Exception exception = null;
 Request request = nextRequest();
 try {
result = invocation.invoke();
 succeeded(request, invocation.operation());
 Blackhole.consume(result);
 if (countForTx) {
txRemainingOperations--;
 } } catch (Exception e) {
failed(request, invocation.operation());
 log.warn(""Error in request"", e);
 txRemainingOperations = 0;
 exception = e;
 } if (requests != null && request != null && recording()) {
requests.add(request);
 } if (useTransactions && txRemainingOperations <= 0) {
endTransactionAndRegisterStats(stage.isSingleTxType() ? invocation.txOperation() : null);
 } if (exception != null) {
throw new OperationLogic.RequestException(exception);
 } return result;
 } }",1
70271,"class _ { public OuiaComponentTypeAttribute ouiaComponentType() {
 return new OuiaComponentTypeAttribute(""qe-dmn-grid-context-menu-item"");
  } }","class _ { public OuiaComponentTypeAttribute ouiaComponentType() {
return new OuiaComponentTypeAttribute(""dmn-grid-context-menu-item"");
 } }",1
70272,"class _ { public void testFindProcessInstanceWithParentIdAndProcessNameEqualsToFilter() throws Exception {
Map<String, Object> parameters = new HashMap<>();
 Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);
 Assertions.assertThat(processInstanceId).isNotNull();
 HashMap<ProcessInstanceField, Comparable<?>> compareList = new HashMap<>();
 compareList.put(ProcessInstanceField.PARENTPROCESSINSTANCEID, -1);
 compareList.put(ProcessInstanceField.PROCESSNAME, PROCESS_NAME_EVALUATION);
  testFindProcessInstanceWithQueryFilter(createQueryFilterEqualsTo(ProcessInstanceField.PARENTPROCESSINSTANCEID, -1), processInstanceId);
  } }","class _ { public void testFindProcessInstanceWithParentIdAndProcessNameEqualsToFilter() throws Exception {
Map<String, Object> parameters = new HashMap<>();
 Long processInstanceId = processClient.startProcess(CONTAINER_ID, PROCESS_ID_EVALUATION, parameters);
 Assertions.assertThat(processInstanceId).isNotNull();
 HashMap<ProcessInstanceField, Comparable<?>> compareList = new HashMap<>();
 compareList.put(ProcessInstanceField.PARENTPROCESSINSTANCEID, -1);
 compareList.put(ProcessInstanceField.PROCESSNAME, PROCESS_NAME_EVALUATION);
 testFindProcessInstanceWithQueryFilter(createQueryFilterAndEqualsTo(compareList), processInstanceId);
 } }",1
70273,"class _ { void set(CommentLinkProcessor commentLinkProcessor, ChangeInfo change, String revision) {
RevisionInfo revInfo = change.revision(revision);
 CommitInfo commit = revInfo.commit();
 String sub = commit.subject();
 String msg = commit.message();
 if (msg.startsWith(sub)) {
msg = msg.substring(sub.length());
 if (msg.length() > 0 && msg.charAt(0) == '\n') {
msg = msg.substring(1);
 } }  commitName.setText(""Commit-Id: "" +  revision);
 commitName.setPreviewText(revision);
 idText.setText(""Change-Id: "" + change.change_id());
 idText.setPreviewText(change.change_id());
 formatLink(commit.author(), authorNameEmail, authorDate, change.status());
 formatLink(commit.committer(), committerNameEmail, committerDate, change.status());
 text.setHTML(commentLinkProcessor.apply( new SafeHtmlBuilder().append(msg).linkify()));
 GitwebLink gw = Gerrit.getGitwebLink();
 if (gw != null && gw.canLink(revInfo)) {
browserLink.setInnerText(gw.getLinkName());
 browserLink.setHref(gw.toRevision(change.project(), revision));
 } else {
UIObject.setVisible(browserLink, false);
 } } }","class _ { void set(CommentLinkProcessor commentLinkProcessor, ChangeInfo change, String revision) {
RevisionInfo revInfo = change.revision(revision);
 CommitInfo commit = revInfo.commit();
 String sub = commit.subject();
 String msg = commit.message();
 if (msg.startsWith(sub)) {
msg = msg.substring(sub.length());
 if (msg.length() > 0 && msg.charAt(0) == '\n') {
msg = msg.substring(1);
 } } commitName.setText(revision);
 commitName.setPreviewText(revision);
 idText.setText(""Change-Id: "" + change.change_id());
 idText.setPreviewText(change.change_id());
 formatLink(commit.author(), authorNameEmail, authorDate, change.status());
 formatLink(commit.committer(), committerNameEmail, committerDate, change.status());
 text.setHTML(commentLinkProcessor.apply( new SafeHtmlBuilder().append(msg).linkify()));
 GitwebLink gw = Gerrit.getGitwebLink();
 if (gw != null && gw.canLink(revInfo)) {
browserLink.setInnerText(gw.getLinkName());
 browserLink.setHref(gw.toRevision(change.project(), revision));
 } else {
UIObject.setVisible(browserLink, false);
 } } }",1
70275,"class _ { protected void runJob() {
JNodeCache nodeCache = cache.getNodeCache();
 final TextSearchIndex index = new TextSearchIndex(nodeCache);
 final CodeUsageInfo usageInfo = new CodeUsageInfo(nodeCache);
 cache.setTextIndex(index);
 cache.setUsageInfo(usageInfo);
 final boolean alwaysIndex = !wrapper.getSettings().isSkipClassIndexingIfLowMemory();
 for (final JavaClass cls : wrapper.getIncludedClasses()) {
addTask(new Runnable() {
@Override public void run() {
try {
index.indexNames(cls);
 CodeLinesInfo linesInfo = new CodeLinesInfo(cls);
 List<StringRef> lines = splitLines(cls);
 usageInfo.processClass(cls, linesInfo, lines);
  if (alwaysIndex || Utils.isFreeMemoryAvailable()) {
 index.indexCode(cls, linesInfo, lines);
 } else {
index.classCodeIndexSkipped(cls);
 } } catch (Exception e) {
LOG.error(""Index error in class: {}"", cls.getFullName(), e);
 } } });
 } } }","class _ { protected void runJob() {
JNodeCache nodeCache = cache.getNodeCache();
 final TextSearchIndex index = new TextSearchIndex(nodeCache);
 final CodeUsageInfo usageInfo = new CodeUsageInfo(nodeCache);
 cache.setTextIndex(index);
 cache.setUsageInfo(usageInfo);
 for (final JavaClass cls : wrapper.getIncludedClasses()) {
addTask(new Runnable() {
@Override public void run() {
try {
index.indexNames(cls);
 CodeLinesInfo linesInfo = new CodeLinesInfo(cls);
 List<StringRef> lines = splitLines(cls);
 usageInfo.processClass(cls, linesInfo, lines);
 if (Utils.isFreeMemoryAvailable()) {
index.indexCode(cls, linesInfo, lines);
 } else {
index.classCodeIndexSkipped(cls);
 } } catch (Exception e) {
LOG.error(""Index error in class: {}"", cls.getFullName(), e);
 } } });
 } } }",1
70277,"class _ { ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) {
if (tableSupportsDeltaDelete) {
return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor,  uuid -> this.getRowsFromUuid(fileSystem, uuid),  (columnIds, columnTypes) -> this.createStoragePageSink( fileSystemContext, transactionId, bucketNumber, columnIds, columnTypes, true));
 } else {
return new InplaceShardRewriter( fileSystem, transactionId, bucketNumber, shardUuid, columns, deletionExecutor, nodeId, this, storageService, shardRecorder, backupManager);
 } } }","class _ { ShardRewriter createShardRewriter( FileSystemContext fileSystemContext, FileSystem fileSystem, long transactionId, OptionalInt bucketNumber, UUID shardUuid, int shardRowCount, Optional<UUID> deltaShardUuid, boolean tableSupportsDeltaDelete, Map<String, Type> columns) {
if (tableSupportsDeltaDelete) {
return new DeltaShardRewriter( shardUuid, shardRowCount, deltaShardUuid, deletionExecutor, transactionId, bucketNumber, this, fileSystemContext, fileSystem);
 } return new InplaceShardRewriter( shardUuid, columns, deletionExecutor, transactionId, bucketNumber, nodeId, this, fileSystem, storageService, shardRecorder, backupManager);
 } }",1
70279,"class _ { private int numberOfAssignmentsForConsumersGroups(List<String> consumerGroupsIds) throws ExecutionException, InterruptedException {
Collection<ConsumerGroupDescription> consumerGroupsDescriptions = adminClient.describeConsumerGroups(consumerGroupsIds).all().get().values();
  Collection<MemberDescription> memberDescriptions = consumerGroupsDescriptions.stream().flatMap(desc -> desc.members().stream()).collect(Collectors.toList());
  return memberDescriptions.stream().flatMap(memberDescription -> memberDescription.assignment().topicPartitions().stream()).collect(Collectors.toList()).size();
 } }","class _ { private int numberOfAssignmentsForConsumersGroups(List<String> consumerGroupsIds) throws ExecutionException, InterruptedException {
Collection<ConsumerGroupDescription> consumerGroupsDescriptions = adminClient.describeConsumerGroups(consumerGroupsIds).all().get().values();
 Stream<MemberDescription> memberDescriptions = consumerGroupsDescriptions.stream().flatMap(desc -> desc.members().stream());
 return memberDescriptions.flatMap(memberDescription -> memberDescription.assignment().topicPartitions().stream()).collect(Collectors.toList()).size();
 } }",1
70280,"class _ { public Object execute(ComplexEvent event) {
try {
Boolean condition = (attributeExpressionExecutors[0].execute(event) != null  && attributeExpressionExecutors[0].execute(event).equals(Boolean.TRUE));
  return execute( new Object[]{
condition, (condition) ? attributeExpressionExecutors[1].execute(event) : null, (!condition) ? attributeExpressionExecutors[2].execute(event) : null } );
 } catch (Exception e) {
log.error(""Exception on execution plan '"" + executionPlanContext.getName() + ""' on class '"" + this.getClass().getName() + ""', "" + e.getMessage(), e);
 return null;
 } } }","class _ { public Object execute(ComplexEvent event) {
try {
Boolean condition = Boolean.TRUE.equals(attributeExpressionExecutors[0].execute(event));
 return execute( new Object[]{
condition, (condition) ? attributeExpressionExecutors[1].execute(event) : null, (!condition) ? attributeExpressionExecutors[2].execute(event) : null } );
 } catch (Exception e) {
log.error(""Exception on execution plan '"" + executionPlanContext.getName() + ""' on class '"" + this.getClass().getName() + ""', "" + e.getMessage(), e);
 return null;
 } } }",1
70283,"class _ { public void extractSingle() {
assertEquals(foo,  new Or<String>(  new And<String>(foo, bar), foo ).simplify());
 } }","class _ { public void extractSingle() {
assertEquals(foo, new Or<>( new And<>(foo, bar), foo ).simplify());
 } }",1
70285,"class _ { private void announceIfEnabled(MetricAttribute metricAttribute, String metricName, String group, double value, String units) throws GangliaException {
 if (isMetricAttributeDisabled(metricAttribute)) {
 return;
 } final String string = Math.abs(value) < MIN_VAL ? ""0"" : Double.toString(value);
 announce(prefix(metricName, metricAttribute.getCode()), group, string, GMetricType.DOUBLE, units);
 } }","class _ { private void announceIfEnabled(MetricAttribute metricAttribute, String metricName, String group, double value, String units) throws GangliaException {
if (getDisabledMetricAttributes().contains(metricAttribute)) {
return;
 } final String string = Math.abs(value) < MIN_VAL ? ""0"" : Double.toString(value);
 announce(prefix(metricName, metricAttribute.getCode()), group, string, GMetricType.DOUBLE, units);
 } }",1
70287,"class _ { public Result apply(AggregationNode aggregation, Captures captures, Context context) {
Assignments.Builder newAssignments = Assignments.builder();
 ImmutableMap.Builder<Symbol, Aggregation> aggregations = ImmutableMap.builder();
 ImmutableList.Builder<Expression> filterExpressions = ImmutableList.builder();
 for (Map.Entry<Symbol, Aggregation> entry : aggregation.getAggregations().entrySet()) {
Symbol output = entry.getKey();
 FunctionCall call = entry.getValue().getCall();
 Optional<Symbol> mask = entry.getValue().getMask();
 if (call.getFilter().isPresent()) {
Expression filter = call.getFilter().get();
 Symbol symbol = context.getSymbolAllocator().newSymbol(filter, BOOLEAN);
 verify(!mask.isPresent(), ""Expected aggregation without mask symbols, see Rule pattern"");
 newAssignments.put(symbol, filter);
 mask = Optional.of(symbol);
 filterExpressions.add(filter);
 } aggregations.put(output, new Aggregation( new FunctionCall(call.getName(), call.getWindow(), Optional.empty(), call.getOrderBy(), call.isDistinct(), call.getArguments()), entry.getValue().getSignature(), mask));
 } newAssignments.putIdentities(aggregation.getSource().getOutputSymbols());
 ProjectNode projectNode = new ProjectNode( context.getIdAllocator().getNextId(), aggregation.getSource(), newAssignments.build());
 return Result.ofPlanNode( new AggregationNode( context.getIdAllocator().getNextId(), new FilterNode( context.getIdAllocator().getNextId(),  projectNode,  combineDisjuncts(filterExpressions.build())), aggregations.build(), aggregation.getGroupingSets(), ImmutableList.of(), aggregation.getStep(), aggregation.getHashSymbol(), aggregation.getGroupIdSymbol()));
 } }","class _ { public Result apply(AggregationNode aggregation, Captures captures, Context context) {
Assignments.Builder newAssignments = Assignments.builder();
 ImmutableMap.Builder<Symbol, Aggregation> aggregations = ImmutableMap.builder();
 ImmutableList.Builder<Expression> maskSymbols = ImmutableList.builder();
 boolean aggregateWithoutFilterPresent = false;
 for (Map.Entry<Symbol, Aggregation> entry : aggregation.getAggregations().entrySet()) {
Symbol output = entry.getKey();
 FunctionCall call = entry.getValue().getCall();
 Optional<Symbol> mask = entry.getValue().getMask();
 if (call.getFilter().isPresent()) {
Expression filter = call.getFilter().get();
 Symbol symbol = context.getSymbolAllocator().newSymbol(filter, BOOLEAN);
 verify(!mask.isPresent(), ""Expected aggregation without mask symbols, see Rule pattern"");
 newAssignments.put(symbol, filter);
 mask = Optional.of(symbol);
 maskSymbols.add(symbol.toSymbolReference());
 } else {
aggregateWithoutFilterPresent = true;
 } aggregations.put(output, new Aggregation( new FunctionCall(call.getName(), call.getWindow(), Optional.empty(), call.getOrderBy(), call.isDistinct(), call.getArguments()), entry.getValue().getSignature(), mask));
 } Expression predicate = TRUE_LITERAL;
 if (!aggregation.hasNonEmptyGroupingSet() && !aggregateWithoutFilterPresent) {
predicate = combineDisjunctsWithDefault(maskSymbols.build(), TRUE_LITERAL);
 } newAssignments.putIdentities(aggregation.getSource().getOutputSymbols());
 return Result.ofPlanNode( new AggregationNode( context.getIdAllocator().getNextId(), new FilterNode( context.getIdAllocator().getNextId(), new ProjectNode( context.getIdAllocator().getNextId(), aggregation.getSource(), newAssignments.build()), predicate), aggregations.build(), aggregation.getGroupingSets(), ImmutableList.of(), aggregation.getStep(), aggregation.getHashSymbol(), aggregation.getGroupIdSymbol()));
 } }",1
70290,"class _ { public int getMaxSnapshotID() {
 return (1 << SNAPSHOT_ID_BIT_WIDTH);
  } }","class _ { public int getMaxSnapshotID() {
return ((1 << SNAPSHOT_ID_BIT_WIDTH) - 1);
 } }",1
70291,"class _ { public void gather(MetricsCollector collector) {
List<LockInfo> locks = getLocks();
 LocalDateTime limitForAcquired = LocalDateTime.now().minus(LONG_RUNNING_LOGS_THRESHOLD);
 collector.metric(""locks-count"", ""Active Locks"", locks.size(), null);
 collector.metric(""locks-long-running"", ""Long locks"",  locks.stream()  .filter(lock -> Objects.nonNull(lock.getAcquired())) .filter(lock -> lock.getAcquired().isBefore(limitForAcquired)) .count(), null);
 } }","class _ { public void gather(MetricsCollector collector) {
List<LockInfo> locks = getLocks();
 LocalDateTime limitForAcquired = LocalDateTime.now().minus(LONG_RUNNING_LOGS_THRESHOLD);
 collector.metric(""locks-count"", ""Active Locks"", locks.size(), null);
 collector.metric(""locks-long-running"", ""Long locks"", locks.stream() .map(LockInfo::getAcquired) .filter(Objects::nonNull) .filter(date -> date.isBefore(limitForAcquired)) .count(), null);
 } }",1
70292,"class _ { public FakeHttpServletRequest( Map<String, String> parameterMap, Cookie[] cookies, String workspace) {
this.parameterMap = parameterMap;
 this.cookies = cookies;
 this.workspace = workspace;
 this.original = Optional.ofNullable( (ServletRequestAttributes) RequestContextHolder.getRequestAttributes())  .map(atts -> atts.getRequest());
  } }","class _ { public FakeHttpServletRequest( Map<String, String> parameterMap, Cookie[] cookies, String workspace) {
this.parameterMap = parameterMap;
 this.cookies = cookies;
 this.workspace = workspace;
 this.original = Optional.ofNullable( (ServletRequestAttributes) RequestContextHolder.getRequestAttributes()) .map(ServletRequestAttributes::getRequest);
 } }",1
70300,"class _ { public boolean provides(final IOperation operation) {
boolean provide = false;
 String currentDiagramType;
 final EObject referenceElement = ((View) ((CreateEditPoliciesOperation) operation).getEditPart().getModel()).getElement();
 if (((((CreateEditPoliciesOperation) operation).getEditPart() instanceof NodeEditPart) && (operation instanceof CreateEditPoliciesOperation) && (referenceElement instanceof CallBehaviorAction))) {
currentDiagramType = ((View) ((CreateEditPoliciesOperation) operation).getEditPart().getModel()).getDiagram().getType();
  if ((diagramType != null) && (diagramType.equals(currentDiagramType))) {
 provide = true;
 } else {
provide = false;
 } } return provide;
 } }","class _ { public boolean provides(final IOperation operation) {
boolean provide = false;
 String currentDiagramType;
 final EObject referenceElement = ((View) ((CreateEditPoliciesOperation) operation).getEditPart().getModel()).getElement();
 if (((((CreateEditPoliciesOperation) operation).getEditPart() instanceof NodeEditPart) && (operation instanceof CreateEditPoliciesOperation) && (referenceElement instanceof CallBehaviorAction))) {
currentDiagramType = ((View) ((CreateEditPoliciesOperation) operation).getEditPart().getModel()).getDiagram().getType();
 if ((null != diagramType) && (diagramType.equals(currentDiagramType))) {
provide = true;
 } else {
provide = false;
 } } return provide;
 } }",1
70304,"class _ { public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case R.id.menu_edit: FragUtils.replaceBackStack(R.id.container, EditAnnouncementFragment.newInstance(mAnnouncement), getActivity());
 break;
 case R.id.menu_delete:  Requests.Announcements.with(getActivity()).makeDeleteRequest(mAnnouncement);
  break;
 } return super.onOptionsItemSelected(item);
 } }","class _ { public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case R.id.menu_edit: FragUtils.replaceBackStack(R.id.container, EditAnnouncementFragment.newInstance(mAnnouncement), getActivity());
 break;
 case R.id.menu_delete: confirmDelete();
 break;
 } return super.onOptionsItemSelected(item);
 } }",1
70305,"class _ { public String toString() {
StringBuilder buf = new StringBuilder();
 buf.append(""HunkHeader["");
 buf.append(getOldImage().getStartLine() + "",""  + getOldImage().getLineCount());
  buf.append(""->"");
 buf.append(getNewStartLine() + "","" + getNewLineCount());
 buf.append(""]"");
 return buf.toString();
 } }","class _ { public String toString() {
StringBuilder buf = new StringBuilder();
 buf.append(""HunkHeader["");
 buf.append(getOldImage().getStartLine());
 buf.append(',');
 buf.append(getOldImage().getLineCount());
 buf.append(""->"");
 buf.append(getNewStartLine()).append(',').append(getNewLineCount());
 buf.append(']');
 return buf.toString();
 } }",1
70313,"class _ { public void testSelectorWidget() {
final Button b1 = new Button(""click-me"");
 RootPanel.get().add(b1);
 GQuery g = $(b1);
  assertEquals(""inline-block"", $(b1).css(""display""));
  g.hide();
 assertEquals(""none"", $(b1).css(""display""));
 } }","class _ { public void testSelectorWidget() {
final Button b1 = new Button(""Button click"");
 RootPanel.get().add(b1);
 GQuery g = $(b1);
 assertTrue(g.isVisible());
 g.hide();
 assertFalse(g.isVisible());
 b1.removeFromParent();
 } }",1
70314,"class _ { private List<DSpaceObject> constructDSpaceObjectList(Context context, HttpServletRequest request) throws IOException {
List<String> list = readFromRequest(request);
 List<DSpaceObject> dSpaceObjects = new LinkedList<>();
 for (String string : list) {
String uuid = string.substring(string.lastIndexOf('/') + 1);
 try {
for (DSpaceObjectService dSpaceObjectService : dSpaceObjectServices) {
DSpaceObject dSpaceObject = dSpaceObjectService.find(context, UUIDUtils.fromString(uuid));
 if (dSpaceObject != null) {
dSpaceObjects.add(dSpaceObject);
 break;
 } } } catch (SQLException e) {
 log.error(e.getMessage(), e);
  } } return dSpaceObjects;
 } }","class _ { private List<DSpaceObject> constructDSpaceObjectList(Context context, HttpServletRequest request) {
List<String> list = null;
 try {
list = readFromRequest(request);
 } catch (IOException e) {
log.error(""Something went wrong with reading in the inputstream from the request"", e);
 } List<DSpaceObject> dSpaceObjects = new LinkedList<>();
 for (String string : list) {
if (string.endsWith(""/"")) {
string = string.substring(0, string.length() - 1);
 } String uuid = string.substring(string.lastIndexOf('/') + 1);
 try {
for (DSpaceObjectService dSpaceObjectService : dSpaceObjectServices) {
DSpaceObject dSpaceObject = dSpaceObjectService.find(context, UUIDUtils.fromString(uuid));
 if (dSpaceObject != null) {
dSpaceObjects.add(dSpaceObject);
 break;
 } } } catch (SQLException e) {
log.error(""Could not find DSpaceObject for UUID: "" + uuid, e);
 } } return dSpaceObjects;
 } }",1
70318,"class _ { public static CloudBigtableScanConfiguration BuildExportConfig(ExportOptions opts) {
ValueProvider<ReadRowsRequest> request = new RequestWithScanValueProvider( opts.getBigtableStartRow(), opts.getBigtableStopRow(), opts.getBigtableMaxVersions(), opts.getBigtableFilter());
 CloudBigtableScanConfiguration.Builder configBuilder = new CloudBigtableScanConfiguration.Builder() .withProjectId(opts.getBigtableProject()) .withInstanceId(opts.getBigtableInstanceId()) .withTableId(opts.getBigtableTableId()) .withRequest(request);
  if (opts.getBigtableAppProfileId() != null) {
 configBuilder.withAppProfileId(opts.getBigtableAppProfileId());
 } return configBuilder.build();
 } }","class _ { public static CloudBigtableScanConfiguration BuildExportConfig(ExportOptions opts) {
ValueProvider<ReadRowsRequest> request = new RequestValueProvider( opts.getBigtableStartRow(), opts.getBigtableStopRow(), opts.getBigtableMaxVersions(), opts.getBigtableFilter());
 CloudBigtableScanConfiguration.Builder configBuilder = new CloudBigtableScanConfiguration.Builder() .withProjectId(opts.getBigtableProject()) .withInstanceId(opts.getBigtableInstanceId()) .withTableId(opts.getBigtableTableId()) .withAppProfileId(opts.getBigtableAppProfileId()) .withRequest(request);
 return configBuilder.build();
 } }",1
70322,"class _ { private Gson buildGson() {
return new GsonBuilder()  .setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSSZ"")  .registerTypeAdapter(Person.class, new Person.PersonSerializer()).create();
 } }","class _ { private Gson buildGson() {
return new GsonBuilder() .registerTypeAdapter(Person.class, new Person.PersonSerializer()) .create();
 } }",1
70323,"class _ { private DoubleArray strikesShifted(double forward, double shiftOutput, DoubleArray strikesLike, ValueType strikeType) {
int nbStrikes = strikesLike.size();
 double[] strikes = new double[nbStrikes];
 if (strikeType.equals(ValueType.STRIKE)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
strikes[i] = strikesLike.get(i) + shiftOutput;
 } return DoubleArray.ofUnsafe(strikes);
 } if (strikeType.equals(ValueType.SIMPLE_MONEYNESS)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
strikes[i] = forward + strikesLike.get(i) + shiftOutput;
 } return DoubleArray.ofUnsafe(strikes);
 } if (strikeType.equals(ValueType.LOG_MONEYNESS)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
 strikes[i] = forward * strikesLike.get(i) + shiftOutput;
  } return DoubleArray.ofUnsafe(strikes);
 } throw new IllegalArgumentException(""Strike type not supported"");
 } }","class _ { private DoubleArray strikesShifted(double forward, double shiftOutput, DoubleArray strikesLike, ValueType strikeType) {
int nbStrikes = strikesLike.size();
 double[] strikes = new double[nbStrikes];
 if (strikeType.equals(ValueType.STRIKE)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
strikes[i] = strikesLike.get(i) + shiftOutput;
 } return DoubleArray.ofUnsafe(strikes);
 } if (strikeType.equals(ValueType.SIMPLE_MONEYNESS)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
strikes[i] = forward + strikesLike.get(i) + shiftOutput;
 } return DoubleArray.ofUnsafe(strikes);
 } if (strikeType.equals(ValueType.LOG_MONEYNESS)) {
for (int i = 0;
 i < nbStrikes;
 i++) {
strikes[i] = forward * Math.exp(strikesLike.get(i)) + shiftOutput;
 } return DoubleArray.ofUnsafe(strikes);
 } throw new IllegalArgumentException(""Strike type not supported"");
 } }",1
70327,"class _ { public Map<String, Object> perform() {
ArrayList<Map<String, String>> list = null;
 Map<String, Object> results = new HashMap<String, Object>(2);
 int totalItemCount = 0;
 List<User> users = null;
 int realUserCount = 0;
 try {
totalItemCount = getUserCount();
 if (start < totalItemCount) {
users = getUsers();
 realUserCount = users.size();
 } if (users != null) {
int pageSize = realUserCount;
 list = new ArrayList<Map<String, String>>(pageSize);
 for (User aUser : users) {
Map<String, String> aRecord = new HashMap<String, String>();
 String fullName = aUser.getFullName();
 fullName = (UtilMethods.isSet(fullName) ? fullName : "" "");
 String emailAddress = aUser.getEmailAddress();
 emailAddress = (UtilMethods.isSet(emailAddress) ? emailAddress : "" "");
  aRecord.put(""id"", aUser.getUserId());
  aRecord.put(""type"", USER_TYPE_VALUE);
 aRecord.put(""name"", fullName);
 aRecord.put(""emailaddress"", emailAddress);
 list.add(aRecord);
 } } else {
list = new ArrayList<Map<String, String>>(0);
 } } catch (Exception ex) {
Logger.warn(UserAjax.class, ""::processUsersList -> Could not process list of users."");
 list = new ArrayList<Map<String, String>>(0);
 } results.put(""data"", list);
 results.put(""total"", totalItemCount);
 return results;
 } }","class _ { public Map<String, Object> perform() {
ArrayList<Map<String, String>> list = null;
 Map<String, Object> results = new HashMap<String, Object>(2);
 int totalItemCount = 0;
 List<User> users = null;
 int realUserCount = 0;
 try {
totalItemCount = getUserCount();
 if (start < totalItemCount) {
users = getUsers();
 realUserCount = users.size();
 } if (users != null) {
int pageSize = realUserCount;
 list = new ArrayList<Map<String, String>>(pageSize);
 for (User aUser : users) {
final Map<String, String> aRecord = map( ""id"", aUser.getUserId(), ""type"", USER_TYPE_VALUE, ""name"", UtilMethods.isSet(aUser.getFullName()) ? aUser.getFullName() : "" "", ""emailaddress"", UtilMethods.isSet(aUser.getEmailAddress()) ? aUser.getEmailAddress() : "" "");
 list.add(aRecord);
 } } else {
list = EMPTY_MAP_LIST;
 } } catch (Exception ex) {
Logger.warn(UserAjax.class, ""::processUsersList -> Could not process list of users."");
 list = new ArrayList<Map<String, String>>(0);
 } results.put(""data"", list);
 results.put(""total"", totalItemCount);
 return results;
 } }",1
70328,"class _ { public void init() throws IOException {
pinotCrypter = new NoOpPinotCrypter();
  srcFile = File.createTempFile(""srcFile"",""txt"");
  srcFile.deleteOnExit();
 destinationFile = File.createTempFile(""destFile"",""txt"");
 destinationFile.deleteOnExit();
 FileUtils.write(srcFile,""testData"");
 } }","class _ { public void init() throws IOException {
pinotCrypter = new NoOpPinotCrypter();
 srcFile = File.createTempFile(""srcFile"",""txt"");
 encryptedFile = File.createTempFile(""encryptedFile"",""txt"");
 encryptedFile.deleteOnExit();
 decryptedFile = File.createTempFile(""decryptedFile"",""txt"");
 decryptedFile.deleteOnExit();
 FileUtils.write(srcFile,""testData"");
 } }",1
70329,"class _ { public static Credential authorize() {
try {
GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder( HTTP_TRANSPORT, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, SCOPES)  .setDataStoreFactory(DATA_STORE_FACTORY)  .setAccessType(""offline"") .build();
 Credential credential = new AuthorizationCodeInstalledApp( flow, new LocalServerReceiver()).authorize(""ganttuser"");
 System.out.println( ""Credentials saved to "" + DATA_STORE_DIR.getAbsolutePath());
 return credential;
 } catch (IOException e) {
e.printStackTrace();
 return null;
 } } }","class _ { public Credential authorize() throws GeneralSecurityException, IOException {
HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
 GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder( httpTransport, JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, SCOPES) .build();
 return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(""ganttuser"");
 } }",1
70333,"class _ { public void removePartition(String partitionIdStr) {
PartitionId partitionId = partitionIdMap.get(partitionIdStr);
 if (partitionId != null) {
assignedPartitionIds.remove(partitionIdMap.get(partitionIdStr));
 for (VirtualReplicatorClusterListener listener : listeners) {
listener.onPartitionRemoved(partitionId);
 } logger.info(""Removed partition {} to current VCR: "", partitionIdStr);
 } else {
 logger.trace(""Partition {} not in clusterMap on remove."", partitionIdStr);
  metrics.partitionIdNotInClusterMapOnRemove.inc();
 } } }","class _ { public void removePartition(String partitionIdStr) {
PartitionId partitionId = partitionIdMap.get(partitionIdStr);
 if (partitionId != null) {
if (assignedPartitionIds.remove(partitionId)) {
for (VirtualReplicatorClusterListener listener : listeners) {
listener.onPartitionRemoved(partitionId);
 } logger.info(""Partition {} is removed from current VCR: {}."", partitionIdStr, vcrInstanceName);
 } else {
logger.info(""Partition {} not exists on current VCR: {}"", partitionIdStr, vcrInstanceName);
 } } else {
logger.error(""Partition {} not in clusterMap on remove."", partitionIdStr);
 metrics.partitionIdNotInClusterMapOnRemove.inc();
 } } }",1
70334,"class _ { public GarrukSavageHerald(UUID ownerId, CardSetInfo setInfo) {
super(ownerId, setInfo, new CardType[]{CardType.PLANESWALKER}, ""{4}{G}{G}"");
 this.addSuperType(SuperType.LEGENDARY);
 this.subtype.add(SubType.GARRUK);
 this.addAbility(new PlaneswalkerEntersWithLoyaltyCountersAbility(5));
 this.addAbility(new LoyaltyAbility(new GarrukSavageHeraldEffect(), 1));
 Ability minusAbility = new LoyaltyAbility(new DamageWithPowerFromOneToAnotherTargetEffect(), -2);
 minusAbility.addTarget(new TargetControlledCreaturePermanent());
  minusAbility.addTarget(new TargetCreaturePermanent(StaticFilters.FILTER_CREATURE_YOU_DONT_CONTROL));
  this.addAbility(minusAbility);
 ContinuousEffect ultimateEffect = new GainAbilityControlledEffect(DamageAsThoughNotBlockedAbility.getInstance(), Duration.EndOfTurn);
 ultimateEffect.setText(""Until end of turn, creatures you control gain \""You may have this creature assign its combat damage as though it weren't blocked.\"""");
 ultimateEffect.setDependedToType(DependencyType.AddingAbility);
 this.addAbility(new LoyaltyAbility(ultimateEffect, -7));
 } }","class _ { public GarrukSavageHerald(UUID ownerId, CardSetInfo setInfo) {
super(ownerId, setInfo, new CardType[]{CardType.PLANESWALKER}, ""{4}{G}{G}"");
 this.addSuperType(SuperType.LEGENDARY);
 this.subtype.add(SubType.GARRUK);
 this.addAbility(new PlaneswalkerEntersWithLoyaltyCountersAbility(5));
 this.addAbility(new LoyaltyAbility(new GarrukSavageHeraldEffect(), 1));
 DamageWithPowerFromOneToAnotherTargetEffect effect = new DamageWithPowerFromOneToAnotherTargetEffect();
 effect.setText(""Target creature you control deals damage equal to its power to another target creature"");
 Ability minusAbility = new LoyaltyAbility(effect, -2);
 TargetControlledCreaturePermanent controlledCreature = new TargetControlledCreaturePermanent();
 controlledCreature.setTargetTag(1);
 minusAbility.addTarget(controlledCreature);
 FilterCreaturePermanent filter = new FilterCreaturePermanent(""Another creature: damage dealt to"");
 filter.add(new AnotherTargetPredicate(2));
 TargetCreaturePermanent anotherTargetCreature = new TargetCreaturePermanent(filter);
 minusAbility.addTarget(anotherTargetCreature);
 this.addAbility(minusAbility);
 ContinuousEffect ultimateEffect = new GainAbilityControlledEffect(DamageAsThoughNotBlockedAbility.getInstance(), Duration.EndOfTurn);
 ultimateEffect.setText(""Until end of turn, creatures you control gain \""You may have this creature assign its combat damage as though it weren't blocked.\"""");
 this.addAbility(new LoyaltyAbility(ultimateEffect, -7));
 } }",1
70342,"class _ { public void update(Bounds bounds, double zoom) {
int minRank = (int) (Math.max(bounds.getMinX() / RANK_WIDTH, 0));
 int maxRank = (int) (RANK_WIDTH + bounds.getMaxX() / RANK_WIDTH);
 if (minRank < lastLoaded.getX() || maxRank > lastLoaded.getY()) {
minRank = Math.min(Math.max(minRank, 0), graph.getMaxRank());
 maxRank = Math.min(Math.max(minRank, maxRank), graph.getMaxRank());
 minRankProperty().set(minRank);
 maxRankProperty().set(maxRank);
  lastLoaded = new Range(minRank / 2, maxRank * 2);
  loadContent(new Range(lastLoaded.getX(), lastLoaded.getY()), zoom);
 } } }","class _ { public void update(Bounds bounds, double zoom) {
int minRank = (int) (Math.max(bounds.getMinX() / RANK_WIDTH, 0));
 int maxRank = (int) (RANK_WIDTH + bounds.getMaxX() / RANK_WIDTH);
 minRank = Math.min(Math.max(minRank, 0), graph.getMaxRank());
 maxRank = Math.min(Math.max(minRank, maxRank), graph.getMaxRank());
 minRankProperty().set(minRank);
 maxRankProperty().set(maxRank);
 loadContent(new Range(minRank, maxRank), zoom);
 } }",1
70344,"class _ { public UserRequest(final Activity activity, User user, HashMap<String, JSONObject> params, final Response.Listener<User> listener) {
 super(Request.Method.GET, makeURL(""users""), new JSONObject(params),  new Response.Listener<JSONObject>() {
@Override public void onResponse(JSONObject jsonObject) {
try {
String userJson = jsonObject.get(""user"").toString();
 ObjectMapper mapper = getNetworkManager(activity.getApplicationContext()).getObjectMapper();
 User user = mapper.readValue(userJson, new TypeReference<User>() {
});
 listener.onResponse(user);
 } catch (Exception e) {
Log.e(""Json exception"", e.toString());
 } } }, activity);
 } }","class _ { public UserRequest(final Activity activity, User user, HashMap<String, JSONObject> params, final Response.Listener<User> listener) {
super(Request.Method.GET, makeObjectURL(""users"", user), new JSONObject(params), new Response.Listener<JSONObject>() {
@Override public void onResponse(JSONObject jsonObject) {
try {
String userJson = jsonObject.get(""user"").toString();
 ObjectMapper mapper = getNetworkManager(activity.getApplicationContext()).getObjectMapper();
 User user = mapper.readValue(userJson, new TypeReference<User>() {
});
 listener.onResponse(user);
 } catch (Exception e) {
Log.e(""Json exception"", e.toString());
 } } }, activity);
 } }",1
70346,"class _ { public static String formatAnnotation(Annotation a) {
String annoName = a.def().name.substring(a.def().name.lastIndexOf('.') + 1);
 if (a.fieldValues.isEmpty()) {
return ""@"" + annoName;
 }  StringJoiner sj = new StringJoiner("","", ""@"" + annoName + ""("", "")"");
  for (Map.Entry<String, Object> f : a.fieldValues.entrySet()) {
AnnotationFieldType aft = a.def().fieldTypes.get(f.getKey());
 sj.add(f.getKey() + ""="" + IndexFileWriter.formatAnnotationValue(aft, f.getValue()));
 } return sj.toString();
 } }","class _ { public static String formatAnnotation(Annotation a) {
String fullAnnoName = a.def().name;
 String simpleAnnoName = fullAnnoName.substring(fullAnnoName.lastIndexOf('.') + 1);
 if (a.fieldValues.isEmpty()) {
return ""@"" + simpleAnnoName;
 } StringJoiner sj = new StringJoiner("", "", ""@"" + simpleAnnoName + ""("", "")"");
 for (Map.Entry<String, Object> f : a.fieldValues.entrySet()) {
AnnotationFieldType aft = a.def().fieldTypes.get(f.getKey());
 sj.add(f.getKey() + ""="" + IndexFileWriter.formatAnnotationValue(aft, f.getValue()));
 } return sj.toString();
 } }",1
70352,"class _ { private void createVolumeFromSnapshot(HostVO hostVO, SnapshotInfo snapshotInfo, boolean keepGrantedAccess) {
SnapshotDetailsVO snapshotDetails = handleSnapshotDetails(snapshotInfo.getId(), ""tempVolume"", ""create"");
 try {
snapshotInfo.getDataStore().getDriver().createAsync(snapshotInfo.getDataStore(), snapshotInfo, null);
 } finally {
_snapshotDetailsDao.remove(snapshotDetails.getId());
 } CopyCmdAnswer copyCmdAnswer = performResignature(snapshotInfo, hostVO, keepGrantedAccess);
 if (copyCmdAnswer == null || !copyCmdAnswer.getResult()) {
if (copyCmdAnswer != null && !StringUtils.isEmpty(copyCmdAnswer.getDetails())) {
throw new CloudRuntimeException(copyCmdAnswer.getDetails());
 } else {
 throw new CloudRuntimeException(""Unable to perform host-side operation"");
  } } } }","class _ { private void createVolumeFromSnapshot(HostVO hostVO, SnapshotInfo snapshotInfo, boolean keepGrantedAccess) {
SnapshotDetailsVO snapshotDetails = handleSnapshotDetails(snapshotInfo.getId(), ""tempVolume"", ""create"");
 try {
snapshotInfo.getDataStore().getDriver().createAsync(snapshotInfo.getDataStore(), snapshotInfo, null);
 } finally {
_snapshotDetailsDao.remove(snapshotDetails.getId());
 } CopyCmdAnswer copyCmdAnswer = performResignature(snapshotInfo, hostVO, keepGrantedAccess);
 if (copyCmdAnswer == null || !copyCmdAnswer.getResult()) {
if (copyCmdAnswer != null && !StringUtils.isEmpty(copyCmdAnswer.getDetails())) {
throw new CloudRuntimeException(copyCmdAnswer.getDetails());
 } else {
throw new CloudRuntimeException(""Unable to create volume from snapshot"");
 } } } }",1
70353,"class _ { private boolean isAllowed(MutableHttpServletRequest request, String paramName) {
String layersParam = request.getParameterIgnoreCase(paramName);
 List<Layer> all = layerService.findAll();
 boolean match = false;
 for (Layer layer : all) {
if (layer.getSource() instanceof ImageWmsLayerDataSource) {
ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource();
 if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) {
 match = true;
  } } } return match;
 } }","class _ { private boolean isAllowed(MutableHttpServletRequest request, String paramName) {
String layersParam = request.getParameterIgnoreCase(paramName);
 List<Layer> all = layerService.findAll();
 boolean match = false;
 for (Layer layer : all) {
if (layer.getSource() instanceof ImageWmsLayerDataSource) {
ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource();
 if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) {
match = true;
 break;
 } } } return match;
 } }",1
70362,"class _ { public void init() {
Date date = new Date();
  long initialTime = date.getTime();
  while (jmxConnectionTimeout.getValue() > (date.getTime() - initialTime)) {
try {
connections = AgentUtils.getMBeanConnections( AgentUtils.getJMXConnectors(AgentUtils.splitServices(jmxServices), name + "" collect from jmx port "", urlFormat));
 break;
 } catch (IOException e) {
log.error(""Error during JMX initializing"", e);
 TimeUtils.sleepMillis(3000);
 } } if (connections.size() == 0) {
throw new RuntimeException(""Error during JMX initialization. ZERO connections created for url "" + jmxServices + ""."");
 } } }","class _ { public void init() {
long initialTime = System.currentTimeMillis();
 while (jmxConnectionTimeout.getValue() > (System.currentTimeMillis() - initialTime)) {
try {
connections = AgentUtils.getMBeanConnections( AgentUtils.getJMXConnectors(AgentUtils.splitServices(jmxServices), name + "" collect from jmx port "", urlFormat));
 break;
 } catch (IOException e) {
log.error(""Error during JMX initializing"", e);
 TimeUtils.sleepMillis(jmxConnectionRetryDelay.getValue());
 } } if (connections.size() == 0) {
throw new RuntimeException(""Error during JMX initialization. ZERO connections created for url "" + jmxServices + ""."");
 } } }",1
70363,"class _ { public void testAddJumpStitchPoint() {
 EmbroideryStream stream = new DSTStream();
  stream.addJump();
 stream.addStitchPoint(0, 0);
 assertEquals(1, stream.getPointList().size());
 assertTrue(stream.getPointList().get(0).isJumpPoint());
 } }","class _ { public void testAddJumpStitchPoint() {
stream.addJump();
 stream.addStitchPoint(0, 0);
 assertEquals(1, stream.getPointList().size());
 assertTrue(stream.getPointList().get(0).isJumpPoint());
 } }",1
70364,"class _ { public Long getLastModified() {
 String updateTs = DefaultGroovyMethods.asType(super.get(""updateTs""), String.class);
  return Strings.isNullOrEmpty(updateTs) ? null : Long.valueOf(updateTs);
 } }","class _ { public Long getLastModified() {
String updateTs = (String) super.get(""updateTs"");
 return Strings.isNullOrEmpty(updateTs) ? null : Long.valueOf(updateTs);
 } }",1
70367,"class _ { protected void checkDatabaseConfiguration(Environment env, DataSource dataSource) {
JdbcTemplate jdbc = new JdbcTemplate(dataSource);
 Long dbTimeZoneOffsetHours = jdbc.queryForObject(""select current timezone from sysibm.sysdummy1"", Long.class);
 Long propsTimeZoneOffsetHours = HOURS.convert( TimeZone.getTimeZone(property(env, ""timezone"")).getOffset(currentTimeMillis()), MILLISECONDS);
 if (!Objects.equals(dbTimeZoneOffsetHours, propsTimeZoneOffsetHours)) {
 throw new RuntimeException(""Database has unexpected time zone - hour offset DB2: "" + dbTimeZoneOffsetHours +  "", properties: "" + propsTimeZoneOffsetHours);
 } } }","class _ { protected void checkDatabaseConfiguration(Environment env, DataSource dataSource) {
JdbcTemplate jdbc = new JdbcTemplate(dataSource);
 Long dbTimeZoneOffsetHours = jdbc.queryForObject(""select current timezone from sysibm.sysdummy1"", Long.class);
 Long propsTimeZoneOffsetHours = HOURS.convert( TimeZone.getTimeZone(property(env, ""timezone"")).getOffset(currentTimeMillis()), MILLISECONDS);
 if (!Objects.equals(dbTimeZoneOffsetHours, propsTimeZoneOffsetHours)) {
throw new RuntimeException(""Database has unexpected time zone - hour offset in DB2 is "" + dbTimeZoneOffsetHours + "" but the expected hour offset based on timezone-property is "" + propsTimeZoneOffsetHours + "". Change the timezone-property to match with your DB2 time zone."");
 } } }",1
70368,"class _ { private SimpleReportEntry createReportEntry(TestIdentifier testIdentifier, Optional<Throwable> throwable) {
String className = getClassName(testIdentifier);
 StackTraceWriter traceWriter = new PojoStackTraceWriter(className, testIdentifier.getLegacyReportingName(), throwable.orElse(null));
  return new SimpleReportEntry(className, testIdentifier.getDisplayName(), traceWriter, null);
  } }","class _ { private SimpleReportEntry createReportEntry(TestIdentifier testIdentifier, Optional<Throwable> throwable) {
Optional<String> className = getClassName(testIdentifier);
 Optional<StackTraceWriter> stackTraceWriter = throwable.flatMap( t -> className.map(name -> new PojoStackTraceWriter(name, getMethodName(testIdentifier).orElse(""""), t)));
 String source = sourceLegacyReportingName(testIdentifier);
 return new SimpleReportEntry(source, testIdentifier.getLegacyReportingName(), stackTraceWriter.orElse(null), null);
 } }",1
70369,"class _ { public void close() {
Misc.free(writerPool);
 Misc.free(readerPool);
  if (null != backupWriterPool) {
 Misc.free(backupWriterPool);
 } } }","class _ { public void close() {
Misc.free(writerPool);
 Misc.free(readerPool);
 } }",1
70372,"class _ { void forceRefresh(M model) {
if (model instanceof SearchableListModel) {
UICommand lastExecutedCommand = model.getLastExecutedCommand();
 if (lastExecutedCommand != null && !lastExecutedCommand.getIsCancel()) {
SearchableListModel searchableList = (SearchableListModel) model;
  searchableList.getForceRefreshCommand().execute();
  } } } }","class _ { void forceRefresh(M model) {
if (model instanceof SearchableListModel) {
UICommand lastExecutedCommand = model.getLastExecutedCommand();
 if (lastExecutedCommand != null && !lastExecutedCommand.getIsCancel()) {
SearchableListModel searchableList = (SearchableListModel) model;
 searchableList.forceRefresh();
 } } } }",1
70374,"class _ { public AttributeValueSearch(IAttributeType attributeType, String attributeValue) {
this.attributeType = attributeType;
 this.attributeValue = attributeValue;
  Conditions.checkNotNull(attributeType, ""attributeType"");
 Conditions.checkNotNullOrEmpty(attributeValue, ""attributeValue"");
  } }","class _ { public AttributeValueSearch(IAttributeType attributeType, String attributeValue) {
Conditions.checkNotNull(attributeType, ""attributeType"");
 Conditions.checkNotNullOrEmpty(attributeValue, ""attributeValue"");
 this.attributeType = attributeType;
 this.attributeValue = attributeValue;
 } }",1
70375,"class _ { public List<ContextMenuItem> getDefaultItems() {
String idScheme = getIdScheme();
 List<ContextMenuItem> items = new ArrayList<>();
 for (ContextMenuItem item : this.items) {
String id = item.getId();
  if (id != null && (id.startsWith(idScheme) && !APP_PROFILES_ID.equals(id) || id.startsWith(AIDL_LAYERS_PREFIX))) {
 items.add(item);
 } } return items;
 } }","class _ { public List<ContextMenuItem> getDefaultItems() {
String idScheme = getIdScheme();
 List<ContextMenuItem> items = new ArrayList<>();
 for (ContextMenuItem item : this.items) {
String id = item.getId();
 if (id != null && (id.startsWith(idScheme))) {
items.add(item);
 } } return items;
 } }",1
70388,"class _ { protected String getDataProfileFromNameSpace(NameSpace nameSpace) {
switch (nameSpace) {
case STATION: return Profile.STATION.toString();
 case SIMPLE_STATION: case STATION_KML: return Profile.SIMPLE_STATION.toString();
 case SUMMARY_STATION: return Profile.SUMMARY_STATION.toString();
 case SUMMARY_ORGANIZATION:  return Profile.SUMMARY_STATION.toString();
  case PROJECT: return Profile.PROJECT.toString();
 case PROJECT_MONITORING_LOCATION_WEIGHTING: return Profile.PROJECT_MONITORING_LOCATION_WEIGHTING.toString();
 case ACTIVITY: return Profile.ACTIVITY.toString();
 case ACTIVITY_METRIC: return Profile.ACTIVITY_METRIC.toString();
 case RESULT: return Profile.PC_RESULT.toString();
 case BIOLOGICAL_RESULT: return Profile.BIOLOGICAL.toString();
 case NARROW_RESULT: return Profile.NARROW_RESULT.toString();
 case RES_DETECT_QNT_LMT: return Profile.RES_DETECT_QNT_LMT.toString();
 default: return null;
 } } }","class _ { protected String getDataProfileFromNameSpace(NameSpace nameSpace) {
switch (nameSpace) {
case STATION: return Profile.STATION.toString();
 case SIMPLE_STATION: case STATION_KML: return Profile.SIMPLE_STATION.toString();
 case SUMMARY_STATION: return Profile.SUMMARY_STATION.toString();
 case SUMMARY_ORGANIZATION: return Profile.SUMMARY_ORGANIZATION.toString();
 case PROJECT: return Profile.PROJECT.toString();
 case PROJECT_MONITORING_LOCATION_WEIGHTING: return Profile.PROJECT_MONITORING_LOCATION_WEIGHTING.toString();
 case ACTIVITY: return Profile.ACTIVITY.toString();
 case ACTIVITY_METRIC: return Profile.ACTIVITY_METRIC.toString();
 case RESULT: return Profile.PC_RESULT.toString();
 case BIOLOGICAL_RESULT: return Profile.BIOLOGICAL.toString();
 case NARROW_RESULT: return Profile.NARROW_RESULT.toString();
 case RES_DETECT_QNT_LMT: return Profile.RES_DETECT_QNT_LMT.toString();
 default: return null;
 } } }",1
70389,"class _ { public FileStructureView(NodeFactory nodeFactory) {
this.nodeFactory = nodeFactory;
 NodeStorage storage = new NodeStorage(  new NodeUniqueKeyProvider() {
 @Override public String getKey(@NotNull Node item) {
return String.valueOf(item.hashCode());
 } });
 NodeLoader loader = new NodeLoader(Collections.<NodeInterceptor>emptySet());
 tree = new FileStructureTree(storage, loader);
 UI_BINDER.createAndBindUi(this);
 tree.setAutoExpand(false);
 tree.getSelectionModel().setSelectionMode(SINGLE);
 } }","class _ { public FileStructureView(NodeFactory nodeFactory) {
this.nodeFactory = nodeFactory;
 NodeStorage storage = new NodeStorage(item->String.valueOf(item.hashCode()));
 NodeLoader loader = new NodeLoader(Collections.<NodeInterceptor>emptySet());
 tree = new FileStructureTree(storage, loader);
 UI_BINDER.createAndBindUi(this);
 tree.setAutoExpand(false);
 tree.getSelectionModel().setSelectionMode(SINGLE);
 } }",1
70390,"class _ { public static ISerializer getSerializer(Byte type) {
if (type <= SYSTEM_SERIALIZERS_COUNT) {
if (serializersMap.containsKey(type)) {
return serializersMap.get(type);
 } } else {
if (customSerializers.containsKey(type)) {
return customSerializers.get(type);
 } } String message = String.format(""Serializer with type code %s not found. "" + ""Please check custom serializers for this client."", type.intValue());
 log.error(message);
  throw new RuntimeException(message);
  } }","class _ { public static ISerializer getSerializer(Byte type) {
if (type <= SYSTEM_SERIALIZERS_COUNT) {
if (serializersMap.containsKey(type)) {
return serializersMap.get(type);
 } } else if (customSerializers.containsKey(type)) {
return customSerializers.get(type);
 } log.error(""Serializer with type code {} not found. Please check custom serializers "" + ""for this client."", type.intValue());
 throw new SerializerException(type);
 } }",1
70394,"class _ { private static void extractToDirectory(File directory, JarInputStream input) throws IOException {
File manifestFile = new File(directory, JarFile.MANIFEST_NAME);
 manifestFile.getParentFile().mkdirs();
 input.getManifest().write(new FileOutputStream(manifestFile));
 JarEntry entry = input.getNextJarEntry();
 while (entry != null) {
File newFile = new File(directory, entry.getName());
 if (entry.isDirectory()) {
newFile.mkdirs();
 } else {
FileOutputStream fileoutputstream = new FileOutputStream(newFile);
 IOUtils.copy(input, fileoutputstream);
  fileoutputstream.close();
  } input.closeEntry();
 entry = input.getNextJarEntry();
 } } }","class _ { private static void extractToDirectory(File directory, JarInputStream input) throws IOException {
File manifestFile = new File(directory, JarFile.MANIFEST_NAME);
 manifestFile.getParentFile().mkdirs();
 try (FileOutputStream output = new FileOutputStream(manifestFile)) {
input.getManifest().write(output);
 } JarEntry entry = input.getNextJarEntry();
 while (entry != null) {
File newFile = new File(directory, entry.getName());
 if (entry.isDirectory()) {
newFile.mkdirs();
 } else {
try (FileOutputStream output = new FileOutputStream(newFile)) {
IOUtils.copy(input, output);
 } } input.closeEntry();
 entry = input.getNextJarEntry();
 } } }",1
70395,"class _ { public boolean isQueryCacheable(Query query) {
 return !query.isDescending() && !unCacheable.contains(query.getType());
  } }","class _ { public boolean isQueryCacheable(Query query) {
return !unCacheable.contains(query.getType());
 } }",1
70396,"class _ { public void test_isFocusControl() throws InterruptedException {
assertFalse(control.isFocusControl());
 shell.open();
 processEvents(5000, () -> shell.getDisplay().getActiveShell() == shell);
  assertEquals(""Unexpected focus"", control.forceFocus(), control.isFocusControl());
  } }","class _ { public void test_isFocusControl() {
assertFalse(control.isFocusControl());
 shell.open();
 if (SwtTestUtil.isGTK) {
shell.forceActive();
 } assertEquals(shell, shell.getDisplay().getActiveShell());
 assertEquals(""Unexpected focus"", control.forceFocus(), control.isFocusControl());
 } }",1
70405,"class _ { public void testWriter() throws SQLException {
DbState writer = DbState.writer(DbState.driverManager(""jdbc:h2:mem:""));
 DB<Unit> setup = new DB<Unit>() {
@Override public Unit run(Connection c) throws SQLException {
Statement s = c.createStatement();
 assertThat(s.executeUpdate(""CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))""), is(0));
 assertThat(s.executeUpdate(""INSERT INTO TEST (ID, NAME) VALUES (10, 'FOO')""), is (1));
 return Unit.unit();
 } };
 DB<Option<Integer>> query = new DB<Option<Integer>>() {
@Override public Option<Integer> run(Connection c) throws SQLException {
PreparedStatement ps = c.prepareStatement(""SELECT ID FROM TEST WHERE NAME = ?"");
 ps.setString(1, ""FOO"");
 ResultSet rs = ps.executeQuery();
 if (rs.next()) {
return Option.some(rs.getInt(""ID""));
 } else {
return Option.none();
 } } };
  assertThat(writer.run(setup.bind(v -> query)).some(), is(10));
  } }","class _ { public void testWriter() throws SQLException {
final int TEN = 10;
 DbState writer = DbState.writer(DbState.driverManager(""jdbc:h2:mem:""));
 DB<Unit> setup = new DB<Unit>() {
@Override public Unit run(Connection c) throws SQLException {
Statement s = null;
 try {
s = c.createStatement();
 assertThat(s.executeUpdate(""CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))""), is(0));
 assertThat(s.executeUpdate(""INSERT INTO TEST (ID, NAME) VALUES ("" + TEN + "", 'FOO')""), is(1));
 } finally {
DbUtils.closeQuietly(s);
 } return Unit.unit();
 } };
 DB<Option<Integer>> query = new DB<Option<Integer>>() {
@Override public Option<Integer> run(Connection c) throws SQLException {
PreparedStatement ps = null;
 ResultSet rs = null;
 try {
ps = c.prepareStatement(""SELECT ID FROM TEST WHERE NAME = ?"");
 ps.setString(1, ""FOO"");
 rs = ps.executeQuery();
 if (rs.next()) {
return Option.some(rs.getInt(""ID""));
 } else {
return Option.none();
 } } finally {
DbUtils.closeQuietly(rs);
 DbUtils.closeQuietly(ps);
 } } };
 assertThat(writer.run(setup.bind(v -> query)).some(), is(TEN));
 } }",1
70407,"class _ { public void shouldEncryptPluggablePublishArtifactPropertiesDuringSave() throws Exception {
setupMetadataForPlugin();
 ArtifactStore artifactStore = new ArtifactStore(""dockerhub"", ""cd.go.artifact.docker.registry"");
 artifactStoreService.create(Username.ANONYMOUS, artifactStore, new HttpLocalizedOperationResult());
 File configFile = new File(new SystemEnvironment().getCruiseConfigFile());
 String config = IOUtils.toString(getClass().getResourceAsStream(""/data/pluggable_artifacts_with_params.xml""), UTF_8);
 FileUtils.writeStringToFile(configFile, config, UTF_8);
 cachedGoConfig.forceReload();
 Configuration ancestorPluggablePublishAftifactConfigAfterEncryption = goConfigDao.loadConfigHolder() .configForEdit.pipelineConfigByName(new CaseInsensitiveString(""ancestor"")) .getExternalArtifactConfigs().get(0).getConfiguration();
 assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getValue(), is(""SECRET""));
  assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getEncryptedValue(), startsWith(""AES:""));
  assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getConfigValue(), is(CoreMatchers.nullValue()));
 } }","class _ { public void shouldEncryptPluggablePublishArtifactPropertiesDuringSave() throws Exception {
resetCipher.setupAESCipherFile();
 resetCipher.setupDESCipherFile();
 setupMetadataForPlugin();
 ArtifactStore artifactStore = new ArtifactStore(""dockerhub"", ""cd.go.artifact.docker.registry"");
 artifactStoreService.create(Username.ANONYMOUS, artifactStore, new HttpLocalizedOperationResult());
 File configFile = new File(new SystemEnvironment().getCruiseConfigFile());
 String config = IOUtils.toString(getClass().getResourceAsStream(""/data/pluggable_artifacts_with_params.xml""), UTF_8);
 FileUtils.writeStringToFile(configFile, config, UTF_8);
 cachedGoConfig.forceReload();
 Configuration ancestorPluggablePublishAftifactConfigAfterEncryption = goConfigDao.loadConfigHolder() .configForEdit.pipelineConfigByName(new CaseInsensitiveString(""ancestor"")) .getExternalArtifactConfigs().get(0).getConfiguration();
 assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getValue(), is(""SECRET""));
 assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getEncryptedValue(), is(new GoCipher().encrypt(""SECRET"")));
 assertThat(ancestorPluggablePublishAftifactConfigAfterEncryption.getProperty(""Image"").getConfigValue(), is(CoreMatchers.nullValue()));
 } }",1
70410,"class _ { protected void doRun(IProgressMonitor monitor) throws CoreException {
 if (monitor == null) {
monitor = new NullProgressMonitor();
 }  SubMonitor progress = SubMonitor.convert(monitor, MakeUIPlugin.getResourceString(""MakeCCWizard.task_name""), 10);
 super.doRun(progress.split(9));
 if (newProject != null) {
CCorePlugin.getDefault().convertProjectFromCtoCC(newProject, progress.split(1));
 } monitor.done();
 } }","class _ { protected void doRun(IProgressMonitor monitor) throws CoreException {
SubMonitor progress = SubMonitor.convert(monitor, MakeUIPlugin.getResourceString(""MakeCCWizard.task_name""), 10);
 super.doRun(progress.split(9));
 if (newProject != null) {
CCorePlugin.getDefault().convertProjectFromCtoCC(newProject, progress.split(1));
 } else progress.worked(1);
 } }",1
70411,"class _ { private ResultSet getNextResultSet() {
closeCurrentResultSet();
 if (!tableIds.hasNext()) {
return null;
 } Long tableId = tableIds.next();
 Long columnId = metadataDao.getTemporalColumnId(tableId);
 String minColumn = ""null"";
 String maxColumn = ""null"";
 if (columnId != null) {
Type columnType = metadataDao.getTableColumn(tableId, columnId).getDataType();
  checkState(columnType.equals(DATE) || columnType.equals(TIMESTAMP), ""Temporal column must be of type timestamp or date: "" + columnType);
  if (columnType.equals(DATE)) {
minColumn = convertDaysToMidnightTimestamp(minColumn(columnId));
 maxColumn = convertDaysToMidnightTimestamp(maxColumn(columnId));
 } else {
minColumn = minColumn(columnId);
 maxColumn = maxColumn(columnId);
 } } List<String> columnNames = getMappedColumnNames(minColumn, maxColumn);
 try {
connection = dbi.open().getConnection();
 statement = PreparedStatementBuilder.create( connection, constructSqlTemplate(columnNames, tableId), columnNames, TYPES, ImmutableSet.of(getColumnIndex(SHARD_METADATA, SHARD_UUID)), tupleDomain);
 return statement.executeQuery();
 } catch (SQLException | DBIException e) {
close();
 throw metadataError(e);
 } } }","class _ { private ResultSet getNextResultSet() {
closeCurrentResultSet();
 if (!tableIds.hasNext()) {
return null;
 } Long tableId = tableIds.next();
 Long columnId = metadataDao.getTemporalColumnId(tableId);
 String minColumn = ""null"";
 String maxColumn = ""null"";
 if (columnId != null) {
Type columnType = metadataDao.getTableColumn(tableId, columnId).getDataType();
 checkState(columnType.equals(DATE) || columnType.equals(TIMESTAMP), ""Temporal column must be of type timestamp or date: %s"", columnType);
 if (columnType.equals(DATE)) {
minColumn = convertDaysToMidnightTimestamp(minColumn(columnId));
 maxColumn = convertDaysToMidnightTimestamp(maxColumn(columnId));
 } else {
minColumn = minColumn(columnId);
 maxColumn = maxColumn(columnId);
 } } List<String> columnNames = getMappedColumnNames(minColumn, maxColumn);
 try {
connection = dbi.open().getConnection();
 statement = PreparedStatementBuilder.create( connection, constructSqlTemplate(columnNames, tableId), columnNames, TYPES, ImmutableSet.of(getColumnIndex(SHARD_METADATA, SHARD_UUID)), tupleDomain);
 return statement.executeQuery();
 } catch (SQLException | DBIException e) {
close();
 throw metadataError(e);
 } } }",1
70416,"class _ { public boolean contains(Command command) {
final Message message = Commands.getMessage(command);
 if (messages.contains(message)) {
final int messageIndex = messages.indexOf(message);
 final CommandContext actualContext = command.getContext();
  final CommandContext expectedContext = contexts.get(messageIndex);
  return actualContext.equals(expectedContext);
 } return false;
 } }","class _ { public boolean contains(Command command) {
final Message message = Commands.getMessage(command);
 if (messages.contains(message)) {
final int messageIndex = messages.indexOf(message);
 final CommandContext actualContext = command.getContext();
 final CommandContext storedContext = contexts.get(messageIndex);
 return actualContext.equals(storedContext);
 } return false;
 } }",1
70419,"class _ { public void testGetProjectedSchema1() throws Exception {
MessageType originalMsg = MessageTypeParser.parseMessageType( ""message hive_schema {\n"" + "" optional group structCol {\n"" + "" optional int32 a;
\n"" + "" optional double b;
\n"" + "" optional boolean c;
\n"" + "" optional fixed_len_byte_array(3) d (DECIMAL(5,2));
\n"" + "" }\n"" + ""}\n"");
 testConversion(""structCol"", ""struct<a:int>"", DataWritableReadSupport .getProjectedSchema(originalMsg, Arrays.asList(""structCol""), Arrays.asList(0),  new HashSet<>(Arrays.asList(""structCol.a""))).toString());
  } }","class _ { public void testGetProjectedSchema1() throws Exception {
MessageType originalMsg = MessageTypeParser.parseMessageType( ""message hive_schema {\n"" + "" optional group structCol {\n"" + "" optional int32 a;
\n"" + "" optional double b;
\n"" + "" optional boolean c;
\n"" + "" optional fixed_len_byte_array(3) d (DECIMAL(5,2));
\n"" + "" }\n"" + ""}\n"");
 testConversion(""structCol"", ""struct<a:int>"", DataWritableReadSupport .getProjectedSchema(originalMsg, Arrays.asList(""structCol""), Arrays.asList(0), Sets.newHashSet(""structCol.a"")).toString());
 } }",1
70420,"class _ { public void complete() {
if (completed || subscriber.isUnsubscribed()) {
return;
 } try {
super.complete();
 if (getOutput() != null) {
 if (getOutput().hasError()) {
 subscriber.onError(new RedisCommandExecutionException(getOutput().getError()));
 completed = true;
 return;
 } Object result = getOutput().get();
 if (!(getOutput() instanceof StreamingOutput<?>) && result != null) {
if (dissolve && result instanceof Collection) {
Collection<T> collection = (Collection<T>) result;
 for (T t : collection) {
subscriber.onNext(t);
 } } else {
subscriber.onNext((T) result);
 } } } subscriber.onCompleted();
 } finally {
completed = true;
 } } }","class _ { public void complete() {
if (completed || subscriber.isUnsubscribed()) {
return;
 } try {
super.complete();
 if (getOutput() != null) {
Object result = getOutput().get();
 if (!(getOutput() instanceof StreamingOutput<?>) && result != null) {
if (dissolve && result instanceof Collection) {
Collection<T> collection = (Collection<T>) result;
 for (T t : collection) {
subscriber.onNext(t);
 } } else {
subscriber.onNext((T) result);
 } } if (getOutput().hasError()) {
subscriber.onError(new RedisCommandExecutionException(getOutput().getError()));
 completed = true;
 return;
 } } subscriber.onCompleted();
 } finally {
completed = true;
 } } }",1
70421,"class _ {  public void queryFile2FullHistory() throws CoreException {
 final List<RevCommit> expectedHistory = Arrays.asList(masterCommit2, masterCommit3);
 for (RevCommit ref : commits) {
testRepository.checkoutBranch(ref.getName());
 final IFileHistory history = historyProvider.getFileHistoryFor( iFile2, IFileHistoryProvider.NONE, new NullProgressMonitor());
 assertNotNull(history);
 final IFileRevision[] revisions = history.getFileRevisions();
 assertEquals(2, revisions.length);
 final List<RevCommit> commitList = new ArrayList<RevCommit>( expectedHistory);
 assertMatchingRevisions(Arrays.asList(revisions), commitList);
 } } }","class _ { public void queryFile2FullHistory() throws CoreException {
final List<RevCommit> expectedHistory = Arrays.asList(masterCommit2, masterCommit3);
 assertFullHistoryMatches(iFile2, expectedHistory);
 } }",1
70422,"class _ { protected void executeVdsBrokerCommand() {
if (getParameters().getAction() == FenceActionType.STATUS || !isAlreadyInRequestedStatus()) {
_result = fenceNode( getParameters().getAction(),  getParameters().getAction() !=  FenceActionType.STATUS);
 getVDSReturnValue().setSucceeded(false);
 if (getParameters().getAction() == FenceActionType.STATUS && _result.power != null) {
String stat = _result.power.toLowerCase();
 String msg = _result.mStatus.mMessage;
 if (""on"".equals(stat) || ""off"".equals(stat)) {
getVDSReturnValue().setSucceeded(true);
 } else {
if (!getParameters().getTargetVdsID().equals(Guid.Empty)) {
alertPowerManagementStatusFailed(msg);
 } } FenceStatusReturnValue fenceStatusReturnValue = new FenceStatusReturnValue(stat, msg);
 setReturnValue(fenceStatusReturnValue);
 } else {
FenceStatusReturnValue fenceStatusReturnValue = new FenceStatusReturnValue( _result.operationStatus, _result.mStatus.mMessage != null ? _result.mStatus.mMessage : """" );
 setReturnValue(fenceStatusReturnValue);
 getVDSReturnValue().setSucceeded(_result.mStatus.mCode == 0);
 } } else {
alertActionSkippedAlreadyInStatus();
 getVDSReturnValue().setSucceeded(true);
 setReturnValue(new FenceStatusReturnValue(FenceStatusReturnValue.SKIPPED_DUE_TO_STATUS, """"));
 } } }","class _ { protected void executeVdsBrokerCommand() {
if (getParameters().getAction() == FenceActionType.STATUS || !isAlreadyInRequestedStatus()) {
_result = fenceNode(getParameters().getAction());
 getVDSReturnValue().setSucceeded(false);
 if (getParameters().getAction() == FenceActionType.STATUS && _result.power != null) {
String stat = _result.power.toLowerCase();
 String msg = _result.mStatus.mMessage;
 if (""on"".equals(stat) || ""off"".equals(stat)) {
getVDSReturnValue().setSucceeded(true);
 } else {
if (!getParameters().getTargetVdsID().equals(Guid.Empty)) {
alertPowerManagementStatusFailed(msg);
 } } FenceStatusReturnValue fenceStatusReturnValue = new FenceStatusReturnValue(stat, msg);
 setReturnValue(fenceStatusReturnValue);
 } else {
FenceStatusReturnValue fenceStatusReturnValue = new FenceStatusReturnValue( _result.operationStatus, _result.mStatus.mMessage != null ? _result.mStatus.mMessage : """" );
 setReturnValue(fenceStatusReturnValue);
 getVDSReturnValue().setSucceeded(_result.mStatus.mCode == 0);
 } } else {
alertActionSkippedAlreadyInStatus();
 getVDSReturnValue().setSucceeded(true);
 setReturnValue(new FenceStatusReturnValue(FenceStatusReturnValue.SKIPPED_DUE_TO_STATUS, """"));
 } } }",1
70423,"class _ { private <T extends Timestamped> T deserialize(StorageObject object, Class<T> clas, boolean current_version) throws java.io.UnsupportedEncodingException {
try {
ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
 Storage.Objects.Get getter = obj_api.get(object.getBucket(), object.getName());
 if (!current_version) {
getter.setGeneration(object.getGeneration());
 } Closure timeExecuteClosure = new Closure<String>(this, this) {
public Object doCall() throws Exception {
mediaDownloadTimer.record(new Callable() {
public Void call() throws Exception {
getter.executeMediaAndDownloadTo(output);
 return null;
 } });
 return Closure.DONE;
 } };
 doRetry(timeExecuteClosure, ""deserialize"", object.getName());
 String json = output.toString(""UTF8"");
 return objectMapper.readValue(json, clas);
 } catch (Exception ex) {
if (current_version) {
log.error(""Error reading {}: {}"", value(""object"", object.getName()), ex.getMessage());
 } else {
log.error(""Error reading {} generation={}: {}"", value(""object"", object.getName()), value(""generation"", object.getGeneration()),  ex.getMessage());
  } return null;
 } } }","class _ { private <T extends Timestamped> T deserialize(StorageObject object, Class<T> clas, boolean current_version) throws java.io.UnsupportedEncodingException {
try {
ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
 Storage.Objects.Get getter = obj_api.get(object.getBucket(), object.getName());
 if (!current_version) {
getter.setGeneration(object.getGeneration());
 } Closure timeExecuteClosure = new Closure<String>(this, this) {
public Object doCall() throws Exception {
mediaDownloadTimer.record(new Callable() {
public Void call() throws Exception {
getter.executeMediaAndDownloadTo(output);
 return null;
 } });
 return Closure.DONE;
 } };
 doRetry(timeExecuteClosure, ""deserialize"", object.getName());
 String json = output.toString(""UTF8"");
 return objectMapper.readValue(json, clas);
 } catch (Exception ex) {
if (current_version) {
log.error(""Error reading {}: "", value(""object"", object.getName()), ex);
 } else {
log.error(""Error reading {} generation={}: "", value(""object"", object.getName()), value(""generation"", object.getGeneration()), ex);
 } return null;
 } } }",1
70424,"class _ { public synchronized Optional<ModelType> insertBlocking(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {
final ContentValues values = databaseAdapter.write(modelType, databaseOperationMetadata);
 if (!values.containsKey(COLUMN_UUID) || UUID.fromString(values.getAsString(COLUMN_UUID)).equals(Keyed.Companion.getMISSING_UUID())) {
 values.put(COLUMN_UUID, UUID.randomUUID().toString());
  } UUID uuid = UUID.fromString(values.getAsString(COLUMN_UUID));
 if (getWritableDatabase().insertOrThrow(getTableName(), null, values) != -1) {
if (Integer.class.equals(primaryKey.getPrimaryKeyClass())) {
Cursor cursor = null;
 try {
cursor = getReadableDatabase().rawQuery(""SELECT last_insert_rowid()"", null);
 final Integer id;
 if (cursor != null && cursor.moveToFirst() && cursor.getColumnCount() > 0) {
id = cursor.getInt(0);
 } else {
id = -1;
 } final PrimaryKey<ModelType, PrimaryKeyType> autoIncrementPrimaryKey = (PrimaryKey<ModelType, PrimaryKeyType>) new AutoIncrementIdPrimaryKey<>((PrimaryKey<ModelType, Integer>) primaryKey, id);
 final ModelType insertedItem = databaseAdapter.build(modelType, autoIncrementPrimaryKey, uuid, databaseOperationMetadata);
 if (cachedResults != null) {
cachedResults.add(insertedItem);
 if (insertedItem instanceof Comparable<?>) {
Collections.sort((List<? extends Comparable>) cachedResults);
 } } return Optional.of(insertedItem);
 } finally {
if (cursor != null) {
cursor.close();
 } } } else {
final ModelType insertedItem = databaseAdapter.build(modelType, primaryKey, uuid, databaseOperationMetadata);
 if (cachedResults != null) {
cachedResults.add(insertedItem);
 if (insertedItem instanceof Comparable<?>) {
Collections.sort((List<? extends Comparable>) cachedResults);
 } } return Optional.of(insertedItem);
 } } else {
return Optional.absent();
 } } }","class _ { public synchronized Optional<ModelType> insertBlocking(@NonNull ModelType modelType, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {
final ContentValues values = databaseAdapter.write(modelType, databaseOperationMetadata);
 if (!values.containsKey(COLUMN_UUID) || UUID.fromString(values.getAsString(COLUMN_UUID)).equals(Keyed.Companion.getMISSING_UUID())) {
Logger.warn(this, ""Assigning random UUID to new model before inserting"");
 values.put(COLUMN_UUID, UUID.randomUUID().toString());
 } UUID uuid = UUID.fromString(values.getAsString(COLUMN_UUID));
 if (getWritableDatabase().insertOrThrow(getTableName(), null, values) != -1) {
if (Integer.class.equals(primaryKey.getPrimaryKeyClass())) {
Cursor cursor = null;
 try {
cursor = getReadableDatabase().rawQuery(""SELECT last_insert_rowid()"", null);
 final Integer id;
 if (cursor != null && cursor.moveToFirst() && cursor.getColumnCount() > 0) {
id = cursor.getInt(0);
 } else {
id = -1;
 } final PrimaryKey<ModelType, PrimaryKeyType> autoIncrementPrimaryKey = (PrimaryKey<ModelType, PrimaryKeyType>) new AutoIncrementIdPrimaryKey<>((PrimaryKey<ModelType, Integer>) primaryKey, id);
 final ModelType insertedItem = databaseAdapter.build(modelType, autoIncrementPrimaryKey, uuid, databaseOperationMetadata);
 if (cachedResults != null) {
cachedResults.add(insertedItem);
 if (insertedItem instanceof Comparable<?>) {
Collections.sort((List<? extends Comparable>) cachedResults);
 } } return Optional.of(insertedItem);
 } finally {
if (cursor != null) {
cursor.close();
 } } } else {
final ModelType insertedItem = databaseAdapter.build(modelType, primaryKey, uuid, databaseOperationMetadata);
 if (cachedResults != null) {
cachedResults.add(insertedItem);
 if (insertedItem instanceof Comparable<?>) {
Collections.sort((List<? extends Comparable>) cachedResults);
 } } return Optional.of(insertedItem);
 } } else {
return Optional.absent();
 } } }",1
70427,"class _ { public ResultScanner getScanner(Scan scan) throws IOException {
LOG.trace(""getScanner(Scan)"");
 com.google.cloud.bigtable.grpc.scanner.ResultScanner<FlatRow> scanner = null;
 try {
scanner = client.readFlatRows(hbaseAdapter.adapt(scan));
 if (hasWhileMatchFilter(scan.getFilter())) {
return Adapters.BIGTABLE_WHILE_MATCH_RESULT_RESULT_SCAN_ADAPTER.adapt(scanner);
 } return Adapters.BIGTABLE_RESULT_SCAN_ADAPTER.adapt(scanner);
 } catch (Throwable throwable) {
LOG.error(""Encountered exception when executing getScanner."", throwable);
 if (scanner != null) {
scanner.close();
  }  throw new IOException( makeGenericExceptionMessage( ""getScanner"", options.getProjectId(), tableName.getQualifierAsString()), throwable);
 } } }","class _ { public ResultScanner getScanner(Scan scan) throws IOException {
LOG.trace(""getScanner(Scan)"");
 try {
com.google.cloud.bigtable.grpc.scanner.ResultScanner<FlatRow> scanner = client.readFlatRows(hbaseAdapter.adapt(scan));
 if (hasWhileMatchFilter(scan.getFilter())) {
return Adapters.BIGTABLE_WHILE_MATCH_RESULT_RESULT_SCAN_ADAPTER.adapt(scanner);
 } return Adapters.BIGTABLE_RESULT_SCAN_ADAPTER.adapt(scanner);
 } catch (Throwable throwable) {
LOG.error(""Encountered exception when executing getScanner."", throwable);
 throw new IOException( makeGenericExceptionMessage( ""getScanner"", options.getProjectId(), tableName.getQualifierAsString()), throwable);
 } } }",1
70428,"class _ { private WaiterTimeoutCallback(final Callback<T> callback) {
_timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callback1) -> {
synchronized (_lock) {
_waiters.remove(this);
 _statsTracker.incrementWaiterTimedOut();
 } LOG.debug(""{}: failing waiter due to waiter timeout"", _poolName);
  callback1.onError(  new WaiterTimeoutException( ""Exceeded waiter timeout of "" + _waiterTimeout + ""ms: in Pool: ""+ _poolName));
 });
 } }","class _ { private WaiterTimeoutCallback(final Callback<T> callback) {
_timeout = new SingleTimeout<>(_timeoutExecutor, _waiterTimeout, TimeUnit.MILLISECONDS, callback, (callbackIfTimeout) -> {
synchronized (_lock) {
_waiters.remove(this);
 _statsTracker.incrementWaiterTimedOut();
 } LOG.debug(""{}: failing waiter due to waiter timeout"", _poolName);
 callbackIfTimeout.onError( new WaiterTimeoutException( ""Exceeded waiter timeout of "" + _waiterTimeout + ""ms: in Pool: ""+ _poolName));
 });
 } }",1
70429,"class _ { private void storeValues() {
if (fCharsetEditor.presentsDefaultValue()) {
InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).remove(ICDebugConstants.PREF_DEBUG_CHARSET);
 } else {
fCharsetEditor.store();
 InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).put(ICDebugConstants.PREF_DEBUG_CHARSET, fCharsetEditor.getPreferenceStore().getString(ICDebugConstants.PREF_DEBUG_CHARSET));
 } if (fWideCharsetEditor.presentsDefaultValue()) {
InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).remove(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET);
 } else {
fWideCharsetEditor.store();
 InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).put(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET, fWideCharsetEditor.getPreferenceStore().getString(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET));
 } InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_FILES_IN_BINARIES, fShowBinarySourceFilesButton.getSelection());
 InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_NOT_FOUND_EDITOR, fShowSourceNotFoundEditor.getSelection());
  if (Platform.getPreferencesService().getBoolean(CCorePlugin.PLUGIN_ID, CCorePreferenceConstants.SHOW_SOURCE_NOT_FOUND_EDITOR, true, null)) {
 InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_NOT_FOUND_EDITOR_ALL_TIME, fShowSourceNotFoundAllTime.getSelection());
 } } }","class _ { private void storeValues() {
if (fCharsetEditor.presentsDefaultValue()) {
InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).remove(ICDebugConstants.PREF_DEBUG_CHARSET);
 } else {
fCharsetEditor.store();
 InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).put(ICDebugConstants.PREF_DEBUG_CHARSET, fCharsetEditor.getPreferenceStore().getString(ICDebugConstants.PREF_DEBUG_CHARSET));
 } if (fWideCharsetEditor.presentsDefaultValue()) {
InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).remove(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET);
 } else {
fWideCharsetEditor.store();
 InstanceScope.INSTANCE.getNode(CDebugCorePlugin.PLUGIN_ID).put(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET, fWideCharsetEditor.getPreferenceStore().getString(ICDebugConstants.PREF_DEBUG_WIDE_CHARSET));
 } InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_FILES_IN_BINARIES, fShowBinarySourceFilesButton.getSelection());
 InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_NOT_FOUND_EDITOR, !fShowSourceNotFoundEditor.getSelection());
 InstanceScope.INSTANCE.getNode(CCorePlugin.PLUGIN_ID).putBoolean( CCorePreferenceConstants.SHOW_SOURCE_NOT_FOUND_EDITOR_ALL_TIME, fShowSourceNotFoundAllTime.getSelection());
 } }",1
70431,"class _ { public Mono<CloseableChannel> start(ConnectionAcceptor acceptor, int mtu) {
Objects.requireNonNull(acceptor, ""acceptor must not be null"");
 return server .handle( (request, response) -> {
transportHeaders.get().forEach(response::addHeader);
 return response.sendWebsocket( null,  Math.max(DEFAULT_FRAME_SIZE, mtu == 0 ? FRAME_MAX_SIZE : mtu),  (in, out) -> {
DuplexConnection connection = new WebsocketDuplexConnection((Connection) in);
 if (mtu > 0) {
connection = new FragmentationDuplexConnection( connection, ByteBufAllocator.DEFAULT, mtu, false);
 } return acceptor.apply(connection).then(out.neverComplete());
 });
 }) .bind() .map(CloseableChannel::new);
 } }","class _ { public Mono<CloseableChannel> start(ConnectionAcceptor acceptor, int mtu) {
Objects.requireNonNull(acceptor, ""acceptor must not be null"");
 return server .handle( (request, response) -> {
transportHeaders.get().forEach(response::addHeader);
 return response.sendWebsocket( null, FRAME_LENGTH_MASK, (in, out) -> {
DuplexConnection connection = new WebsocketDuplexConnection((Connection) in);
 if (mtu > 0) {
connection = new FragmentationDuplexConnection( connection, ByteBufAllocator.DEFAULT, mtu, false);
 } return acceptor.apply(connection).then(out.neverComplete());
 });
 }) .bind() .map(CloseableChannel::new);
 } }",1
70435,"class _ { public void testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty() {
______TS(""Success case: No validation errors"");
 FeedbackMcqQuestionDetails mcqDetails = new FeedbackMcqQuestionDetails();
 HashMap<String, String[]> requestParams = new HashMap<>();
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_TYPE, new String[] {
""MCQ"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_TEXT, new String[] {
""mcq question text"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_GENERATED_OPTIONS, new String[] {
""NONE"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFCHOICECREATED, new String[] {
""2"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQCHOICE + ""-0"", new String[] {
""Choice 1"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQCHOICE + ""-1"", new String[] {
""Choice 2"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHTS_ASSIGNED, new String[] {
""on"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHT + ""-0"", new String[] {
""1.22"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHT + ""-1"", new String[] {
""1.55"" });
 assertTrue(mcqDetails.extractQuestionDetails(requestParams, FeedbackQuestionType.MCQ));
 assertTrue(mcqDetails.hasAssignedWeights());
 List<String> errors = mcqDetails.validateQuestionDetails(dummySessionToken);
 assertEquals(0, errors.size());
  }  }","class _ { public void testValidateQuestionDetails_noValidationError_errorListShouldBeEmpty() {
FeedbackMcqQuestionDetails mcqDetails = new FeedbackMcqQuestionDetails();
 HashMap<String, String[]> requestParams = new HashMap<>();
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_TYPE, new String[] {
""MCQ"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_TEXT, new String[] {
""mcq question text"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_GENERATED_OPTIONS, new String[] {
""NONE"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_NUMBEROFCHOICECREATED, new String[] {
""2"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQCHOICE + ""-0"", new String[] {
""Choice 1"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQCHOICE + ""-1"", new String[] {
""Choice 2"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_HAS_WEIGHTS_ASSIGNED, new String[] {
""on"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHT + ""-0"", new String[] {
""1.22"" });
 requestParams.put(Const.ParamsNames.FEEDBACK_QUESTION_MCQ_WEIGHT + ""-1"", new String[] {
""1.55"" });
 assertTrue(mcqDetails.extractQuestionDetails(requestParams, FeedbackQuestionType.MCQ));
 assertTrue(mcqDetails.hasAssignedWeights());
 List<String> errors = mcqDetails.validateQuestionDetails(dummySessionToken);
 assertEquals(0, errors.size());
 } }",1
70439,"class _ { void updateStats() throws Exception {
ConcurrentMap<Address, Map<String, Number>> resultMap = new ConcurrentHashMap<>();
 TriConsumer<Address, Map<String, Number>, Throwable> triConsumer = (a, v, t) -> {
if (t != null) {
 throw new CacheException(t);
  } if (a == null) {
a = LocalModeAddress.INSTANCE;
 } resultMap.put(a, v);
 };
 CompletableFuture<Void> future = clusterExecutor.submitConsumer(new DistributedCacheStatsCallable(cache.getName()), triConsumer);
 future.join();
 Collection<Map<String, Number>> responseList = resultMap.values();
 for (String att : LONG_ATTRIBUTES) putLongAttributes(responseList, att);
 putLongAttributesAverage(responseList, AVERAGE_WRITE_TIME);
 putLongAttributesAverage(responseList, AVERAGE_WRITE_TIME_NANOS);
 putLongAttributesAverage(responseList, AVERAGE_READ_TIME);
 putLongAttributesAverage(responseList, AVERAGE_READ_TIME_NANOS);
 putLongAttributesAverage(responseList, AVERAGE_REMOVE_TIME);
 putLongAttributesAverage(responseList, AVERAGE_REMOVE_TIME_NANOS);
 putLongAttributesAverage(responseList, OFF_HEAP_MEMORY_USED);
 putIntAttributes(responseList, NUMBER_OF_LOCKS_HELD);
 putIntAttributes(responseList, NUMBER_OF_LOCKS_AVAILABLE);
 putIntAttributesMax(responseList, REQUIRED_MIN_NODES);
 long numberOfEntriesInMemory = getCacheMode(cache).isReplicated() ? cache.getStats().getCurrentNumberOfEntriesInMemory() : (long) addDoubleAttributes(responseList, NUMBER_OF_ENTRIES_IN_MEMORY);
 statsMap.put(NUMBER_OF_ENTRIES_IN_MEMORY, numberOfEntriesInMemory);
 statsMap.put(NUMBER_OF_ENTRIES, cache.size());
 updateTimeSinceStart(responseList);
 updateRatios(responseList);
 } }","class _ { void updateStats() throws Exception {
ConcurrentMap<Address, Map<String, Number>> resultMap = new ConcurrentHashMap<>();
 TriConsumer<Address, Map<String, Number>, Throwable> triConsumer = (a, v, t) -> {
if (t != null) {
if (!(t instanceof SuspectException)) {
throw new CacheException(t);
 } return;
 } if (a == null) {
a = LocalModeAddress.INSTANCE;
 } resultMap.put(a, v);
 };
 CompletableFuture<Void> future = clusterExecutor.submitConsumer(new DistributedCacheStatsCallable(cache.getName()), triConsumer);
 future.join();
 Collection<Map<String, Number>> responseList = resultMap.values();
 for (String att : LONG_ATTRIBUTES) putLongAttributes(responseList, att);
 putLongAttributesAverage(responseList, AVERAGE_WRITE_TIME);
 putLongAttributesAverage(responseList, AVERAGE_WRITE_TIME_NANOS);
 putLongAttributesAverage(responseList, AVERAGE_READ_TIME);
 putLongAttributesAverage(responseList, AVERAGE_READ_TIME_NANOS);
 putLongAttributesAverage(responseList, AVERAGE_REMOVE_TIME);
 putLongAttributesAverage(responseList, AVERAGE_REMOVE_TIME_NANOS);
 putLongAttributesAverage(responseList, OFF_HEAP_MEMORY_USED);
 putIntAttributes(responseList, NUMBER_OF_LOCKS_HELD);
 putIntAttributes(responseList, NUMBER_OF_LOCKS_AVAILABLE);
 putIntAttributesMax(responseList, REQUIRED_MIN_NODES);
 long numberOfEntriesInMemory = getCacheMode(cache).isReplicated() ? cache.getStats().getCurrentNumberOfEntriesInMemory() : (long) addDoubleAttributes(responseList, NUMBER_OF_ENTRIES_IN_MEMORY);
 statsMap.put(NUMBER_OF_ENTRIES_IN_MEMORY, numberOfEntriesInMemory);
 statsMap.put(NUMBER_OF_ENTRIES, cache.size());
 updateTimeSinceStart(responseList);
 updateRatios(responseList);
 } }",1
70441,"class _ { public String toString() {
 return ""FilterSupportStatus{"" +  ""isSupported="" + isSupported + "", reason='"" + reason + '\'' + '}';
 } }","class _ { public String toString() {
return String.format( ""FilterSupportStatus{isSupported=%s, reason='%s'}"", isSupported, reason);
 } }",1
70447,"class _ { protected void testAccessControl() throws Exception {
InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(""instructor1OfCourse1"");
 FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1"");
 loginAsInstructor(instructor1OfCourse1.googleId);
  ______TS(""non-existent feedback session"");
  String[] nonExistParams = new String[] {
Const.ParamsNames.COURSE_ID, session1InCourse1.getCourseId(), Const.ParamsNames.FEEDBACK_SESSION_NAME, ""abcRandomSession"", };
 verifyCannotAccess(nonExistParams);
 ______TS(""inaccessible without ModifySessionPrivilege"");
 String[] params = new String[] {
Const.ParamsNames.COURSE_ID, session1InCourse1.getCourseId(), Const.ParamsNames.FEEDBACK_SESSION_NAME, session1InCourse1.getFeedbackSessionName(), };
 verifyInaccessibleWithoutModifySessionPrivilege(params);
 ______TS(""only instructors of the same course can access"");
 verifyOnlyInstructorsOfTheSameCourseCanAccess(params);
 } }","class _ { protected void testAccessControl() throws Exception {
InstructorAttributes instructor1OfCourse1 = typicalBundle.instructors.get(""instructor1OfCourse1"");
 FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1"");
 loginAsInstructor(instructor1OfCourse1.googleId);
 ______TS(""non-existent course"");
 String[] nonExistParams = new String[] {
Const.ParamsNames.COURSE_ID, ""abcRandomCourseId"", Const.ParamsNames.FEEDBACK_SESSION_NAME, session1InCourse1.getFeedbackSessionName(), };
 verifyCannotAccess(nonExistParams);
 ______TS(""non-existent feedback session"");
 nonExistParams = new String[] {
Const.ParamsNames.COURSE_ID, session1InCourse1.getCourseId(), Const.ParamsNames.FEEDBACK_SESSION_NAME, ""abcRandomSession"", };
 verifyCannotAccess(nonExistParams);
 ______TS(""inaccessible without ModifySessionPrivilege"");
 String[] params = new String[] {
Const.ParamsNames.COURSE_ID, session1InCourse1.getCourseId(), Const.ParamsNames.FEEDBACK_SESSION_NAME, session1InCourse1.getFeedbackSessionName(), };
 verifyInaccessibleWithoutModifySessionPrivilege(params);
 ______TS(""only instructors of the same course can access"");
 verifyOnlyInstructorsOfTheSameCourseCanAccess(params);
 } }",1
70448,"class _ { public void execute() throws MojoExecutionException, MojoFailureException {
try {
File sourceFatJar = getTargetFile();
 thin(sourceFatJar);
 } catch (Exception e) {
 throw new MojoExecutionException(e.getMessage());
  } } }","class _ { public void execute() throws MojoExecutionException, MojoFailureException {
try {
File sourceFatJar = getTargetFile();
 thin(sourceFatJar);
 } catch (SpringBootThinException e) {
throw new MojoExecutionException( ""Plugin execution failed because the application archive is not an executable archive. The repackage goal of the spring-boot-maven-plugin must be configured to run first in order to create the required executable archive."", e);
 } catch (Exception e) {
throw new MojoExecutionException(e.getMessage(), e);
 } } }",1
70449,"class _ { private CompletionStage<RestResponse> convertToJson(RestRequest restRequest) {
NettyRestResponse.Builder responseBuilder = new NettyRestResponse.Builder();
 ContentSource contents = restRequest.contents();
 ConfigurationBuilderHolder builderHolder = PARSER_REGISTRY.parse(new String(contents.rawContent(), UTF_8));
 ConfigurationBuilder builder = builderHolder.getNamedConfigurationBuilders().values().iterator().next();
 Configuration configuration = builder.build();
 return CompletableFuture.completedFuture(responseBuilder .contentType(APPLICATION_JSON) .entity(JSON_WRITER.toJSON(configuration))  .build());
  } }","class _ { private CompletionStage<RestResponse> convertToJson(RestRequest restRequest) {
NettyRestResponse.Builder responseBuilder = new NettyRestResponse.Builder();
 ContentSource contents = restRequest.contents();
 ConfigurationBuilderHolder builderHolder = PARSER_REGISTRY.parse(new String(contents.rawContent(), UTF_8));
 ConfigurationBuilder builder = builderHolder.getNamedConfigurationBuilders().values().iterator().next();
 Configuration configuration = builder.build();
 responseBuilder.contentType(APPLICATION_JSON) .entity(JSON_WRITER.toJSON(configuration));
 return CompletableFuture.completedFuture(responseBuilder.build());
 } }",1
70450,"class _ { public void fixAssertions(Archetype archetype, AssertionResult assertionResult) {
createdMissingStructure.clear();
 try {
Map<String, Value> setPathValues = assertionResult.getSetPathValues();
 for(String path:setPathValues.keySet()) {
Value value = setPathValues.get(path);
 String pathOfParent = stripLastPathSegment(path);
 String lastPathSegment = getLastPathSegment(path);
 List<Object> parents = null;
 parents = ruleEvaluation.getQueryContext().findList(pathOfParent);
 while(parents.isEmpty()) {
parents = constructMissingStructure(archetype, pathOfParent, lastPathSegment, parents);
 } for(Object parent:parents) {
RMAttributeInfo attributeInfo = ArchieRMInfoLookup.getInstance().getAttributeInfo(parent.getClass(), lastPathSegment);
 if(attributeInfo == null) {
throw new IllegalStateException(""attribute "" + lastPathSegment + "" does not exist on type "" + parent.getClass());
 } if(value.getValue() == null) {
creator.set(parent, lastPathSegment, Lists.newArrayList(value.getValue()));
 } else if(attributeInfo.getType().equals(Long.class) && value.getValue().getClass().equals(Double.class)) {
Long convertedValue = ((Double) value.getValue()).longValue();
 creator.set(parent, lastPathSegment, Lists.newArrayList(convertedValue));
 } else if(attributeInfo.getType().equals(Double.class) && value.getValue().getClass().equals(Long.class)) {
Double convertedValue = ((Long) value.getValue()).doubleValue();
 creator.set(parent, lastPathSegment, Lists.newArrayList(convertedValue));
 } else {
creator.set(parent, lastPathSegment, Lists.newArrayList(value.getValue()));
 } if(parent instanceof CodePhrase) {
fixCodePhrase(archetype, pathOfParent, parent);
 } ruleEvaluation.refreshQueryContext();
 }  for(MissingStructure structure:createdMissingStructure) {
 completeStructure(archetype, structure);
 } } } catch (XPathExpressionException e) {
logger.error(""error fixing assertionResult {}"", assertionResult, e);
 } } }","class _ { public void fixAssertions(Archetype archetype, AssertionResult assertionResult) {
try {
Map<String, Value> setPathValues = assertionResult.getSetPathValues();
 for(String path:setPathValues.keySet()) {
Value value = setPathValues.get(path);
 String pathOfParent = stripLastPathSegment(path);
 String lastPathSegment = getLastPathSegment(path);
 List<Object> parents = null;
 parents = ruleEvaluation.getQueryContext().findList(pathOfParent);
 while(parents.isEmpty()) {
parents = constructMissingStructure(archetype, pathOfParent, lastPathSegment, parents);
 } for(Object parent:parents) {
RMAttributeInfo attributeInfo = ArchieRMInfoLookup.getInstance().getAttributeInfo(parent.getClass(), lastPathSegment);
 if(attributeInfo == null) {
throw new IllegalStateException(""attribute "" + lastPathSegment + "" does not exist on type "" + parent.getClass());
 } if(value.getValue() == null) {
creator.set(parent, lastPathSegment, Lists.newArrayList(value.getValue()));
 } else if(attributeInfo.getType().equals(Long.class) && value.getValue().getClass().equals(Double.class)) {
Long convertedValue = ((Double) value.getValue()).longValue();
 creator.set(parent, lastPathSegment, Lists.newArrayList(convertedValue));
 } else if(attributeInfo.getType().equals(Double.class) && value.getValue().getClass().equals(Long.class)) {
Double convertedValue = ((Long) value.getValue()).doubleValue();
 creator.set(parent, lastPathSegment, Lists.newArrayList(convertedValue));
 } else {
creator.set(parent, lastPathSegment, Lists.newArrayList(value.getValue()));
 } if(parent instanceof CodePhrase) {
fixCodePhrase(archetype, pathOfParent, parent);
 } ruleEvaluation.refreshQueryContext();
 } } } catch (XPathExpressionException e) {
logger.error(""error fixing assertionResult {}"", assertionResult, e);
 } } }",1
70451,"class _ { public void rewriteImports(TextChangeManager changeManager, IProgressMonitor pm) throws CoreException {
for (Entry<ICompilationUnit, ImportChange> entry : fImportChanges.entrySet()) {
ICompilationUnit cu= entry.getKey();
 ImportChange importChange= entry.getValue();
 ImportRewrite importRewrite= StubUtility.createImportRewrite(cu, true);
 importRewrite.setFilterImplicitImports(false);
 for (String  string :  importChange.fStaticToRemove) {
importRewrite.removeStaticImport(string);
 } for (String string : importChange.fToRemove) {
importRewrite.removeImport(string);
 } for (String[] toAdd : importChange.fStaticToAdd) {
importRewrite.addStaticImport(toAdd[0], toAdd[1], true);
 } for (String string : importChange.fToAdd) {
importRewrite.addImport(string);
 } if (importRewrite.hasRecordedChanges()) {
TextEdit importEdit= importRewrite.rewriteImports(pm);
 String name= RefactoringCoreMessages.RenamePackageRefactoring_update_imports;
 try {
TextChangeCompatibility.addTextEdit(changeManager.get(cu), name, importEdit);
 } catch (MalformedTreeException e) {
JavaPlugin.logErrorMessage(""MalformedTreeException while processing cu "" + cu);
 throw e;
 } } } } }","class _ { public void rewriteImports(TextChangeManager changeManager, IProgressMonitor pm) throws CoreException {
for (Entry<ICompilationUnit, ImportChange> entry : fImportChanges.entrySet()) {
ICompilationUnit cu= entry.getKey();
 ImportChange importChange= entry.getValue();
 ImportRewrite importRewrite= StubUtility.createImportRewrite(cu, true);
 importRewrite.setFilterImplicitImports(false);
 for (String toRemove : importChange.fStaticToRemove) {
importRewrite.removeStaticImport(toRemove);
 } for (String toRemove : importChange.fToRemove) {
importRewrite.removeImport(toRemove);
 } for (String[] toAdd : importChange.fStaticToAdd) {
importRewrite.addStaticImport(toAdd[0], toAdd[1], true);
 } for (String toAdd : importChange.fToAdd) {
importRewrite.addImport(toAdd);
 } if (importRewrite.hasRecordedChanges()) {
TextEdit importEdit= importRewrite.rewriteImports(pm);
 String name= RefactoringCoreMessages.RenamePackageRefactoring_update_imports;
 try {
TextChangeCompatibility.addTextEdit(changeManager.get(cu), name, importEdit);
 } catch (MalformedTreeException e) {
JavaPlugin.logErrorMessage(""MalformedTreeException while processing cu "" + cu);
 throw e;
 } } } } }",1
70456,"class _ { public static void main(final String[] args) {
AsyncDolphinLauncher.launch(""MLRREEF"", args, AsyncDolphinConfiguration.newBuilder() .setWorkerClass(MLRWorker.class) .setUpdaterClass(MLRUpdater.class) .setPreValueCodecClass(DenseVectorCodec.class) .setValueCodecClass(DenseVectorCodec.class) .setServerSerializerClass(DenseVectorSerializer.class) .setWorkerSerializerClass(MLRDataSerializer.class)  .addParameterClass(MLRParameters.NumClasses.class)  .addParameterClass(MLRParameters.NumFeatures.class) .addParameterClass(MLRParameters.InitialStepSize.class) .addParameterClass(MLRParameters.Lambda.class) .addParameterClass(MLRParameters.WorkerLogPeriod.class) .addParameterClass(MLRParameters.NumFeaturesPerPartition.class) .addParameterClass(MLRParameters.ModelGaussian.class) .addParameterClass(MLRParameters.DecayPeriod.class) .addParameterClass(MLRParameters.DecayRate.class) .addParameterClass(MLRParameters.TrainErrorDatasetSize.class) .addParameterClass(MLRParameters.NumBatchPerLossLog.class) .build());
 } }","class _ { public static void main(final String[] args) {
AsyncDolphinLauncher.launch(""MLRREEF"", args, AsyncDolphinConfiguration.newBuilder() .setWorkerClass(MLRWorker.class) .setUpdaterClass(MLRUpdater.class) .setPreValueCodecClass(DenseVectorCodec.class) .setValueCodecClass(DenseVectorCodec.class) .setServerSerializerClass(DenseVectorSerializer.class) .setWorkerSerializerClass(MLRDataSerializer.class) .addParameterClass(NumClasses.class) .addParameterClass(NumFeatures.class) .addParameterClass(InitialStepSize.class) .addParameterClass(Lambda.class) .addParameterClass(NumFeaturesPerPartition.class) .addParameterClass(ModelGaussian.class) .addParameterClass(DecayPeriod.class) .addParameterClass(DecayRate.class) .addParameterClass(TrainErrorDatasetSize.class) .build());
 } }",1
70457,"class _ { public void testCompletedFuturesContext() {
waitFor(4);
 Thread testThread = Thread.currentThread();
 ContextInternal context = (ContextInternal) vertx.getOrCreateContext();
 Future.succeededFuture().onSuccess(v -> {
assertSame(testThread, Thread.currentThread());
 assertNull(Vertx.currentContext());
 complete();
 });
 context.succeededFuture().onSuccess(v -> {
 assertNotSame(testThread, Thread.currentThread());
  assertSame(context, Vertx.currentContext());
 complete();
 });
 Future.failedFuture(new Exception()).onFailure(v -> {
assertSame(testThread, Thread.currentThread());
 assertNull(Vertx.currentContext());
 complete();
 });
 context.failedFuture(new Exception()).onFailure(v -> {
assertNotSame(testThread, Thread.currentThread());
 assertSame(context, Vertx.currentContext());
 complete();
 });
 await();
 } }","class _ { public void testCompletedFuturesContext() throws Exception {
waitFor(4);
 Thread testThread = Thread.currentThread();
 ContextInternal context = (ContextInternal) vertx.getOrCreateContext();
 CompletableFuture<Thread> cf = new CompletableFuture<>();
 context.runOnContext(v -> cf.complete(Thread.currentThread()));
 Thread contextThread = cf.get();
 Future.succeededFuture().onSuccess(v -> {
assertSame(testThread, Thread.currentThread());
 assertNull(Vertx.currentContext());
 complete();
 });
 context.succeededFuture().onSuccess(v -> {
assertNotSame(testThread, Thread.currentThread());
 assertSame(context, Vertx.currentContext());
 assertSame(contextThread, Thread.currentThread());
 complete();
 });
 Future.failedFuture(new Exception()).onFailure(v -> {
assertSame(testThread, Thread.currentThread());
 assertNull(Vertx.currentContext());
 complete();
 });
 context.failedFuture(new Exception()).onFailure(v -> {
assertNotSame(testThread, Thread.currentThread());
 assertSame(context, Vertx.currentContext());
 assertSame(contextThread, Thread.currentThread());
 complete();
 });
 await();
 } }",1
70458,"class _ { private synchronized Map<String, ThriftSerializedObject> partialSnapshot(TDeserializer td) {
int attempts = 0;
 while (true) {
try {
return partialDeserializeLatestVersion(td);
 } catch (Exception e) {
attempts++;
 if (attempts >= 10) {
if (e.getCause() instanceof TProtocolException) {
 LOG.warn(""LocalState file is corrupted, resetting state"");
  return new HashMap<>();
 } throw new RuntimeException(e);
 } } } } }","class _ { private synchronized Map<String, ThriftSerializedObject> partialSnapshot(TDeserializer td) {
int attempts = 0;
 while (true) {
try {
return partialDeserializeLatestVersion(td);
 } catch (Exception e) {
attempts++;
 if (attempts >= 10) {
if (e.getCause() instanceof TProtocolException) {
LOG.warn(""LocalState file is corrupted, resetting state."", e);
 return new HashMap<>();
 } throw new RuntimeException(e);
 } } } } }",1
70459,"class _ {  public static ANSSRegionsFactory getFactory() {
 if (SINGLETON == null) {
SINGLETON = new ANSSRegionsFactory();
 SINGLETON.startup();
 Runtime.getRuntime().addShutdownHook(new Thread(() -> {
SINGLETON.shutdown();
 }));
 } return SINGLETON;
 } }","class _ { public static synchronized ANSSRegionsFactory getFactory() {
return getFactory(true);
 } }",1
70460,"class _ { public void testEntrySetValueFromEntryCollections() {
final String key1 = ""1"", value1 = ""one"", key2 = ""2"", value2 = ""two"", key3 = ""3"", value3 = ""three"";
 Map<String, String> m = new HashMap<>();
 m.put(key1, value1);
 m.put(key2, value2);
 m.put(key3, value3);
 cache(0, ""replSync"").putAll(m);
  Cache<Object, Object> replSync = cache(0, ""replSync"");
  Set<Map.Entry<Object, Object>> entries = replSync.entrySet();
 String newString = ""new-value"";
 for (Map.Entry<Object, Object> entry : entries) {
entry.setValue(newString);
 } assertEquals(3, cache(0, ""replSync"").size());
 assertEquals(newString, cache(0, ""replSync"").get(key1));
 assertEquals(newString, cache(0, ""replSync"").get(key2));
 assertEquals(newString, cache(0, ""replSync"").get(key3));
 } }","class _ { public void testEntrySetValueFromEntryCollections() {
final String key1 = ""1"", value1 = ""one"", key2 = ""2"", value2 = ""two"", key3 = ""3"", value3 = ""three"";
 Map<String, String> m = new HashMap<>();
 m.put(key1, value1);
 m.put(key2, value2);
 m.put(key3, value3);
 cache(0, ""replSync"").putAll(m);
 Set<Map.Entry<Object, Object>> entries = cache(0, ""replSync"").entrySet();
 String newString = ""new-value"";
 for (Map.Entry<Object, Object> entry : entries) {
entry.setValue(newString);
 } assertEquals(3, cache(0, ""replSync"").size());
 assertEquals(newString, cache(0, ""replSync"").get(key1));
 assertEquals(newString, cache(0, ""replSync"").get(key2));
 assertEquals(newString, cache(0, ""replSync"").get(key3));
 } }",1
70462,"class _ { public CreateXmlResourcePanel(@NotNull Module module, @NotNull ResourceType resourceType, @Nullable String predefinedName, @Nullable String predefinedValue, boolean chooseName, @Nullable VirtualFile defaultFile) {
this(module, resourceType, defaultFile);
 if (chooseName) {
predefinedName = ResourceHelper.prependResourcePrefix(module, predefinedName);
 }  if (predefinedName != null && predefinedName.length() > 0) {
 if (chooseName) {
myNameLabel.setVisible(true);
 myNameField.setVisible(true);
 } myNameField.setText(predefinedName);
 } else {
myNameLabel.setVisible(true);
 myNameField.setVisible(true);
 } if (predefinedValue != null && predefinedValue.length() > 0) {
myValueField.setText(predefinedValue);
 } else {
myValueLabel.setVisible(true);
 myValueField.setVisible(true);
 } } }","class _ { public CreateXmlResourcePanel(@NotNull Module module, @NotNull ResourceType resourceType, @Nullable String predefinedName, @Nullable String predefinedValue, boolean chooseName, @Nullable VirtualFile defaultFile) {
this(module, resourceType, defaultFile);
 if (chooseName) {
predefinedName = ResourceHelper.prependResourcePrefix(module, predefinedName);
 } if (!StringUtil.isEmpty(predefinedName)) {
if (chooseName) {
myNameLabel.setVisible(true);
 myNameField.setVisible(true);
 } myNameField.setText(predefinedName);
 } else {
myNameLabel.setVisible(true);
 myNameField.setVisible(true);
 } if (!StringUtil.isEmpty(predefinedValue)) {
myValueField.setText(predefinedValue);
 } else {
myValueLabel.setVisible(true);
 myValueField.setVisible(true);
 } } }",1
70464,"class _ { public void resolvePropertiesNotSetAndOverrideTrue() {
 Map<String, String> originalProperties = new HashMap<>();
  originalProperties.put(""foo"", ""bar"");
 Map<String, String> resolvedProperties = cloudHubArtifactDeployer.resolveProperties(originalProperties, null, true);
 assertThat(""originalProperties should have the same size"", resolvedProperties.size(), equalTo(1));
 assertThat(""resolvedProperties should contains the (foo,bar) entry"", resolvedProperties, hasEntry(""foo"", ""bar""));
 } }","class _ { public void resolvePropertiesNotSetAndOverrideTrue() {
Map<String, String> resolvedProperties = cloudHubArtifactDeployer.resolveProperties(originalProperties, null, true);
 assertThat(""originalProperties should have the same size"", resolvedProperties.size(), equalTo(1));
 assertThat(""resolvedProperties should contains the (foo,bar) entry"", resolvedProperties, hasEntry(""foo"", ""bar""));
 } }",1
70466,"class _ { public ParseTexResultViewModel(TexParserResult texParserResult) {
this.referenceList = FXCollections.observableArrayList();
 this.citationList = FXCollections.observableArrayList();
  texParserResult.getCitationsKeySet().forEach(key -> referenceList.add(  new ReferenceWrapper(key, texParserResult.getCitationsByKey(key))));
 } }","class _ { public ParseTexResultViewModel(TexParserResult texParserResult) {
this.referenceList = FXCollections.observableArrayList();
 this.citationList = FXCollections.observableArrayList();
 texParserResult.getCitations() .asMap() .forEach((entry, citations) -> referenceList.add(new ReferenceViewModel(entry, citations)));
 } }",1
70469,"class _ { public static byte[] fromCanonicalJSON(ImmutableSerializationContext ctx, Reader reader) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
 RawProtoStreamWriter writer = RawProtoStreamWriterImpl.newInstance(baos);
 JsonReader jsonReader = new JsonReader(reader);
 jsonReader.setLenient(false);
 try {
JsonToken token = jsonReader.peek();
 while (jsonReader.hasNext() && !token.equals(END_DOCUMENT)) {
token = jsonReader.peek();
 switch (token) {
case BEGIN_OBJECT: processJsonDocument(ctx, jsonReader, writer);
 break;
 case NULL: jsonReader.nextNull();
 break;
 case END_DOCUMENT: break;
 default: throw new IllegalStateException(""Invalid top level object! Found token: "" + token);
 } } writer.flush();
 return baos.toByteArray();
 } catch (MalformedJsonException e) {
 throw new IllegalStateException(""Invalid Json"");
  } finally {
baos.close();
 reader.close();
 } } }","class _ { public static byte[] fromCanonicalJSON(ImmutableSerializationContext ctx, Reader reader) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStream();
 RawProtoStreamWriter writer = RawProtoStreamWriterImpl.newInstance(baos);
 JsonReader jsonReader = new JsonReader(reader);
 jsonReader.setLenient(false);
 try {
JsonToken token = jsonReader.peek();
 while (jsonReader.hasNext() && !token.equals(END_DOCUMENT)) {
token = jsonReader.peek();
 switch (token) {
case BEGIN_OBJECT: processJsonDocument(ctx, jsonReader, writer);
 break;
 case NULL: jsonReader.nextNull();
 break;
 case END_DOCUMENT: break;
 default: throw new IllegalStateException(""Invalid top level object! Found token: "" + token);
 } } writer.flush();
 return baos.toByteArray();
 } catch (MalformedJsonException e) {
throw new IllegalStateException(""Invalid JSON"", e);
 } finally {
baos.close();
 reader.close();
 } } }",1
70470,"class _ { public Builder mergeFrom(io.netty.example.worldclock.WorldClockProtocol.Locations other) {
if (other == io.netty.example.worldclock.WorldClockProtocol.Locations.getDefaultInstance()) {
 return this;
  } if (locationBuilder_ == null) {
if (!other.location_.isEmpty()) {
if (location_.isEmpty()) {
location_ = other.location_;
 bitField0_ = (bitField0_ & ~0x00000001);
 } else {
ensureLocationIsMutable();
 location_.addAll(other.location_);
 } onChanged();
 } } else {
if (!other.location_.isEmpty()) {
if (locationBuilder_.isEmpty()) {
locationBuilder_.dispose();
 locationBuilder_ = null;
 location_ = other.location_;
 bitField0_ = (bitField0_ & ~0x00000001);
 locationBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getLocationFieldBuilder() : null;
 } else {
locationBuilder_.addAllMessages(other.location_);
 } } } this.mergeUnknownFields(other.getUnknownFields());
 return this;
 } }","class _ { public Builder mergeFrom(io.netty.example.worldclock.WorldClockProtocol.Locations other) {
if (other == io.netty.example.worldclock.WorldClockProtocol.Locations.getDefaultInstance()) return this;
 if (locationBuilder_ == null) {
if (!other.location_.isEmpty()) {
if (location_.isEmpty()) {
location_ = other.location_;
 bitField0_ = (bitField0_ & ~0x00000001);
 } else {
ensureLocationIsMutable();
 location_.addAll(other.location_);
 } onChanged();
 } } else {
if (!other.location_.isEmpty()) {
if (locationBuilder_.isEmpty()) {
locationBuilder_.dispose();
 locationBuilder_ = null;
 location_ = other.location_;
 bitField0_ = (bitField0_ & ~0x00000001);
 locationBuilder_ = com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ? getLocationFieldBuilder() : null;
 } else {
locationBuilder_.addAllMessages(other.location_);
 } } } this.mergeUnknownFields(other.getUnknownFields());
 return this;
 } }",1
70475,"class _ { public void getConceptByNameOrIdOrMap_shouldFindAConceptByItsUuid() {
String uuid = ""0cbe2ed3-cd5f-4f46-9459-26127c9265ab"";
 Concept concept = Context.getConceptService().getConceptByNameOrIdOrMap(uuid);
  Assert.assertEquals(3, (int) concept.getConceptId());
  } }","class _ { public void getConceptByNameOrIdOrMap_shouldFindAConceptByItsUuid() {
String uuid = ""7d104a6f-8337-4afa-b936-41083a5d9d88"";
 Assert.assertEquals(uuid, conceptService.getConceptByNameOrIdOrMap(uuid).getUuid());
 } }",1
70476,"class _ { public void run() {
List<TaskResult> results = new ArrayList<TaskResult>();
 for (String task : myTasks) {
TaskResult taskResult = new TaskResult();
 taskResult.myTaskName = task;
 taskResult.myIsSuccess = true;
 long loopStartTime = System.currentTimeMillis();
 try {
Class taskClass;
 taskClass = Runner.class.getClassLoader().loadClass(task);
 if (!BaseTask.class.isAssignableFrom(taskClass)) {
throw new InvalidClassException(""Invalid class "" + task + "". It is not a subclass of "" + BaseTask.class.getName() + ""."");
 } BaseTask baseTask = (BaseTask)taskClass.getConstructor().newInstance(new Object[]{});
 baseTask.setProjectNavigationUtil(myNavigationUtil);
 baseTask.setTaskContext(myTaskContext);
 try {
 if (!baseTask.setup()) {
 throw new Exception(""Setup failed for task "" + baseTask.getClass().getCanonicalName() + ""."");
 } long taskStartTime = System.currentTimeMillis();
 taskResult.myIsSuccess = baseTask.run();
 taskResult.myRunningTime = System.currentTimeMillis() - taskStartTime;
 } finally {
baseTask.teardown();
 } } catch (Exception e) {
taskResult.myIsSuccess = false;
 taskResult.myException = e.toString();
 taskResult.myStackTraceElements = e.getStackTrace();
 e.printStackTrace();
 } taskResult.myTotalTime = System.currentTimeMillis() - loopStartTime;
 } myAllResults.add(results);
 for (TaskResult result : results) {
myLastResults.put(result.myTaskName, result);
 } } }","class _ { public void run() {
List<TaskResult> results = new ArrayList<TaskResult>();
 for (String task : myTasks) {
TaskResult taskResult = new TaskResult();
 taskResult.myTaskName = task;
 taskResult.myIsSuccess = true;
 long loopStartTime = System.currentTimeMillis();
 try {
Class taskClass;
 taskClass = Runner.class.getClassLoader().loadClass(task);
 if (!BaseTask.class.isAssignableFrom(taskClass)) {
throw new InvalidClassException(""Invalid class "" + task + "". It is not a subclass of "" + BaseTask.class.getName() + ""."");
 } BaseTask baseTask = (BaseTask)taskClass.getConstructor().newInstance(new Object[]{});
 baseTask.setProjectNavigationUtil(myNavigationUtil);
 baseTask.setTaskContext(myTaskContext);
 try {
baseTask.setup();
 long taskStartTime = System.currentTimeMillis();
 taskResult.myIsSuccess = baseTask.run();
 taskResult.myRunningTime = System.currentTimeMillis() - taskStartTime;
 } finally {
baseTask.teardown();
 } } catch (Exception e) {
taskResult.myIsSuccess = false;
 taskResult.myException = e.toString();
 taskResult.myStackTraceElements = e.getStackTrace();
 e.printStackTrace();
 } taskResult.myTotalTime = System.currentTimeMillis() - loopStartTime;
 } myAllResults.add(results);
 for (TaskResult result : results) {
myLastResults.put(result.myTaskName, result);
 } } }",1
70480,"class _ { public void listsDocs() throws IOException {
final String label = ""lists"";
 final String name = ""lists-exists"";
  final Bucket bucket = this.mockBucket(label, name);
  final List<String> expected = Arrays.asList( name, String.format(""sub%sfile"", File.separator) );
 final List<String> names = new AwsDocs(bucket, label).names();
 Collections.sort(names);
 MatcherAssert.assertThat(names, Matchers.equalTo(expected));
 } }","class _ { public void listsDocs() throws IOException {
final String label = ""lists"";
 final String name = ""lists-exists"";
 final Bucket bucket = this.mockBucket(label, name);
 final List<String> expected = Arrays.asList( name, Paths.get(""sub"", ""file"").toString() );
 final List<String> names = new AwsDocs(bucket, label).names();
 Collections.sort(names);
 MatcherAssert.assertThat(names, Matchers.equalTo(expected));
 } }",1
70481,"class _ {  public static Double get(String key, double def) {
 String value = configuration.getProperty(key);
 return value == null ? def : ParseUtil.parseDoubleOrDefault(value, def);
 } }","class _ { public static double get(String key, double def) {
String value = configuration.getProperty(key);
 return value == null ? def : ParseUtil.parseDoubleOrDefault(value, def);
 } }",1
70482,"class _ { private void doSaveElementState(TreePath parentPath, ModelDelta delta, VirtualItem item, Collection<VirtualItem> set, int flagsToSave) {
Object element = item.getData();
 if (element != null) {
boolean expanded = item.getExpanded();
 boolean selected = set.contains(item);
 int flags = IModelDelta.NO_CHANGE;
 if (expanded && (flagsToSave & IModelDelta.EXPAND) != 0) {
flags = flags | IModelDelta.EXPAND;
 } if (!expanded && (flagsToSave & IModelDelta.COLLAPSE) != 0 && item.hasItems()){
flags = flags | IModelDelta.COLLAPSE;
 } if (selected && (flagsToSave & IModelDelta.SELECT) != 0) {
flags = flags | IModelDelta.SELECT;
 } if (expanded || flags != IModelDelta.NO_CHANGE) {
int modelIndex = ((TreeModelContentProvider)getContentProvider()).viewToModelIndex(parentPath, item.getIndex().intValue());
 TreePath elementPath = parentPath.createChildPath(element);
 int numChildren = ((TreeModelContentProvider)getContentProvider()).viewToModelCount(elementPath, item.getItemCount());
 ModelDelta childDelta = delta.addNode(element, modelIndex, flags, numChildren);
 if (expanded) {
for (VirtualItem  item2 :  item.getItems()) {
doSaveElementState(elementPath, childDelta, item2, set, flagsToSave);
 } } } } } }","class _ { private void doSaveElementState(TreePath parentPath, ModelDelta delta, VirtualItem item, Collection<VirtualItem> set, int flagsToSave) {
Object element = item.getData();
 if (element != null) {
boolean expanded = item.getExpanded();
 boolean selected = set.contains(item);
 int flags = IModelDelta.NO_CHANGE;
 if (expanded && (flagsToSave & IModelDelta.EXPAND) != 0) {
flags = flags | IModelDelta.EXPAND;
 } if (!expanded && (flagsToSave & IModelDelta.COLLAPSE) != 0 && item.hasItems()){
flags = flags | IModelDelta.COLLAPSE;
 } if (selected && (flagsToSave & IModelDelta.SELECT) != 0) {
flags = flags | IModelDelta.SELECT;
 } if (expanded || flags != IModelDelta.NO_CHANGE) {
int modelIndex = ((TreeModelContentProvider)getContentProvider()).viewToModelIndex(parentPath, item.getIndex().intValue());
 TreePath elementPath = parentPath.createChildPath(element);
 int numChildren = ((TreeModelContentProvider)getContentProvider()).viewToModelCount(elementPath, item.getItemCount());
 ModelDelta childDelta = delta.addNode(element, modelIndex, flags, numChildren);
 if (expanded) {
for (VirtualItem childItem : item.getItems()) {
doSaveElementState(elementPath, childDelta, childItem, set, flagsToSave);
 } } } } } }",1
70484,"class _ { void processNotification(OSNotification originalNotification, @Nullable OSNotification notification) {
OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, ""processNotification called from Thread: "" + Thread.currentThread().toString());
 if (notification != null) {
boolean display = isStringEmpty(notification.getBody());
 if (!display) {
notDisplayNotificationLogic(originalNotification);
 } else {
notificationJob.setNotification(notification);
  NotificationBundleProcessor.processJobForDisplay(this, isBackgroundLogic);
  } if (isRestoring) OSUtils.sleep(100);
 } else {
notDisplayNotificationLogic(originalNotification);
 } } }","class _ { void processNotification(OSNotification originalNotification, @Nullable OSNotification notification) {
if (notification != null) {
boolean display = isStringEmpty(notification.getBody());
 if (!display) {
notDisplayNotificationLogic(originalNotification);
 } else {
notificationJob.setNotification(notification);
 NotificationBundleProcessor.processJobForDisplay(this, fromBackgroundLogic);
 } if (restoring) OSUtils.sleep(100);
 } else {
notDisplayNotificationLogic(originalNotification);
 } } }",1
70492,"class _ { public void match(final AbstractInsnNode start, final IFilterOutput output) {
if (Opcodes.IFNONNULL != start.getOpcode()) {
return;
 } cursor = start;
 nextIsNew(KOTLIN_TYPE_CAST_EXCEPTION);
 nextIs(Opcodes.DUP);
 nextIs(Opcodes.LDC);
 if (cursor == null) {
return;
 } final LdcInsnNode ldc = (LdcInsnNode) cursor;
  if (ldc.cst.getClass() != String.class) {
 return;
 } if (!((String) ldc.cst) .startsWith(""null cannot be cast to non-null type"")) {
return;
 } nextIsInvokeSuper(KOTLIN_TYPE_CAST_EXCEPTION, ""(Ljava/lang/String;
)V"");
 nextIs(Opcodes.ATHROW);
 if (cursor == null) {
return;
 } if (cursor.getNext() != ((JumpInsnNode) start).label) {
return;
 } output.ignore(start, cursor);
 } }","class _ { public void match(final AbstractInsnNode start, final IFilterOutput output) {
if (Opcodes.IFNONNULL != start.getOpcode()) {
return;
 } cursor = start;
 nextIsNew(KOTLIN_TYPE_CAST_EXCEPTION);
 nextIs(Opcodes.DUP);
 nextIs(Opcodes.LDC);
 if (cursor == null) {
return;
 } final LdcInsnNode ldc = (LdcInsnNode) cursor;
 if (!(ldc.cst instanceof String && ((String) ldc.cst) .startsWith(""null cannot be cast to non-null type""))) {
return;
 } nextIsInvokeSuper(KOTLIN_TYPE_CAST_EXCEPTION, ""(Ljava/lang/String;
)V"");
 nextIs(Opcodes.ATHROW);
 if (cursor == null) {
return;
 } if (cursor.getNext() != ((JumpInsnNode) start).label) {
return;
 } output.ignore(start, cursor);
 } }",1
70496,"class _ { protected ClientAuthenticationCustomCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
ClientAuthenticationCustomCodec.RequestParameters parameters = ClientAuthenticationCustomCodec .decodeRequest(clientMessage);
 String uuid = parameters.uuid;
 String ownerUuid = parameters.ownerUuid;
 if (uuid != null && uuid.length() > 0) {
principal = new ClientPrincipal(uuid, ownerUuid);
 } credentials = serializationService.toObject(parameters.credentials);
 clientSerializationVersion = parameters.serializationVersion;
 if (parameters.clientHazelcastVersionExist) {
clientVersion = parameters.clientHazelcastVersion;
 } if (parameters.clientNameExist) {
clientName = parameters.clientName;
 }  if (parameters.labelsExist) {
 Set<String> set = new HashSet<String>();
 for (String label : parameters.labels) {
set.add(label);
 } labels = Collections.unmodifiableSet(set);
 } return parameters;
 } }","class _ { protected ClientAuthenticationCustomCodec.RequestParameters decodeClientMessage(ClientMessage clientMessage) {
ClientAuthenticationCustomCodec.RequestParameters parameters = ClientAuthenticationCustomCodec .decodeRequest(clientMessage);
 String uuid = parameters.uuid;
 String ownerUuid = parameters.ownerUuid;
 if (uuid != null && uuid.length() > 0) {
principal = new ClientPrincipal(uuid, ownerUuid);
 } credentials = serializationService.toObject(parameters.credentials);
 clientSerializationVersion = parameters.serializationVersion;
 if (parameters.clientHazelcastVersionExist) {
clientVersion = parameters.clientHazelcastVersion;
 } if (parameters.clientNameExist) {
clientName = parameters.clientName;
 } if (parameters.labelsExist) {
labels = Collections.unmodifiableSet(new HashSet<String>(parameters.labels));
 } return parameters;
 } }",1
70499,"class _ { public SmartImportRootWizardPage(SmartImportWizard wizard, File initialSelection, Set<IWorkingSet> initialWorkingSets) {
super(SmartImportRootWizardPage.class.getName());
  this.potentialProjects = Collections.emptyMap();
  this.selection = initialSelection;
 this.workingSets = initialWorkingSets;
 if (this.workingSets == null) {
this.workingSets = new HashSet<>();
 } setWizard(wizard);
 } }","class _ { public SmartImportRootWizardPage(SmartImportWizard wizard, File initialSelection, Set<IWorkingSet> initialWorkingSets) {
super(SmartImportRootWizardPage.class.getName());
 this.selection = initialSelection;
 this.workingSets = initialWorkingSets;
 if (this.workingSets == null) {
this.workingSets = new HashSet<>();
 } setWizard(wizard);
 } }",1
70500,"class _ { protected void executeVmCommand() {
boolean  isPlugged =  getParameters().getAction() == PlugAction.PLUG;
 if (isPlugged){
clearAddressIfPciSlotIsDuplicated(vmDevice);
 } if (hotPlugVmNicRequired(getVm().getStatus())) {
boolean externalNetworkIsPlugged = isPlugged && getNetwork() != null && getNetwork().isExternal();
 if (externalNetworkIsPlugged) {
plugToExternalNetwork();
 } try {
runVdsCommand(getParameters().getAction().getCommandType(), new VmNicDeviceVDSParameters(getVdsId(), getVm(), getParameters().getNic(), vmDevice));
 } catch (EngineException e) {
if (externalNetworkIsPlugged && getParameters().isNewNic()) {
unplugFromExternalNetwork();
 } throw e;
 } } TransactionSupport.executeInNewTransaction(updateDevice());
 setSucceeded(true);
 } }","class _ { protected void executeVmCommand() {
boolean isNicToBePlugged = getParameters().getAction() == PlugAction.PLUG;
 if (isNicToBePlugged){
clearAddressIfPciSlotIsDuplicated(vmDevice);
 } if (hotPlugVmNicRequired(getVm().getStatus())) {
boolean externalNetworkIsPlugged = isNicToBePlugged && getNetwork() != null && getNetwork().isExternal();
 if (externalNetworkIsPlugged) {
plugToExternalNetwork();
 } try {
runVdsCommand(getParameters().getAction().getCommandType(), new VmNicDeviceVDSParameters(getVdsId(), getVm(), getParameters().getNic(), vmDevice));
 } catch (EngineException e) {
if (externalNetworkIsPlugged && getParameters().isNewNic()) {
unplugFromExternalNetwork();
 } throw e;
 } } TransactionSupport.executeInNewTransaction(updateDevice());
 setSucceeded(true);
 } }",1
70501,"class _ { private Object readResolve() {
if (StringUtils.isNotBlank(collectionUrl)  && StringUtils.isNotBlank(username)  && password != null && StringUtils.isNotBlank(password.getPlainText())) {
try {
final URI uri = new URI(collectionUrl);
 String hostName = uri.getHost();
 List<StandardUsernamePasswordCredentials> credentials = TeamCollectionConfiguration.findCredentials(hostName);
 for (StandardUsernamePasswordCredentials credential : credentials) {
if (credential.getUsername().equals(username) && credential.getPassword().getPlainText().equals(password.getPlainText())) {
this.credentialsId = credential.getId();
 return this;
 } } this.credentialsId = TeamCollectionConfiguration.setCredentials(hostName, username, password.getPlainText());
 } catch (Exception ignore) {
} } return this;
 } }","class _ { protected Object readResolve() {
if (StringUtils.isNotBlank(collectionUrl) && password != null && StringUtils.isNotBlank(password.getPlainText())) {
try {
final URI uri = new URI(collectionUrl);
 String hostName = uri.getHost();
 List<StandardUsernamePasswordCredentials> credentials = TeamCollectionConfiguration.findCredentials(hostName);
 for (StandardUsernamePasswordCredentials credential : credentials) {
if ((StringUtils.isBlank(username) || credential.getUsername().equals(username)) && credential.getPassword().getPlainText().equals(password.getPlainText())) {
this.credentialsId = credential.getId();
 return this;
 } } this.credentialsId = TeamCollectionConfiguration.setCredentials(hostName, username, password.getPlainText());
 } catch (Exception ex) {
logger.log(Level.WARNING, String.format(""Get or generate credentials for collection url: %s and username: %s failed."", collectionUrl, username), ex);
 } } return this;
 } }",1
70509,"class _ { public NioNetworking(Context ctx) {
this.threadNamePrefix = ctx.threadNamePrefix;
 this.metricsRegistry = ctx.metricsRegistry;
  this.metricsRegistryScheduled = new AtomicBoolean(false);
  this.loggingService = ctx.loggingService;
 this.inputThreadCount = ctx.inputThreadCount;
 this.outputThreadCount = ctx.outputThreadCount;
 this.logger = loggingService.getLogger(NioNetworking.class);
 this.errorHandler = ctx.errorHandler;
 this.balancerIntervalSeconds = ctx.balancerIntervalSeconds;
 this.selectorMode = ctx.selectorMode;
 this.selectorWorkaroundTest = ctx.selectorWorkaroundTest;
 this.idleStrategy = ctx.idleStrategy;
 } }","class _ { public NioNetworking(Context ctx) {
this.threadNamePrefix = ctx.threadNamePrefix;
 this.metricsRegistry = ctx.metricsRegistry;
 this.loggingService = ctx.loggingService;
 this.inputThreadCount = ctx.inputThreadCount;
 this.outputThreadCount = ctx.outputThreadCount;
 this.logger = loggingService.getLogger(NioNetworking.class);
 this.errorHandler = ctx.errorHandler;
 this.balancerIntervalSeconds = ctx.balancerIntervalSeconds;
 this.selectorMode = ctx.selectorMode;
 this.selectorWorkaroundTest = ctx.selectorWorkaroundTest;
 this.idleStrategy = ctx.idleStrategy;
 } }",1
70514,"class _ { public void enqueue(Set<LockToken> tokens) {
 outstandingLockTokens.getAndAccumulate(tokens, Sets::union);
  scheduleIfNoTaskRunning();
 } }","class _ { public void enqueue(Set<LockToken> tokens) {
readWriteLock.readLock().lock();
 try {
outstandingLockTokens.addAll(tokens);
 } finally {
readWriteLock.readLock().unlock();
 } if (unlockIsScheduled.compareAndSet(false, true)) {
scheduledExecutorService.submit(this::unlockOutstanding);
 } } }",1
70520,"class _ { public Response logout() {
logoutCurrentUser();
 Status status;
 Map<String, String> data = new HashMap<>();
 if (zConf.isAuthorizationHeaderClear()) {
status = Status.UNAUTHORIZED;
 data.put(""clearAuthorizationHeader"", ""true"");
 } else {
status = Status.FORBIDDEN;
 data.put(""clearAuthorizationHeader"", ""false"");
 } if (isKnoxSSOEnabled()) {
KnoxJwtRealm knoxJwtRealm = getJTWRealm();
  StringBuilder redirectURL = new StringBuilder(knoxJwtRealm.getProviderUrl());
  String redirect = knoxJwtRealm.getRedirectParam();
 data.put(""redirectURL"", constructUrl(redirectURL, redirect, knoxJwtRealm.getLogout()));
 data.put(""isLogoutAPI"", knoxJwtRealm.getLogoutAPI().toString());
 } else if (isKerberosRealmEnabled()) {
KerberosRealm kerberosRealm = getKerberosRealm();
 StringBuilder redirectURL = new StringBuilder(kerberosRealm.getProviderUrl());
 String redirect = kerberosRealm.getRedirectParam();
 data.put(""redirectURL"", constructUrl(redirectURL, redirect, kerberosRealm.getLogout()));
 } JsonResponse<Map<String, String>> response = new JsonResponse<>(status, """", data);
 LOG.info(response.toString());
 return response.build();
 } }","class _ { public Response logout() {
logoutCurrentUser();
 Status status;
 Map<String, String> data = new HashMap<>();
 if (zConf.isAuthorizationHeaderClear()) {
status = Status.UNAUTHORIZED;
 data.put(""clearAuthorizationHeader"", ""true"");
 } else {
status = Status.FORBIDDEN;
 data.put(""clearAuthorizationHeader"", ""false"");
 } if (isKnoxSSOEnabled()) {
KnoxJwtRealm knoxJwtRealm = getJTWRealm();
 data.put(""redirectURL"", constructUrl(knoxJwtRealm.getProviderUrl(), knoxJwtRealm.getRedirectParam(), knoxJwtRealm.getLogout()));
 data.put(""isLogoutAPI"", knoxJwtRealm.getLogoutAPI().toString());
 } else if (isKerberosRealmEnabled()) {
KerberosRealm kerberosRealm = getKerberosRealm();
 data.put(""redirectURL"", constructUrl(kerberosRealm.getProviderUrl(), kerberosRealm.getRedirectParam(), kerberosRealm.getLogout()));
 data.put(""isLogoutAPI"", kerberosRealm.getLogoutAPI().toString());
 } JsonResponse<Map<String, String>> response = new JsonResponse<>(status, """", data);
 LOG.info(response.toString());
 return response.build();
 } }",1
70521,"class _ { public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {
Long startId = getParam(parameters, ""start_id"").orElse(0);
 final OptionalLong maybeMaxId = getParam(parameters, ""max_id"");
  Long patchBackfillParam = getParam(parameters, ""force_patch"").orElse(0);
  boolean forcePatchBackfill = patchBackfillParam != 0;
 logger.info(""Execute called start_id={} max_id={} - processing"", startId, maybeMaxId);
 try {
logger.info(""Request accepted"");
 if (forcePatchBackfill) {
executor.execute(() -> worker.executePatchCreatedAndDetailsEntered(startId, maybeMaxId));
 } else {
executor.execute(() -> worker.execute(startId, maybeMaxId));
 } output.println(""Accepted"");
 } catch (java.util.concurrent.RejectedExecutionException e) {
logger.info(""Rejected request, worker already running"");
 output.println(""Rejected request, worker already running"");
 } } }","class _ { public void execute(ImmutableMultimap<String, String> parameters, PrintWriter output) throws Exception {
Long startId = getLongParam(parameters, ""start_id"").orElse(0);
 final OptionalLong maybeMaxId = getLongParam(parameters, ""max_id"");
 Boolean patchBackfill = getBoolParam(parameters, ""force_patch"").orElse(false);
 logger.info(""Execute called start_id={} max_id={} - processing"", startId, maybeMaxId);
 try {
logger.info(""Request accepted"");
 if (patchBackfill) {
executor.execute(() -> worker.executePatchCreatedAndDetailsEntered(startId, maybeMaxId));
 } else {
executor.execute(() -> worker.execute(startId, maybeMaxId));
 } output.println(""Accepted"");
 } catch (java.util.concurrent.RejectedExecutionException e) {
logger.info(""Rejected request, worker already running"");
 output.println(""Rejected request, worker already running"");
 } } }",1
70523,"class _ { private void addPageToBucket(PageId pageId, int bucket) {
mBucketMap.compute(bucket, (bucketKey, pageSet) -> {
 Set<PageId> set = pageSet == null ? new LinkedHashSet<>() : pageSet;
  set.add(pageId);
 return set;
 });
 } }","class _ { private void addPageToBucket(PageId pageId, int bucket) {
mBucketMap.compute(bucket, (bucketKey, lruMap) -> {
Map<PageId, Boolean> map = lruMap == null ? new LinkedHashMap<>( BUCKET_LRU_PAGE_MAP_INIT_CAPACITY, BUCKET_LRU_PAGE_MAP_INIT_LOAD_FACTOR, true) : lruMap;
 map.put(pageId, UNUSED_MAP_VALUE);
 return map;
 });
 LOG.debug(""added page {} to bucket {}"", pageId, bucket);
 } }",1
70525,"class _ {  public static void close(Closeable closeable)  {
try {
Closeables.close(closeable, true);
 } catch (IOException e) {
throw new ISE(""WTF?! A swallowedException bubbled up?!"");
 } } }","class _ { public static void close(Closeable closeable) {
if (closeable == null) {
return;
 } try {
closeable.close();
 } catch (IOException e) {
log.error(e, ""IOException thrown while closing Closeable."");
 } } }",1
70531,"class _ { private boolean parseInputToCheckIfHEX(String newText) {
if (newText.length() == 0) {
return false;
 }  if (newText.length() != 9) {
 return false;
 } try {
Color.parseColor(newText);
 return true;
 } catch (IllegalArgumentException e) {
return false;
 } } }","class _ { private int parseInputToCheckIfHEX(String newText) {
if (newText.length() != 9 || !newText.substring(0, 1).equals(""#"")) {
return NOT_A_HEX_VALUE;
 } try {
return Color.parseColor(newText);
 } catch (IllegalArgumentException e) {
return NOT_A_HEX_VALUE;
 } } }",1
70532,"class _ { public JavaSecureRandom(Properties properties) throws NoSuchAlgorithmException {
 if (instance == null) {
 instance = java.security.SecureRandom .getInstance(properties.getProperty( ConfigurationKeys.CHIMERA_JAVA_SECURE_RANDOM_ALGORITHM_KEY, ConfigurationKeys.CHIMERA_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT));
 } } }","class _ { public JavaSecureRandom(Properties properties) {
try {
instance = java.security.SecureRandom .getInstance(properties.getProperty( ConfigurationKeys.CHIMERA_JAVA_SECURE_RANDOM_ALGORITHM_KEY, ConfigurationKeys.CHIMERA_JAVA_SECURE_RANDOM_ALGORITHM_DEFAULT));
 } catch (NoSuchAlgorithmException e) {
LOG.error(""Failed to create java secure random due to error: "" + e);
 } } }",1
70538,"class _ { public void putTicket(ImageTicket ticket) {
BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest( ""PUT"", TICKETS_URI + ticket.getId(), HttpVersion.HTTP_1_1);
 StringEntity entity = new StringEntity(ImageTicketHelper.toJson(ticket), StandardCharsets.UTF_8);
 request.setEntity(entity);
 request.setHeader(""content-length"",  String.valueOf(request.getEntity().getContentLength()));
  HttpEntity response = executeRequest(request);
 consumeEntity(response);
 } }","class _ { public void putTicket(ImageTicket ticket) {
BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest( ""PUT"", TICKETS_URI + ticket.getId(), HttpVersion.HTTP_1_1);
 StringEntity entity = new StringEntity(new Gson().toJson(ticket.toDict()), StandardCharsets.UTF_8);
 request.setEntity(entity);
 request.setHeader(""content-length"", String.valueOf(entity.getContentLength()));
 HttpEntity response = executeRequest(request);
 consumeResponse(response);
 } }",1
70541,"class _ { private List<TestInfo> prioritizeTests(ClassName clazz, Collection<TestInfo> testsForMutant) {
 final List<TestInfo> sortedTis = FCollection.map(testsForMutant, x -> x);
  Collections.sort(sortedTis, new TestInfoPriorisationComparator(clazz, TIME_WEIGHTING_FOR_DIRECT_UNIT_TESTS));
 return sortedTis;
 } }","class _ { private List<TestInfo> prioritizeTests(ClassName clazz, Collection<TestInfo> testsForMutant) {
final List<TestInfo> sortedTis = new ArrayList<>(testsForMutant);
 sortedTis.sort(new TestInfoPriorisationComparator(clazz, TIME_WEIGHTING_FOR_DIRECT_UNIT_TESTS));
 return sortedTis;
 } }",1
70542,"class _ { static List<FolderSelectedStateCommand> splitCommand(FolderSelectedStateCommand command, int lengthLimit) {
List<FolderSelectedStateCommand> commands = new ArrayList<>();
  if (command.getIdSet() != null || command.getIdGroups() != null) {
 command = optimizeGroupings(command);
 Set<Long> idSet = command.getIdSet();
 List<ContiguousIdGroup> idGroups = command.getIdGroups();
 while ((idSet != null && !idSet.isEmpty()) || (idGroups != null && !idGroups.isEmpty())) {
Builder builder = command.newBuilder() .idSet(null) .idRanges(null);
 int length = builder.build().createCommandString().length();
 while (length < lengthLimit) {
if (idSet != null && !idSet.isEmpty()) {
Long first = idSet.iterator().next();
 length += (String.valueOf(first).length() + 1);
 if (length < lengthLimit) {
builder.addId(first);
 idSet.remove(first);
 } else {
break;
 } } else if (idGroups != null && !idGroups.isEmpty()) {
ContiguousIdGroup first = command.idGroups.iterator().next();
 length += (first.toString().length() + 1);
 if (length < lengthLimit) {
builder.addIdGroup(first.getStart(), first.getEnd());
 idGroups.remove(first);
 } else {
break;
 } } else {
break;
 } } commands.add(builder.build());
 } } else {
throw new IllegalStateException(""The constructed command is too long but does not contain ids"");
 } return commands;
 } }","class _ { static List<String> splitCommand(FolderSelectedStateCommand command, int lengthLimit) {
if (command.getIdSet().isEmpty() && command.getIdGroups().isEmpty()) {
throw new IllegalStateException(""The constructed command is too long but does not contain ids"");
 } List<String> commands = new ArrayList<>();
 Set<Long> idSet = new TreeSet<>(command.getIdSet());
 List<ContiguousIdGroup> idGroups = new ArrayList<>(command.getIdGroups());
 while (!idSet.isEmpty() || !idGroups.isEmpty()) {
command.clearIds();
 int length = command.createCommandString().length();
 while (length < lengthLimit) {
if (!idSet.isEmpty()) {
Long first = idSet.iterator().next();
 length += (String.valueOf(first).length() + 1);
 if (length < lengthLimit) {
command.addId(first);
 idSet.remove(first);
 } else {
break;
 } } else if (!idGroups.isEmpty()) {
ContiguousIdGroup first = idGroups.iterator().next();
 length += (first.toString().length() + 1);
 if (length < lengthLimit) {
command.addIdGroup(first.getStart(), first.getEnd());
 idGroups.remove(first);
 } else {
break;
 } } else {
break;
 } } commands.add(command.createCommandString());
 } return commands;
 } }",1
70543,"class _ { public void testUrlWithNonExistSchema() throws Exception {
String url = ""jdbc:splice://localhost:1527/splicedb;
create=true;
user=%s;
password=%s;
schema=""  + ""nonexist"";
  try (Connection connection = SpliceNetConnection.getConnectionAs(url, SpliceNetConnection.DEFAULT_USER, SpliceNetConnection.DEFAULT_USER_PASSWORD)) {
Assert.fail(""Connect to non exist schema should fail"");
 } catch (SQLException e) {
Assert.assertEquals(""Upexpected failure: ""+ e.getMessage(), e.getSQLState(), SQLState.LANG_SCHEMA_DOES_NOT_EXIST);
 } } }","class _ { public void testUrlWithNonExistSchema() throws Exception {
String url = ""jdbc:splice://localhost:1527/splicedb;
user=%s;
password=%s;
schema=nonexist"";
 try (Connection connection = SpliceNetConnection.getConnectionAs(url, SpliceNetConnection.DEFAULT_USER, SpliceNetConnection.DEFAULT_USER_PASSWORD)) {
Assert.fail(""Connect to non exist schema should fail"");
 } catch (SQLException e) {
Assert.assertEquals(""Upexpected failure: ""+ e.getMessage(), e.getSQLState(), SQLState.LANG_SCHEMA_DOES_NOT_EXIST);
 } } }",1
70545,"class _ { final void releaseContextFromPool(final C context) {
this.lock.lock();
 try {
if (this.cached == context) {
return;
 } if (this.cached == null) {
this.cached = context;
 return;
 }  this.contextPool.push(context);
  } finally {
this.lock.unlock();
 } } }","class _ { final void releaseContextFromPool(final C context) {
if (Thread.currentThread() != context.createdTracker.getSidedThread()) {
throw new IllegalStateException(""Asynchronous Thread Access to PhaseTracker: "" + context.createdTracker);
 } if (this.cached == context) {
return;
 } if (this.cached == null) {
this.cached = context;
 return;
 } context.createdTracker.getContextPoolFor(this).push(context);
 } }",1
70546,"class _ { public PreparedAttachment(Attachment attachment, String attachmentsDir) throws AttachmentException {
this.attachment = attachment;
 this.tempFile = new File(attachmentsDir, ""temp"" + UUID.randomUUID());
 InputStream attachmentInStream = null;
 OutputStream tempFileOutStream = null;
 MessageDigest sha1 = null;
 try {
attachmentInStream = attachment.getInputStream();
 tempFileOutStream = FileUtils.openOutputStream(this.tempFile);
 sha1 = MessageDigest.getInstance(""SHA-1"");
 int bufSiz = 1024;
 byte buf[] = new byte[bufSiz];
 int bytesRead;
 int totalRead = 0;
 while ((bytesRead = attachmentInStream.read(buf)) != -1) {
sha1.update(buf, 0, bytesRead);
 tempFileOutStream.write(buf, 0, bytesRead);
 totalRead += bytesRead;
 }  this.length = totalRead;
  } catch (IOException e) {
logger.log(Level.WARNING,""Problem reading input or output stream "",e);
 throw new AttachmentNotSavedException(e);
 } catch (NoSuchAlgorithmException e) {
logger.log(Level.WARNING,""Problem calculating SHA1 for attachment stream "",e);
 throw new AttachmentNotSavedException(e);
 } finally {
IOUtils.closeQuietly(attachmentInStream);
 IOUtils.closeQuietly(tempFileOutStream);
 } this.sha1 = sha1.digest();
 } }","class _ { public PreparedAttachment(Attachment attachment, String attachmentsDir) throws AttachmentException {
this.attachment = attachment;
 this.tempFile = new File(attachmentsDir, ""temp"" + UUID.randomUUID());
 InputStream attachmentInStream = null;
 OutputStream tempFileOutStream = null;
 MessageDigest calculateSha1 = null;
 int totalRead = 0;
 try {
attachmentInStream = attachment.getInputStream();
 tempFileOutStream = FileUtils.openOutputStream(this.tempFile);
 calculateSha1 = MessageDigest.getInstance(""SHA-1"");
 int bufferSize = 1024;
 byte[] buffer = new byte[bufferSize];
 int bytesRead;
 while ((bytesRead = attachmentInStream.read(buffer)) != -1) {
calculateSha1.update(buffer, 0, bytesRead);
 tempFileOutStream.write(buffer, 0, bytesRead);
 totalRead += bytesRead;
 } } catch (IOException e) {
logger.log(Level.WARNING, ""Problem reading from input or writing to output stream "", e);
 throw new AttachmentNotSavedException(e);
 } catch (NoSuchAlgorithmException e) {
logger.log(Level.WARNING, ""Problem calculating SHA1 for attachment stream "", e);
 throw new AttachmentNotSavedException(e);
 } finally {
IOUtils.closeQuietly(attachmentInStream);
 IOUtils.closeQuietly(tempFileOutStream);
 } this.length = totalRead;
 this.sha1 = calculateSha1.digest();
 } }",1
70551,"class _ { public UserVideosResponse getUserVideos( @PathParam(""userid"") int userid, @QueryParam(""page"") String page) {
Statement statement = videosByUser.bind(userid).setPageSize(ITEMS_PER_PAGE);
 if (page != null) {
 statement = statement.setPagingState(Bytes.fromHexString(page));
  } ResultSet rs = session.execute(statement);
 String nextPage = Bytes.toHexString(rs.getExecutionInfo().getPagingState());
 int remaining = rs.getAvailableWithoutFetching();
 List<UserVideo> videos = new ArrayList<>(remaining);
 if (remaining > 0) {
for (Row row : rs) {
UserVideo video = new UserVideo(row.getInt(""videoid""), row.getString(""title""), row.getInstant(""added""));
 videos.add(video);
 if (--remaining == 0) {
break;
 } } } URI next = null;
 if (nextPage != null) next = uri.getAbsolutePathBuilder().queryParam(""page"", nextPage).build();
 return new UserVideosResponse(videos, next);
 } }","class _ { public UserVideosResponse getUserVideos( @PathParam(""userid"") int userid, @QueryParam(""page"") String page) {
BoundStatementBuilder statementBuilder = videosByUser.boundStatementBuilder(userid).setPageSize(ITEMS_PER_PAGE);
 if (page != null) {
statementBuilder.setPagingState(Bytes.fromHexString(page));
 } ResultSet rs = session.execute(statementBuilder.build());
 String nextPage = Bytes.toHexString(rs.getExecutionInfo().getPagingState());
 int remaining = rs.getAvailableWithoutFetching();
 List<UserVideo> videos = new ArrayList<>(remaining);
 if (remaining > 0) {
for (Row row : rs) {
UserVideo video = new UserVideo(row.getInt(""videoid""), row.getString(""title""), row.getInstant(""added""));
 videos.add(video);
 if (--remaining == 0) {
break;
 } } } URI next = null;
 if (nextPage != null) next = uri.getAbsolutePathBuilder().queryParam(""page"", nextPage).build();
 return new UserVideosResponse(videos, next);
 } }",1
70553,"class _ { void updateVolumeHostInfo(AllocationAttempt attempt, AllocationCandidate candidate, Long newHost) {
List<Object> storageDriverIds = new ArrayList<>();
 for (Volume v : attempt.getVolumes()) {
if (v.getStorageDriverId() != null) {
storageDriverIds.add(v.getStorageDriverId());
 } } Map<Object, Object> criteria = new HashMap<Object, Object>();
 criteria.put(STORAGE_DRIVER.REMOVED, new io.github.ibuildthecloud.gdapi.condition.Condition(ConditionType.NULL));
 criteria.put(STORAGE_DRIVER.ID, new io.github.ibuildthecloud.gdapi.condition.Condition(ConditionType.IN, storageDriverIds));
 List<StorageDriver> drivers = objectManager.find(StorageDriver.class, criteria);
 Map<Long, StorageDriver> storageDrivers = new HashMap<>();
 for (StorageDriver d : drivers) {
storageDrivers.put(d.getId(), d);
 } for (Volume v : attempt.getVolumes()) {
boolean persist = false;
 StorageDriver d = v.getStorageDriverId() != null ? storageDrivers.get(v.getStorageDriverId()) : null;
 if (d != null && StorageDriverConstants.SCOPE_LOCAL.equals(DataAccessor.fieldString(d, StorageDriverConstants.FIELD_SCOPE))) {
persist = true;
 getAllocatedHostUuidProp(v).set(candidate.getHostUuid());
 } if (VolumeConstants.ACCESS_MODE_SINGLE_HOST_RW.equals(v.getAccessMode())) {
persist = true;
  DataAccessor.setField(v, VolumeConstants.FIELD_LAST_ALLOCATED_HOST_ID, newHost);
  } if (persist) {
objectManager.persist(v);
 } } } }","class _ { void updateVolumeHostInfo(AllocationAttempt attempt, AllocationCandidate candidate, Long newHost) {
List<Object> storageDriverIds = new ArrayList<>();
 for (Volume v : attempt.getVolumes()) {
if (v.getStorageDriverId() != null) {
storageDriverIds.add(v.getStorageDriverId());
 } } Map<Object, Object> criteria = new HashMap<Object, Object>();
 criteria.put(STORAGE_DRIVER.REMOVED, new io.github.ibuildthecloud.gdapi.condition.Condition(ConditionType.NULL));
 criteria.put(STORAGE_DRIVER.ID, new io.github.ibuildthecloud.gdapi.condition.Condition(ConditionType.IN, storageDriverIds));
 List<StorageDriver> drivers = objectManager.find(StorageDriver.class, criteria);
 Map<Long, StorageDriver> storageDrivers = new HashMap<>();
 for (StorageDriver d : drivers) {
storageDrivers.put(d.getId(), d);
 } for (Volume v : attempt.getVolumes()) {
boolean persist = false;
 StorageDriver d = v.getStorageDriverId() != null ? storageDrivers.get(v.getStorageDriverId()) : null;
 if (d != null && StorageDriverConstants.SCOPE_LOCAL.equals(DataAccessor.fieldString(d, StorageDriverConstants.FIELD_SCOPE))) {
persist = true;
 getAllocatedHostUuidProp(v).set(candidate.getHostUuid());
 } if (VolumeConstants.ACCESS_MODE_SINGLE_HOST_RW.equals(v.getAccessMode())) {
persist = true;
 DataAccessor.fromDataFieldOf(v).withKey(VolumeConstants.FIELD_LAST_ALLOCATED_HOST_ID).set(newHost);
 } if (persist) {
objectManager.persist(v);
 } } } }",1
70554,"class _ { public boolean supports(AuthenticationToken token) {
if (!(token instanceof BaseAuthenticationToken)) {
LOGGER.debug( ""The supplied authentication token is not an instance of BaseAuthenticationToken. Sending back not supported."");
 return false;
 } BaseAuthenticationToken authToken = (BaseAuthenticationToken) token;
 Object credentials = authToken.getCredentials();
 if (credentials == null || authToken.getType() != AuthenticationTokenType.USERNAME) {
LOGGER.debug(  ""The supplied authentication token has null/empty credentials. Sending back no supported."");
  return false;
 } LOGGER.debug( ""Token {} is supported by {}."", token.getClass(), UsernamePasswordRealm.class.getName());
 return true;
 } }","class _ { public boolean supports(AuthenticationToken token) {
if (!(token instanceof BaseAuthenticationToken)) {
LOGGER.debug( ""The supplied authentication token is not an instance of BaseAuthenticationToken. Sending back not supported."");
 return false;
 } BaseAuthenticationToken authToken = (BaseAuthenticationToken) token;
 Object credentials = authToken.getCredentials();
 if (credentials == null || authToken.getType() != AuthenticationTokenType.USERNAME) {
LOGGER.debug( ""The supplied authentication token has null/empty credentials. Sending back not supported."");
 return false;
 } if (credentials instanceof String) {
LOGGER.debug( ""Token {} is supported by {}."", token.getClass(), UsernamePasswordRealm.class.getName());
 return true;
 } return false;
 } }",1
70556,"class _ { private By[] getBys(Class<? extends Annotation> singleLocator, Class<? extends Annotation> chainedLocator, Class<? extends Annotation> allLocator) {
AnnotationComparator comparator = new AnnotationComparator();
 AnnotatedElement annotatedElement = annotatedElementContainer.getAnnotated();
  List<Annotation> annotations = new ArrayList<>(asList(annotatedElement.getAnnotationsByType(singleLocator)));
  annotations.addAll(asList(annotatedElement.getAnnotationsByType(chainedLocator)));
 annotations.addAll(asList(annotatedElement.getAnnotationsByType(allLocator)));
 Annotation[] annotationsArray = annotations.toArray(new Annotation[]{});
 sort(annotationsArray, comparator);
 By[] result = new By[] {};
 for (Annotation a: annotationsArray) {
Class<?> annotationClass = a.annotationType();
 if (singleLocator.equals(annotationClass)) {
result = add(result, createBy(new Annotation[] {a}, HowToUseSelectors.USE_ONE));
 continue;
 } Method value;
 Annotation[] set;
 try {
value = annotationClass.getMethod(VALUE, ANNOTATION_ARGUMENTS);
 set = (Annotation[]) value.invoke(a, ANNOTATION_PARAMETERS);
 } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
throw new ClassCastException(String.format(""The annotation '%s' has no convenient '%s' method which "" + ""returns array of annotations"", annotationClass.getName(), VALUE));
 } sort(set, comparator);
 if (chainedLocator.equals(annotationClass)) {
result = add(result, createBy(set, HowToUseSelectors.BUILD_CHAINED));
 continue;
 } if (allLocator.equals(annotationClass)) {
result = add(result, createBy(set, HowToUseSelectors.USE_ANY));
 } } return result;
 } }","class _ { private By[] getBys(Class<? extends Annotation> singleLocator, Class<? extends Annotation> chainedLocator, Class<? extends Annotation> allLocator) {
AnnotationComparator comparator = new AnnotationComparator();
 AnnotatedElement annotatedElement = annotatedElementContainer.getAnnotated();
 List<Annotation> annotations = new ArrayList<>(asList(annotatedElement.getAnnotationsByType(singleLocator)));
 annotations.addAll(asList(annotatedElement.getAnnotationsByType(chainedLocator)));
 annotations.addAll(asList(annotatedElement.getAnnotationsByType(allLocator)));
 annotations.sort(comparator);
 List<By> result = new ArrayList<>();
 for (Annotation a : annotations) {
Class<?> annotationClass = a.annotationType();
 if (singleLocator.equals(annotationClass)) {
result.add(createBy(new Annotation[]{a}, HowToUseSelectors.USE_ONE));
 continue;
 } Method value;
 Annotation[] subLocators;
 try {
value = annotationClass.getMethod(VALUE, ANNOTATION_ARGUMENTS);
 subLocators = (Annotation[]) value.invoke(a, ANNOTATION_PARAMETERS);
 } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
throw new ClassCastException(String.format(""The annotation '%s' has no convenient '%s' method which "" + ""returns array of annotations"", annotationClass.getName(), VALUE));
 } Arrays.sort(subLocators, comparator);
 if (chainedLocator.equals(annotationClass)) {
result.add(createBy(subLocators, HowToUseSelectors.BUILD_CHAINED));
 continue;
 } if (allLocator.equals(annotationClass)) {
result.add(createBy(subLocators, HowToUseSelectors.USE_ANY));
 } } return result.toArray(new By[result.size()]);
 } }",1
70562,"class _ { public static void init() throws FileNotFoundException, IOException, DBException {
Properties props = new Properties();
  props.load(new FileReader(""src/test/resources/workload_rest""));
  rc.setProperties(props);
 rc.init();
 ByteArrayOutputStream out = new ByteArrayOutputStream(SUCCESS_RESPONSE.length());
 GZIPOutputStream gzip = new GZIPOutputStream(out);
 gzip.write(SUCCESS_RESPONSE.getBytes(""UTF-8""));
 gzip.close();
 GZIP_SUCCESS_REPONSE = out.toByteArray();
 while (!Utils.available(port)) {
port++;
 } wireMockRule = new WireMockClassRule(WireMockConfiguration.wireMockConfig().port(port));
 wireMockRule.start();
 } }","class _ { public static void init() throws IOException, DBException, ServletException, LifecycleException, InterruptedException {
String webappDirLocation = IntegrationTest.class.getClassLoader().getResource(""WebContent"").getPath();
 while (!Utils.available(port)) {
port++;
 } tomcat = new Tomcat();
 tomcat.setPort(Integer.valueOf(port));
 Context context = tomcat.addWebapp(""/webService"", new File(webappDirLocation).getAbsolutePath());
 Tomcat.addServlet(context, ""jersey-container-servlet"", resourceConfig());
 context.addServletMapping(""/rest/*"", ""jersey-container-servlet"");
 tomcat.start();
 Thread.sleep(1000);
 Properties props = new Properties();
 props.load(new FileReader(RestClientTest.class.getClassLoader().getResource(""workload_rest"").getPath()));
 props.setProperty(""url.prefix"", props.getProperty(""url.prefix"").replaceAll(""PORT"", port.toString()));
 rc.setProperties(props);
 rc.init();
 } }",1
70563,"class _ { public List<CloudResourceStatus> terminate(AuthenticatedContext ac, CloudStack stack, List<CloudResource> resources) {
AzureClient client = ac.getParameter(AzureClient.class);
 String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), stack);
 Boolean singleResourceGroup = azureResourceGroupMetadataProvider.useSingleResourceGroup(stack);
 if (singleResourceGroup) {
List<CloudResource> cloudResourceList = collectResourcesToRemove(ac, stack, resources, azureUtils.getInstanceList(stack));
 resources.addAll(cloudResourceList);
 azureTerminationHelperService.terminate(ac, stack, resources);
 return check(ac, Collections.emptyList());
 } else {
try {
try {
 retryService.testWith2SecDelayMax5Times(() -> {
if (!client.resourceGroupExists(resourceGroupName)) {
throw new ActionFailedException(""Resource group not exists"");
 } return true;
 });
  client.deleteResourceGroup(resourceGroupName);
 } catch (ActionFailedException ignored) {
LOGGER.debug(""Resource group not found with name: {}"", resourceGroupName);
 } } catch (CloudException e) {
if (e.response().code() != AzureConstants.NOT_FOUND) {
throw new CloudConnectorException(String.format(""Could not delete resource group: %s"", resourceGroupName), e);
 } else {
return check(ac, Collections.emptyList());
 } } return check(ac, resources);
 } } }","class _ { public List<CloudResourceStatus> terminate(AuthenticatedContext ac, CloudStack stack, List<CloudResource> resources) {
AzureClient client = ac.getParameter(AzureClient.class);
 String resourceGroupName = azureResourceGroupMetadataProvider.getResourceGroupName(ac.getCloudContext(), stack);
 Boolean singleResourceGroup = azureResourceGroupMetadataProvider.useSingleResourceGroup(stack);
 if (singleResourceGroup) {
List<CloudResource> cloudResourceList = collectResourcesToRemove(ac, stack, resources, azureUtils.getInstanceList(stack));
 resources.addAll(cloudResourceList);
 azureTerminationHelperService.terminate(ac, stack, resources);
 return check(ac, Collections.emptyList());
 } else {
try {
try {
azureUtils.checkResourceGroupExistence(client, resourceGroupName);
 client.deleteResourceGroup(resourceGroupName);
 } catch (ActionFailedException ignored) {
LOGGER.debug(""Resource group not found with name: {}"", resourceGroupName);
 } } catch (CloudException e) {
if (e.response().code() != AzureConstants.NOT_FOUND) {
throw new CloudConnectorException(String.format(""Could not delete resource group: %s"", resourceGroupName), e);
 } else {
return check(ac, Collections.emptyList());
 } } return check(ac, resources);
 } } }",1
70566,"class _ { public PlanNode makeSegmentPlanNode(IndexSegment indexSegment, QueryContext queryContext) {
 if (QueryContextUtils.isSelectionQuery(queryContext)) {
 return new SelectionPlanNode(indexSegment, queryContext);
 } else if (QueryContextUtils.isDistinctQuery(queryContext)) {
return new DistinctPlanNode(indexSegment, queryContext);
 } else {
assert QueryContextUtils.isAggregationQuery(queryContext);
 List<ExpressionContext> groupByExpressions = queryContext.getGroupByExpressions();
 if (groupByExpressions != null) {
QueryOptions queryOptions = new QueryOptions(queryContext.getQueryOptions());
 if (queryOptions.isGroupByModeSQL()) {
return new AggregationGroupByOrderByPlanNode(indexSegment, queryContext, _maxInitialResultHolderCapacity, _numGroupsLimit);
 } return new AggregationGroupByPlanNode(indexSegment, queryContext, _maxInitialResultHolderCapacity, _numGroupsLimit);
 } else {
if (queryContext.getFilter() == null && indexSegment.getValidDocIndex() == null) {
if (isFitForMetadataBasedPlan(queryContext)) {
return new MetadataBasedAggregationPlanNode(indexSegment, queryContext);
 } else if (isFitForDictionaryBasedPlan(queryContext, indexSegment)) {
return new DictionaryBasedAggregationPlanNode(indexSegment, queryContext);
 } } return new AggregationPlanNode(indexSegment, queryContext);
 } } } }","class _ { public PlanNode makeSegmentPlanNode(IndexSegment indexSegment, QueryContext queryContext) {
if (QueryContextUtils.isAggregationQuery(queryContext)) {
List<ExpressionContext> groupByExpressions = queryContext.getGroupByExpressions();
 if (groupByExpressions != null) {
QueryOptions queryOptions = new QueryOptions(queryContext.getQueryOptions());
 if (queryOptions.isGroupByModeSQL()) {
return new AggregationGroupByOrderByPlanNode(indexSegment, queryContext, _maxInitialResultHolderCapacity, _numGroupsLimit);
 } return new AggregationGroupByPlanNode(indexSegment, queryContext, _maxInitialResultHolderCapacity, _numGroupsLimit);
 } else {
if (queryContext.getFilter() == null && indexSegment.getValidDocIndex() == null) {
if (isFitForMetadataBasedPlan(queryContext)) {
return new MetadataBasedAggregationPlanNode(indexSegment, queryContext);
 } else if (isFitForDictionaryBasedPlan(queryContext, indexSegment)) {
return new DictionaryBasedAggregationPlanNode(indexSegment, queryContext);
 } } return new AggregationPlanNode(indexSegment, queryContext);
 } } else if (QueryContextUtils.isSelectionQuery(queryContext)) {
return new SelectionPlanNode(indexSegment, queryContext);
 } else {
assert QueryContextUtils.isDistinctQuery(queryContext);
 return new DistinctPlanNode(indexSegment, queryContext);
 } } }",1
70568,"class _ { public void setTreatments(List<Treatment> treatments) {
if (treatments != null) {
for (int i = 0;
 i < treatments.size();
 i++) {
treatments.get(i).setDrugs(treatments.get(i).getDrugs());
  treatments.get(i).setPriority(i);
  } this.treatments = new HashSet<>(treatments);
 } } }","class _ { public void setTreatments(List<Treatment> treatments) {
if (treatments != null) {
for (int i = 0;
 i < treatments.size();
 i++) {
treatments.get(i).setDrugs(treatments.get(i).getDrugs());
 if(treatments.get(i).getPriority() == null) {
treatments.get(i).setPriority(i+1);
 } } this.treatments = new HashSet<>(treatments);
 } } }",1
70569,"class _ { public void updated(Dictionary<String, ?> config) throws ConfigurationException {
if (config == null || config.isEmpty()) {
logger.warn(""Empty or null configuration. Ignoring."");
 return;
 } Set<String> names = getNames(config);
 for (String name : names) {
String value = (String) config.get(name + "".serialPort"");
 String serialPort = value != null ? value : MeterDeviceConfig.DEFAULT_SERIAL_PORT;
 value = (String) config.get(name + "".baudRateChangeDelay"");
 int baudRateChangeDelay = value != null ? Integer.valueOf(value) : MeterDeviceConfig.DEFAULT_BAUD_RATE_CHANGE_DELAY;
 value = (String) config.get(name + "".echoHandling"");
 boolean echoHandling = value != null ? Boolean.valueOf(value) : MeterDeviceConfig.DEFAULT_ECHO_HANDLING;
 MeterReader reader = createIec6205621MeterReader(name, new MeterDeviceConfig(serialPort, baudRateChangeDelay, echoHandling));
 if (meterDevices.put(reader.getName(), reader) != null) {
logger.info(""Recreated reader {} with {}!"", reader.getName(), reader.getConfig());
 } else {
logger.info(""Created reader {} with {}!"", reader.getName(), reader.getConfig());
  }  } if (config != null) {
if (StringUtils.isNotBlank((String) config.get(""refresh""))) {
refreshInterval = Long .parseLong((String) config.get(""refresh""));
 } setProperlyConfigured(true);
 } } }","class _ { public void updated(Dictionary<String, ?> config) throws ConfigurationException {
if (config == null || config.isEmpty()) {
logger.warn(""Empty or null configuration. Ignoring."");
 return;
 } Set<String> names = getNames(config);
 for (String name : names) {
String value = (String) config.get(name + "".serialPort"");
 String serialPort = value != null ? value : MeterConfig.DEFAULT_SERIAL_PORT;
 value = (String) config.get(name + "".baudRateChangeDelay"");
 int baudRateChangeDelay = value != null ? Integer.valueOf(value) : MeterConfig.DEFAULT_BAUD_RATE_CHANGE_DELAY;
 value = (String) config.get(name + "".echoHandling"");
 boolean echoHandling = value != null ? Boolean.valueOf(value) : MeterConfig.DEFAULT_ECHO_HANDLING;
 Meter meterConfig = createIec6205621MeterConfig(name, new MeterConfig(serialPort, baudRateChangeDelay, echoHandling));
 if (meterDeviceConfigurtions.put(meterConfig.getName(), meterConfig) != null) {
logger.info(""Recreated reader {} with {}!"", meterConfig.getName(), meterConfig.getConfig());
 } else {
logger.info(""Created reader {} with {}!"", meterConfig.getName(), meterConfig.getConfig());
 } } if (config != null) {
if (StringUtils.isNotBlank((String) config.get(""refresh""))) {
refreshInterval = Long .parseLong((String) config.get(""refresh""));
 } setProperlyConfigured(true);
 } } }",1
70571,"class _ { private static void addModuleTasks(@NotNull DataNode<ModuleData> moduleInfo, @NotNull IdeaModule module, @NotNull DataNode<ProjectData> projectInfo) {
String rootProjectPath = projectInfo.getData().getLinkedExternalProjectPath();
 String moduleConfigPath = GradleUtil.getConfigPath(module.getGradleProject(), rootProjectPath);
 DataNode<?> target = moduleConfigPath.equals(rootProjectPath) ? projectInfo : moduleInfo;
 for (GradleTask task : module.getGradleProject().getTasks()) {
String taskName = task.getName();
  if (taskName == null || taskName.trim().isEmpty() || taskName.toLowerCase().contains(""idea"")) {
 continue;
 } TaskData taskData = new TaskData(GradleConstants.SYSTEM_ID, taskName, moduleConfigPath, task.getDescription());
 target.createChild(ProjectKeys.TASK, taskData);
 } } }","class _ { private static void addModuleTasks(@NotNull DataNode<ModuleData> moduleInfo, @NotNull IdeaModule module, @NotNull DataNode<ProjectData> projectInfo) {
String rootProjectPath = projectInfo.getData().getLinkedExternalProjectPath();
 String moduleConfigPath = GradleUtil.getConfigPath(module.getGradleProject(), rootProjectPath);
 DataNode<?> target = moduleConfigPath.equals(rootProjectPath) ? projectInfo : moduleInfo;
 for (GradleTask task : module.getGradleProject().getTasks()) {
String taskName = task.getName();
 if (taskName == null || taskName.trim().isEmpty() || taskName.startsWith(""idea"") || taskName.endsWith(""Idea"")) {
continue;
 } TaskData taskData = new TaskData(GradleConstants.SYSTEM_ID, taskName, moduleConfigPath, task.getDescription());
 target.createChild(ProjectKeys.TASK, taskData);
 } } }",1
70574,"class _ { public HashCode buildHashCode() {
final HashCode hc = Const.HASH_FUNCTION().newHasher() .putString(Strings.nullToEmpty(aggregator), Const.UTF8_CHARSET) .putBoolean(infectious_nan) .putBoolean(merge_ids) .putBoolean(full_merge) .hash();
 final List<HashCode> hashes = Lists.newArrayListWithCapacity(4);
 hashes.add(super.buildHashCode());
 hashes.add(hc);
 if (tag_keys != null) {
final List<String> keys = Lists.newArrayList(tag_keys);
 Collections.sort(keys);
 final Hasher hasher = Const.HASH_FUNCTION().newHasher();
 for (final String key : keys) {
hasher.putString(key, net.opentsdb.core.Const.UTF8_CHARSET);
 } hashes.add(hasher.hash());
 }  if (encoded_tag_keys != null) {
 final List<byte[]> keys = Lists.newArrayList(encoded_tag_keys);
 final Hasher hasher = Const.HASH_FUNCTION().newHasher();
 for (final byte[] key : keys) {
hasher.putInt(key.hashCode());
 } hashes.add(hasher.hash());
 } return Hashing.combineOrdered(hashes);
 } }","class _ { public HashCode buildHashCode() {
final HashCode hc = Const.HASH_FUNCTION().newHasher() .putString(Strings.nullToEmpty(aggregator), Const.UTF8_CHARSET) .putBoolean(infectious_nan) .putBoolean(merge_ids) .putBoolean(full_merge) .hash();
 final List<HashCode> hashes = Lists.newArrayListWithCapacity(4);
 hashes.add(super.buildHashCode());
 hashes.add(hc);
 if (tag_keys != null) {
final List<String> keys = Lists.newArrayList(tag_keys);
 Collections.sort(keys);
 final Hasher hasher = Const.HASH_FUNCTION().newHasher();
 for (final String key : keys) {
hasher.putString(key, net.opentsdb.core.Const.UTF8_CHARSET);
 } hashes.add(hasher.hash());
 } return Hashing.combineOrdered(hashes);
 } }",1
70578,"class _ { public IndexSnapshot createIndexSnapshot(UnloadedIndexKeyRecordSet indexKeysRecordSet) {
checkArgument(indexKeysRecordSet.getColumnTypes().equals(missingKeysTypes), ""indexKeysRecordSet must have same schema as missingKeys"");
 checkState(!isMemoryExceeded(), ""Max memory exceeded"");
 for (Page page : pages) {
outputPagesIndex.addPage(page);
 } pages.clear();
   LookupSource lookupSource = outputPagesIndex.createLookupSourceSupplier(session, keyOutputChannels, keyOutputHashChannel, Optional.empty(), Optional.empty(), ImmutableList.of()).get();
 UnloadedIndexKeyRecordCursor indexKeysRecordCursor = indexKeysRecordSet.cursor();
 while (indexKeysRecordCursor.advanceNextPosition()) {
Page page = indexKeysRecordCursor.getPage();
 int position = indexKeysRecordCursor.getPosition();
 if (lookupSource.getJoinPosition(position, page, page) < 0) {
missingKeysPageBuilder.declarePosition();
 for (int i = 0;
 i < page.getChannelCount();
 i++) {
Block block = page.getBlock(i);
 Type type = indexKeysRecordCursor.getType(i);
 type.appendTo(block, position, missingKeysPageBuilder.getBlockBuilder(i));
 } } } Page missingKeysPage = missingKeysPageBuilder.build();
 if (!missingKeysPageBuilder.isEmpty()) {
missingKeysPageBuilder.reset();
 } memoryInBytes += missingKeysPage.getSizeInBytes();
 if (isMemoryExceeded()) {
return null;
 } if (missingKeysPage.getPositionCount() != 0) {
missingKeysIndex.addPage(missingKeysPage);
 missingKeys = missingKeysIndex.createLookupSourceSupplier(session, missingKeysChannels).get();
 } return new IndexSnapshot(lookupSource, missingKeys);
 } }","class _ { public IndexSnapshot createIndexSnapshot(UnloadedIndexKeyRecordSet indexKeysRecordSet) {
checkArgument(indexKeysRecordSet.getColumnTypes().equals(missingKeysTypes), ""indexKeysRecordSet must have same schema as missingKeys"");
 checkState(!isMemoryExceeded(), ""Max memory exceeded"");
 for (Page page : pages) {
outputPagesIndex.addPage(page);
 } pages.clear();
 LookupSource lookupSource = outputPagesIndex.createLookupSourceSupplier(session, keyOutputChannels, keyOutputHashChannel, Optional.empty(), Optional.empty(), ImmutableList.of()).get();
 verify(missingKeysPageBuilder.isEmpty());
 UnloadedIndexKeyRecordCursor indexKeysRecordCursor = indexKeysRecordSet.cursor();
 while (indexKeysRecordCursor.advanceNextPosition()) {
Page page = indexKeysRecordCursor.getPage();
 int position = indexKeysRecordCursor.getPosition();
 if (lookupSource.getJoinPosition(position, page, page) < 0) {
missingKeysPageBuilder.declarePosition();
 for (int i = 0;
 i < page.getChannelCount();
 i++) {
Block block = page.getBlock(i);
 Type type = indexKeysRecordCursor.getType(i);
 type.appendTo(block, position, missingKeysPageBuilder.getBlockBuilder(i));
 } } } Page missingKeysPage = missingKeysPageBuilder.build();
 if (!missingKeysPageBuilder.isEmpty()) {
missingKeysPageBuilder.reset();
 } memoryInBytes += missingKeysPage.getSizeInBytes();
 if (isMemoryExceeded()) {
return null;
 } if (missingKeysPage.getPositionCount() != 0) {
missingKeysIndex.addPage(missingKeysPage);
 missingKeys = missingKeysIndex.createLookupSourceSupplier(session, missingKeysChannels).get();
 } return new IndexSnapshot(lookupSource, missingKeys);
 } }",1
70586,"class _ { public String expression(final String nodeIdentifier) {
final Filter filter = this.getFilter();
 return String.format(""toLower(%s.`%s`) %s toLower({
`%s` }) "", nodeIdentifier, filter.getPropertyName(),  filter.getComparisonOperator().getValue(), filter.uniqueParameterName());
  } }","class _ { public String expression(final String nodeIdentifier) {
final Filter filter = this.getFilter();
 return String.format(""toLower(%s.`%s`) %s toLower({
`%s` }) "", nodeIdentifier, filter.getPropertyName(), ComparisonOperator.EQUALS.getValue(), filter.uniqueParameterName());
 } }",1
70587,"class _ {  protected ScheduledExecutorService createDefaultRetryExecutor() {
 return Executors.newScheduledThreadPool( RETRY_THREAD_COUNT, new ThreadFactoryBuilder() .setDaemon(true) .setNameFormat(RETRY_THREADPOOL_NAME + ""-%d"") .build());
 } }","class _ { protected static ScheduledExecutorService createDefaultRetryExecutor() {
return Executors.newScheduledThreadPool( RETRY_THREAD_COUNT, new ThreadFactoryBuilder() .setDaemon(true) .setNameFormat(RETRY_THREADPOOL_NAME + ""-%d"") .build());
 } }",1
70588,"class _ { public void testNominal() {
int count = new java.util.Random().nextInt(10) + 3;
 Variables.register(""count"", count);
 for(int i = 0;
 i < count;
 i++) {
Object key = Random.getObject();
 Long value = Random.getLong();
  Variables.register(""key"", key);
  Variables.register(""value"", value);
 map.insert(key, value);
 } Assert.assertEquals(VariableType.NOMINAL, map.variableType());
 } }","class _ { public void testNominal() {
int count = new java.util.Random().nextInt(10) + 3;
 Variables.register(""count"", count);
 for(int i = 0;
 i < count;
 i++) {
Object key = Variables.register(""key_""+i, Random.getObject());
 Long value = Variables.register(""value_""+i, Random.getLong());
 map.insert(key, value);
 } Assert.assertEquals(VariableType.NOMINAL, map.variableType());
 } }",1
70589,"class _ { public String getString(String key, String defaultValue) {
Object value = getRawProperty(key);
 if (value == null) {
return notFound(key, defaultValue != null ? interpolator.create(getLookup()).resolve(defaultValue) : null);
 } if (value instanceof String) {
 return resolve(value.toString());
  } else {
return value.toString();
 } } }","class _ { public String getString(String key, String defaultValue) {
Object value = getRawProperty(key);
 if (value == null) {
return notFound(key, defaultValue != null ? interpolator.create(getLookup()).resolve(defaultValue) : null);
 } if (value instanceof String) {
return resolve((String)value);
 } else {
return value.toString();
 } } }",1
70593,"class _ { public CacheManagerInfo getCacheManager() {
 String url = ""http://""+this.baseURL+""/rest/""+CACHE_MANAGER_RESOURCE;
  HttpRequest get = HttpRequest.newBuilder() .uri(URI.create(url)) .GET() .build();
 CacheManagerInfo cacheManagerInfo = null;
 try {
response = httpClient.send(get, HttpResponse.BodyHandlers.ofString());
 String json = response.body();
 cacheManagerInfo = mapper.readValue(json, CacheManagerInfo.class);
 } catch (IOException e) {
e.printStackTrace();
 } catch (InterruptedException e) {
e.printStackTrace();
 } return cacheManagerInfo;
 } }","class _ { public CacheManagerInfo getCacheManager() {
String url = String.format(""http://%s:%s/rest/%s"", serverIp, this.defaultPort, CACHE_MANAGER_RESOURCE);
 HttpRequest get = HttpRequest.newBuilder() .uri(URI.create(url)) .GET() .build();
 CacheManagerInfo cacheManagerInfo = null;
 try {
response = httpClient.send(get, HttpResponse.BodyHandlers.ofString());
 String json = response.body();
 cacheManagerInfo = mapper.readValue(json, CacheManagerInfo.class);
 } catch (IOException e) {
e.printStackTrace();
 } catch (InterruptedException e) {
e.printStackTrace();
 } return cacheManagerInfo;
 } }",1
70597,"class _ { public static JsonParser enterPath(JsonParser parser, String path) throws IOException {
if (!parser.isExpectedStartObjectToken()) return null;
 JsonToken value;
 while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {
if (value == null) {
 throw new IOException(""End of input while parsing object."");
  } if (parser.getCurrentName().equals(path) && value != JsonToken.VALUE_NULL) {
return parser;
 } else {
parser.skipChildren();
 } } return null;
 } }","class _ { public static JsonParser enterPath(JsonParser parser, String path) throws IOException {
if (!parser.isExpectedStartObjectToken()) return null;
 JsonToken value;
 while ((value = parser.nextValue()) != JsonToken.END_OBJECT) {
if (value == null) {
return null;
 } if (parser.getCurrentName().equals(path) && value != JsonToken.VALUE_NULL) {
return parser;
 } else {
parser.skipChildren();
 } } return null;
 } }",1
70600,"class _ { void setData(List<List<String>> listOfGroups) {
this.listOfGroups.clear();
  this.listOfGroups = listOfGroups;
  notifyDataSetChanged();
 delegate.setNoGroup();
 } }","class _ { void setData(List<List<String>> listOfGroups) {
this.listOfGroups.clear();
 this.listOfGroups.addAll(listOfGroups);
 notifyDataSetChanged();
 } }",1
70601,"class _ { public void build(TopologyBuilder bldr, Set<String> stageNames) {
 StreamletUtils.require(false, ""build() in StreamletShadow should NOT be invoked"");
  } }","class _ { public void build(TopologyBuilder bldr, Set<String> stageNames) {
throw new UnsupportedOperationException(""build() in StreamletShadow should NOT be invoked"");
 } }",1
70602,"class _ { private String computeDynamicValue(AbstractBuild build, String parameterizedValue) throws IllegalStateException, InterruptedException, IOException {
String value = parameterizedValue;
 while (value != null && value.contains(""${"")) {
int start = value.indexOf(""${"", 0);
  int end = value.indexOf(""}"", start);
  String parameter = value.substring(start + 2, end);
 String parameterValue = build.getEnvironment(TaskListener.NULL).get(parameter);
 if (parameterValue == null) {
throw new IllegalStateException(parameter);
 } value = value.substring(0, start) + parameterValue + (value.length() > end + 1 ? value.substring(end + 1) : """");
 } logger.fine(""oldValue = "" + parameterizedValue + "";
 newValue = "" + value);
 return value;
 } }","class _ { private String computeDynamicValue(AbstractBuild build, String parameterizedValue) throws IllegalStateException, InterruptedException, IOException {
final EnvVars envVars = build.getEnvironment(TaskListener.NULL);
 final VariableResolver<String> environmentVariables = new VariableResolver<String>() {
public String resolve(String name) {
return envVars.get(name);
 } };
 final BuildVariableResolver buildVariables = new BuildVariableResolver(build.getProject());
 @SuppressWarnings(""unchecked"") final Union<String> bothVariables = new VariableResolver.Union<String>(buildVariables, environmentVariables);
 String value = Util.replaceMacro(parameterizedValue, bothVariables);
 logger.fine(""oldValue = "" + parameterizedValue + "";
 newValue = "" + value);
 return value;
 } }",1
70605,"class _ { public ChannelFuture writeOneInbound(Object msg, ChannelPromise promise) {
if (checkOpen(true)) {
if (!config().isAutoRead()) {
tempInboundMessages().add(msg);
 } else {
pipeline().fireChannelRead(msg);
 } }  return checkException(promise);
  } }","class _ { public ChannelFuture writeOneInbound(Object msg, ChannelPromise promise) {
if (checkOpen(true)) {
if (!config().isAutoRead()) {
Queue<AbstractMap.SimpleEntry<Object, ChannelPromise>> tempInboundMessages = tempInboundMessages();
 tempInboundMessages.add(new AbstractMap.SimpleEntry<Object, ChannelPromise>(msg, promise));
 return promise;
 } else {
pipeline().fireChannelRead(msg);
 } } return checkException(promise);
 } }",1
70607,"class _ { public boolean connect(String port) throws Exception {
if (controller == null) {
error(""arduino is invalid"");
 return false;
 }  PortConnector arduino = (PortConnector) controller;
  arduino.connect(port);
 if (!arduino.isConnected()) {
error(""torso arduino on port %s not connected"", port);
 return false;
 } topStom.attach(controller, 27, topStom.getRest(), topStom.getVelocity());
 midStom.attach(controller, 28, midStom.getRest(), midStom.getVelocity());
 lowStom.attach(controller, 29, lowStom.getRest(), lowStom.getVelocity());
 enableAutoEnable(true);
 broadcastState();
 return true;
 } }","class _ { public boolean connect(String port) throws Exception {
if (controller == null) {
error(""arduino is invalid"");
 return false;
 } if (controller instanceof PortConnector) {
PortConnector arduino = (PortConnector) controller;
 arduino.connect(port);
 if (!arduino.isConnected()) {
error(""torso arduino on port %s not connected"", port);
 return false;
 } } topStom.attach(controller, 27, topStom.getRest(), topStom.getVelocity());
 midStom.attach(controller, 28, midStom.getRest(), midStom.getVelocity());
 lowStom.attach(controller, 29, lowStom.getRest(), lowStom.getVelocity());
 enableAutoEnable(true);
 broadcastState();
 return true;
 } }",1
70608,"class _ { public ConstraintWeightDescriptor(ConstraintConfigurationDescriptor<Solution_> constraintConfigurationDescriptor, MemberAccessor memberAccessor) {
this.constraintConfigurationDescriptor = constraintConfigurationDescriptor;
 ConstraintWeight constraintWeightAnnotation = memberAccessor.getAnnotation(ConstraintWeight.class);
 String constraintPackage = constraintPackage = constraintWeightAnnotation.constraintPackage();
 if (constraintPackage.isEmpty()) {
 ConstraintConfiguration packAnnotation = memberAccessor.getDeclaringClass().getAnnotation(ConstraintConfiguration.class);
  if (packAnnotation == null) {
throw new IllegalStateException(""Impossible state: "" + ConstraintConfigurationDescriptor.class.getSimpleName() + "" only reflects over members with a "" + ConstraintConfiguration.class.getSimpleName() + "" annotation."");
 } constraintPackage = packAnnotation.constraintPackage();
 if (constraintPackage.isEmpty()) {
constraintPackage = memberAccessor.getDeclaringClass().getPackage().getName();
 } } this.constraintPackage = constraintPackage;
 this.constraintName = constraintWeightAnnotation.value();
 this.memberAccessor = memberAccessor;
 } }","class _ { public ConstraintWeightDescriptor(ConstraintConfigurationDescriptor<Solution_> constraintConfigurationDescriptor, MemberAccessor memberAccessor) {
this.constraintConfigurationDescriptor = constraintConfigurationDescriptor;
 ConstraintWeight constraintWeightAnnotation = memberAccessor.getAnnotation(ConstraintWeight.class);
 String constraintPackage = constraintWeightAnnotation.constraintPackage();
 if (constraintPackage.isEmpty()) {
ConstraintConfiguration constraintConfigurationAnnotation = memberAccessor.getDeclaringClass() .getAnnotation(ConstraintConfiguration.class);
 if (constraintConfigurationAnnotation == null) {
throw new IllegalStateException(""Impossible state: "" + ConstraintConfigurationDescriptor.class.getSimpleName() + "" only reflects over members with a "" + ConstraintConfiguration.class.getSimpleName() + "" annotation."");
 } constraintPackage = constraintConfigurationAnnotation.constraintPackage();
 if (constraintPackage.isEmpty()) {
constraintPackage = memberAccessor.getDeclaringClass().getPackage().getName();
 } } this.constraintPackage = constraintPackage;
 this.constraintName = constraintWeightAnnotation.value();
 this.memberAccessor = memberAccessor;
 } }",1
70613,"class _ { public static String encryptPassword(String password) {
String result = password;
 String keyFile = Config.<String> GetValue(ConfigValues.keystoreUrl, Config.DefaultConfigurationVersion);
 String passwd = Config.<String> GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
 String alias = Config.<String> GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
 try {
result = EncryptionUtils.encrypt((String) result, keyFile, passwd, alias);
 } catch (Exception e) {
 result = password;
  } return result;
 } }","class _ { public static String encryptPassword(String password) {
String result = password;
 String keyFile = Config.<String> GetValue(ConfigValues.keystoreUrl, Config.DefaultConfigurationVersion);
 String passwd = Config.<String> GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion);
 String alias = Config.<String> GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion);
 try {
result = EncryptionUtils.encrypt((String) result, keyFile, passwd, alias);
 } catch (Exception e) {
log.errorFormat(""Failed to encrpyt password, error message: {0}"", e.getMessage());
 throw new SecurityException(e);
 } return result;
 } }",1
70614,"class _ { public void testSameInstanceForSameForceReturnValues() {
RemoteCache<String, String> rcDontForceReturn = remoteCacheManager.getCache(false);
 RemoteCache<String, String> rcDontForceReturn2 = remoteCacheManager.getCache(false);
  assert rcDontForceReturn == rcDontForceReturn2;
  RemoteCache<String, String> rcForceReturn = remoteCacheManager.getCache(true);
 RemoteCache<String, String> rcForceReturn2 = remoteCacheManager.getCache(true);
 assert rcForceReturn == rcForceReturn2;
 } }","class _ { public void testSameInstanceForSameForceReturnValues() {
RemoteCache<String, String> rcDontForceReturn = remoteCacheManager.getCache(false);
 RemoteCache<String, String> rcDontForceReturn2 = remoteCacheManager.getCache(false);
 assertSame(""RemoteCache instances should be the same"", rcDontForceReturn, rcDontForceReturn2);
 RemoteCache<String, String> rcForceReturn = remoteCacheManager.getCache(true);
 RemoteCache<String, String> rcForceReturn2 = remoteCacheManager.getCache(true);
 assertSame(""RemoteCache instances should be the same"", rcForceReturn, rcForceReturn2);
 } }",1
70616,"class _ { protected void onCreate(@Nullable Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
 setContentView(R.layout.activity_project_management);
 pref = PreferenceManager.getDefaultSharedPreferences(this);
 db = ((TranslationRecorderApp)getApplication()).getDatabase();
 Toolbar mToolbar = (Toolbar) findViewById(R.id.project_management_toolbar);
 setSupportActionBar(mToolbar);
 if (getSupportActionBar() != null) {
ImageView imageView = findViewById(R.id.identicon);
 getSupportActionBar().setDisplayShowTitleEnabled(false);
 int userId = pref.getInt(Settings.KEY_PROFILE, -1);
 final User user = db.getUser(userId);
 String svg = Jdenticon.Companion.toSvg(user.getHash(), 512, 0f);
 imageView.setBackground(Sharp.loadString(svg).getDrawable());
 imageView.setLayerType(View.LAYER_TYPE_SOFTWARE, null);
  imageView.setOnClickListener(identiconPlayerClick(user.getAudio().toString()));
  } if (savedInstanceState != null) {
mZipping = savedInstanceState.getBoolean(STATE_ZIPPING, false);
 mExporting = savedInstanceState.getBoolean(STATE_EXPORTING, false);
 mProgress = savedInstanceState.getInt(STATE_PROGRESS, 0);
 mProgressTitle = savedInstanceState.getString(STATE_PROGRESS_TITLE, null);
 mDbResyncing = savedInstanceState.getBoolean(STATE_RESYNC, false);
 } } }","class _ { protected void onCreate(@Nullable Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
 setContentView(R.layout.activity_project_management);
 pref = PreferenceManager.getDefaultSharedPreferences(this);
 db = ((TranslationRecorderApp)getApplication()).getDatabase();
 Toolbar mToolbar = (Toolbar) findViewById(R.id.project_management_toolbar);
 setSupportActionBar(mToolbar);
 if (getSupportActionBar() != null) {
getSupportActionBar().setDisplayShowTitleEnabled(false);
 initializeIdenticon();
 } if (savedInstanceState != null) {
mZipping = savedInstanceState.getBoolean(STATE_ZIPPING, false);
 mExporting = savedInstanceState.getBoolean(STATE_EXPORTING, false);
 mProgress = savedInstanceState.getInt(STATE_PROGRESS, 0);
 mProgressTitle = savedInstanceState.getString(STATE_PROGRESS_TITLE, null);
 mDbResyncing = savedInstanceState.getBoolean(STATE_RESYNC, false);
 } } }",1
70617,"class _ { public void test_int_and_long_value() throws Exception {
Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110};
 Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null,  Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 102L};
  int i = 0;
 int j = 0;
 for (VariableTree variableTree : variables) {
if (variableTree.simpleName().name().startsWith(""x"")) {
assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]);
 } else if (variableTree.simpleName().name().startsWith(""y"")) {
assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]);
 } } } }","class _ { public void test_int_and_long_value() throws Exception {
Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110};
 Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L};
 int i = 0;
 int j = 0;
 for (VariableTree variableTree : variables) {
if (variableTree.simpleName().name().startsWith(""x"")) {
assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]);
 } else if (variableTree.simpleName().name().startsWith(""y"")) {
assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]);
 } } } }",1
70620,"class _ { public String getImageUrl(String imageName) {
for (WebElement elem:imagesNewFiles) {
String href = elem.findElement(parentBy).getAttribute(""href"");
 if (href.contains(imageName)){
return href;
 } }  return null;
  } }","class _ { public String getImageUrl(String imageName) {
for (WebElement elem:imagesNewFiles) {
String href = elem.findElement(parentBy).getAttribute(""href"");
 if (href.contains(imageName)){
return href;
 } } throw new RuntimeException(""there is no "" + imageName + "" on Special:NewFiles page"");
 } }",1
70622,"class _ { private <T> ListenableFuture<Collection<Map.Entry<Cell, T>>> getWithPostFilteringAsync( TableReference tableRef, Map<Cell, Value> rawResults, Function<Value, T> transformer, AsyncKeyValueService asyncKeyValueService, AsyncTransactionService asyncTransactionService) {
long bytes = 0;
 for (Map.Entry<Cell, Value> entry : rawResults.entrySet()) {
bytes += entry.getValue().getContents().length + Cells.getApproxSizeOfCell(entry.getKey());
 } if (bytes > TransactionConstants.WARN_LEVEL_FOR_QUEUED_BYTES && log.isWarnEnabled()) {
log.warn(""A single get had quite a few bytes: {} for table {}. The number of results was {}. "" + ""Enable debug logging for more information."", SafeArg.of(""numBytes"", bytes), LoggingArgs.tableRef(tableRef), SafeArg.of(""numResults"", rawResults.size()));
 if (log.isDebugEnabled()) {
log.debug(""The first 10 results of your request were {}."", UnsafeArg.of(""results"", Iterables.limit(rawResults.entrySet(), 10)), new SafeRuntimeException(""This exception and stack trace are provided for debugging purposes""));
 } getHistogram(AtlasDbMetricNames.SNAPSHOT_TRANSACTION_TOO_MANY_BYTES_READ, tableRef).update(bytes);
 } getMeter(AtlasDbMetricNames.SNAPSHOT_TRANSACTION_CELLS_READ, tableRef).mark(rawResults.size());
 Collection<Map.Entry<Cell, T>> resultsAccumulator = new LinkedList<>();
 if (AtlasDbConstants.HIDDEN_TABLES.contains(tableRef)) {
Preconditions.checkState(allowHiddenTableAccess, ""hidden tables cannot be read in this transaction"");
 for (Map.Entry<Cell, Value> e : rawResults.entrySet()) {
resultsAccumulator.add(  new AbstractMap.SimpleImmutableEntry<>(e.getKey(), transformer.apply(e.getValue())));
  } return Futures.immediateFuture(resultsAccumulator);
 } AtomicInteger resultCount = new AtomicInteger();
 return Futures.transformAsync( Futures.immediateFuture(rawResults), remainingResultsToPostFilter -> getWithPostFilteringIterate(tableRef, remainingResultsToPostFilter, resultCount, resultsAccumulator, transformer, asyncKeyValueService, asyncTransactionService), MoreExecutors.directExecutor());
 } }","class _ { private <T> ListenableFuture<Collection<Map.Entry<Cell, T>>> getWithPostFilteringAsync( TableReference tableRef, Map<Cell, Value> rawResults, Function<Value, T> transformer, AsyncKeyValueService asyncKeyValueService, AsyncTransactionService asyncTransactionService) {
long bytes = 0;
 for (Map.Entry<Cell, Value> entry : rawResults.entrySet()) {
bytes += entry.getValue().getContents().length + Cells.getApproxSizeOfCell(entry.getKey());
 } if (bytes > TransactionConstants.WARN_LEVEL_FOR_QUEUED_BYTES && log.isWarnEnabled()) {
log.warn(""A single get had quite a few bytes: {} for table {}. The number of results was {}. "" + ""Enable debug logging for more information."", SafeArg.of(""numBytes"", bytes), LoggingArgs.tableRef(tableRef), SafeArg.of(""numResults"", rawResults.size()));
 if (log.isDebugEnabled()) {
log.debug(""The first 10 results of your request were {}."", UnsafeArg.of(""results"", Iterables.limit(rawResults.entrySet(), 10)), new SafeRuntimeException(""This exception and stack trace are provided for debugging purposes""));
 } getHistogram(AtlasDbMetricNames.SNAPSHOT_TRANSACTION_TOO_MANY_BYTES_READ, tableRef).update(bytes);
 } getMeter(AtlasDbMetricNames.SNAPSHOT_TRANSACTION_CELLS_READ, tableRef).mark(rawResults.size());
 Collection<Map.Entry<Cell, T>> resultsAccumulator = new LinkedList<>();
 if (AtlasDbConstants.HIDDEN_TABLES.contains(tableRef)) {
Preconditions.checkState(allowHiddenTableAccess, ""hidden tables cannot be read in this transaction"");
 for (Map.Entry<Cell, Value> e : rawResults.entrySet()) {
resultsAccumulator.add( Maps.immutableEntry(e.getKey(), transformer.apply(e.getValue())));
 } return Futures.immediateFuture(resultsAccumulator);
 } return Futures.transformAsync( Futures.immediateFuture(rawResults), remainingResultsToPostFilter -> getWithPostFilteringIterate(tableRef, remainingResultsToPostFilter, resultsAccumulator, transformer, asyncKeyValueService, asyncTransactionService), MoreExecutors.directExecutor());
 } }",1
70623,"class _ { public Integer call() throws Exception {
PrintWriter writer = null;
 int passes = 0;
 int failures = 0;
 try {
writer = writer(outputFile);
 ListMultimap<String, Interpretation> expected = read(expectedFile);
 ListMultimap<String, Interpretation> observed = read(observedFile);
 for (String sample : observed.keySet()) {
 for (Interpretation e : expected.get(sample)) {
 Genotype expectedGenotype = asGenotype(e);
 for (Haplotype expectedHaplotype : expectedGenotype.getHaplotypes()) {
for (AlleleList expectedAlleleList : expectedHaplotype.getAlleleLists()) {
if (shouldValidate(e, expectedAlleleList)) {
for (Allele expectedAllele : expectedAlleleList.getAlleles()) {
boolean match = false;
 for (Interpretation o : observed.get(sample)) {
AlleleList observedAlleleList = asAlleleList(o);
 if (sameLocus(observedAlleleList, expectedAlleleList)) {
if (shouldValidate(o, observedAlleleList)) {
for (Allele observedAllele : observedAlleleList.getAlleles()) {
if (matchByField(expectedAllele.getGlstring(), observedAllele.getGlstring()) >= resolution) {
match = true;
 break;
 } } } } if (match) {
passes++;
 } else {
failures++;
 } } if (!printSummary) {
writer.println((match ? ""PASS"" : ""FAIL"") + ""\t"" + sample + ""\t"" + expectedAllele);
 } } } } } } } if (printSummary) {
writer.println(""PASS\t"" + passes);
 writer.println(""FAIL\t"" + failures);
 } return 0;
 } finally {
try {
writer.close();
 } catch (Exception e) {
e.printStackTrace();
 System.exit(1);
 } } } }","class _ { public Integer call() throws Exception {
PrintWriter writer = null;
 int passes = 0;
 int failures = 0;
 try {
writer = writer(outputFile);
 ListMultimap<String, Interpretation> expected = read(expectedFile);
 ListMultimap<String, Interpretation> observed = read(observedFile);
 for (String sample : observed.keySet()) {
for (Interpretation e : expected.get(sample)) {
Genotype expectedGenotype = asGenotype(e);
 for (Haplotype expectedHaplotype : expectedGenotype.getHaplotypes()) {
for (AlleleList expectedAlleleList : expectedHaplotype.getAlleleLists()) {
if (shouldValidate(e, expectedAlleleList)) {
for (Allele expectedAllele : expectedAlleleList.getAlleles()) {
boolean match = false;
 for (Interpretation o : observed.get(sample)) {
AlleleList observedAlleleList = asAlleleList(o);
 if (sameLocus(observedAlleleList, expectedAlleleList)) {
for (Allele observedAllele : observedAlleleList.getAlleles()) {
if (matchByField(expectedAllele.getGlstring(), observedAllele.getGlstring()) >= resolution) {
match = true;
 break;
 } } } if (match) {
passes++;
 } else {
failures++;
 } } if (!printSummary) {
writer.println((match ? ""PASS"" : ""FAIL"") + ""\t"" + sample + ""\t"" + expectedAllele);
 } } } } } } } if (printSummary) {
writer.println(""PASS\t"" + passes);
 writer.println(""FAIL\t"" + failures);
 } return 0;
 } finally {
try {
writer.close();
 } catch (Exception e) {
e.printStackTrace();
 System.exit(1);
 } } } }",1
70624,"class _ { public void channelRead0(ChannelHandlerContext ctx, HttpObject in) {
long currentChunkReceiveTime = System.currentTimeMillis();
 boolean recognized = false;
 if (in instanceof HttpResponse) {
recognized = true;
 long responseReceiveStart = currentChunkReceiveTime - requestStartTime;
 perfClientMetrics.timeToFirstResponseChunkInMs.update(responseReceiveStart);
 logger.trace(""Response receive has started on channel {}. Took {} ms"", ctx.channel(), responseReceiveStart);
 response = (HttpResponse) in;
 if (response.status() != HttpResponseStatus.OK) {
 logger.error(""Got Response code {} and header was {}"", response.status().code(), response.headers());
  } } if (in instanceof HttpContent) {
recognized = true;
 perfClientMetrics.delayBetweenChunkReceiveInMs.update(currentChunkReceiveTime - lastChunkReceiveTime);
 chunksReceived++;
 int bytesReceivedThisTime = ((HttpContent) in).content().readableBytes();
 sizeReceived += bytesReceivedThisTime;
 perfClientMetrics.bytesReceiveRate.mark(bytesReceivedThisTime);
 if (in instanceof LastHttpContent) {
long requestRoundTripTime = currentChunkReceiveTime - requestStartTime;
 perfClientMetrics.requestRoundTripTimeInMs.update(requestRoundTripTime);
 perfClientMetrics.getContentSizeInBytes.update(sizeReceived);
 perfClientMetrics.getChunkCount.update(chunksReceived);
 logger.trace( ""Final content received on channel {}. Took {} ms. Total chunks received - {}. Total size received - {}"", ctx.channel(), requestRoundTripTime, chunksReceived, sizeReceived);
 if (HttpUtil.isKeepAlive(response) && isRunning) {
logger.trace(""Sending new request on channel {}"", ctx.channel());
 sendRequest(ctx);
 } else if (!isRunning) {
logger.info(""Closing channel {} because NettyPerfClient has been shutdown"", ctx.channel());
 ctx.close();
 } else {
perfClientMetrics.requestResponseError.inc();
 logger.error(""Channel {} not kept alive. Last response status was {} and header was {}"", ctx.channel(), response.status(), response.headers());
 ctx.close();
 } } } if (!recognized) {
throw new IllegalStateException(""Unexpected HttpObject - "" + in.getClass());
 } lastChunkReceiveTime = currentChunkReceiveTime;
 } }","class _ { public void channelRead0(ChannelHandlerContext ctx, HttpObject in) {
long currentChunkReceiveTime = System.currentTimeMillis();
 boolean recognized = false;
 if (in instanceof HttpResponse) {
recognized = true;
 long responseReceiveStart = currentChunkReceiveTime - requestStartTime;
 perfClientMetrics.timeToFirstResponseChunkInMs.update(responseReceiveStart);
 logger.trace(""Response receive has started on channel {}. Took {} ms"", ctx.channel(), responseReceiveStart);
 response = (HttpResponse) in;
 if (response.status() != HttpResponseStatus.OK) {
logger.error(""Got Response code {} and headers were {}"", response.status().code(), response.headers());
 } } if (in instanceof HttpContent) {
recognized = true;
 perfClientMetrics.delayBetweenChunkReceiveInMs.update(currentChunkReceiveTime - lastChunkReceiveTime);
 chunksReceived++;
 int bytesReceivedThisTime = ((HttpContent) in).content().readableBytes();
 sizeReceived += bytesReceivedThisTime;
 perfClientMetrics.bytesReceiveRate.mark(bytesReceivedThisTime);
 if (in instanceof LastHttpContent) {
long requestRoundTripTime = currentChunkReceiveTime - requestStartTime;
 perfClientMetrics.requestRoundTripTimeInMs.update(requestRoundTripTime);
 perfClientMetrics.getContentSizeInBytes.update(sizeReceived);
 perfClientMetrics.getChunkCount.update(chunksReceived);
 logger.trace( ""Final content received on channel {}. Took {} ms. Total chunks received - {}. Total size received - {}"", ctx.channel(), requestRoundTripTime, chunksReceived, sizeReceived);
 if (HttpUtil.isKeepAlive(response) && isRunning) {
logger.trace(""Sending new request on channel {}"", ctx.channel());
 sendRequest(ctx);
 } else if (!isRunning) {
logger.info(""Closing channel {} because NettyPerfClient has been shutdown"", ctx.channel());
 ctx.close();
 } else {
perfClientMetrics.requestResponseError.inc();
 logger.error(""Channel {} not kept alive. Last response status was {} and header was {}"", ctx.channel(), response.status(), response.headers());
 ctx.close();
 } } } if (!recognized) {
throw new IllegalStateException(""Unexpected HttpObject - "" + in.getClass());
 } lastChunkReceiveTime = currentChunkReceiveTime;
 } }",1
70625,"class _ { private long getPullIndex( File storeDir ) throws IOException {
ReadOnlyTransactionIdStore txIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDir );
 long lastCleanTxId = txIdStore.getLastCommittedTransactionId();
 ReadOnlyTransactionStore txStore = new ReadOnlyTransactionStore( pageCache, fs, storeDir, new Monitors() );
 long lastTxId = BASE_TX_ID;
 try ( Lifespan ignored = new Lifespan( txStore ) ) {
try ( TransactionCursor cursor = txStore.getTransactions( lastCleanTxId ) )  {
 while ( cursor.next() ) {
CommittedTransactionRepresentation tx = cursor.get();
 lastTxId = tx.getCommitEntry().getTxId();
 } if ( lastTxId < lastCleanTxId ) {
throw new IllegalStateException( ""Metadata index was higher than transaction log index."" );
 } return lastTxId + 1;
 } catch ( NoSuchTransactionException e ) {
log.info( ""No transaction logs found. Will use metadata store as base for pull request."" );
 return lastCleanTxId;
 } } } }","class _ { private long getPullIndex( File storeDir ) throws IOException {
ReadOnlyTransactionIdStore txIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDir );
 long lastCleanTxId = txIdStore.getLastCommittedTransactionId();
 ReadOnlyTransactionStore txStore = new ReadOnlyTransactionStore( pageCache, fs, storeDir, new Monitors() );
 long lastTxId = BASE_TX_ID;
 try ( Lifespan ignored = new Lifespan( txStore );
 TransactionCursor cursor = txStore.getTransactions( lastCleanTxId ) ) {
while ( cursor.next() ) {
CommittedTransactionRepresentation tx = cursor.get();
 lastTxId = tx.getCommitEntry().getTxId();
 } if ( lastTxId < lastCleanTxId ) {
throw new IllegalStateException( ""Metadata index was higher than transaction log index."" );
 } return lastTxId + 1;
 } catch ( NoSuchTransactionException e ) {
log.info( ""No transaction logs found. Will use metadata store as base for pull request."" );
 return lastCleanTxId;
 } } }",1
70627,"class _ { private boolean hasOSGiManifest(IContainer container) {
try {
IFile manifestResource = container.getFile(new Path(""META-INF/MANIFEST.MF""));
 if (manifestResource.exists()) {
Manifest manifest = new Manifest();
  InputStream stream = manifestResource.getContents();
  manifest.read(stream);
 stream.close();
 return manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME) != null;
 } } catch (Exception ex) {
PDEPlugin.log(ex);
 } return false;
 } }","class _ { private boolean hasOSGiManifest(IContainer container) {
IFile manifestResource = container.getFile(new Path(ICoreConstants.BUILD_FILENAME_DESCRIPTOR));
 if (manifestResource.exists()) {
Manifest manifest = new Manifest();
 try (InputStream stream = manifestResource.getContents()) {
manifest.read(stream);
 return manifest.getMainAttributes().getValue(Constants.BUNDLE_SYMBOLICNAME) != null;
 } catch (CoreException | IOException ex) {
PDEPlugin.log(ex);
 } } return false;
 } }",1
70628,"class _ { public UserExtSource getUserExtSourceFromMultipleIdentifiers(PerunSession sess, PerunPrincipal principal) throws InternalErrorException, UserExtSourceNotExistsException, WrongReferenceAttributeValueException {
String additionalIdentifiers = principal.getAdditionalInformations().get(additionalIdentifiersAttributeName);
 if (additionalIdentifiers == null) {
 throw new WrongReferenceAttributeValueException(""Principal's mandatory attribute is not defined: "".concat(additionalIdentifiersAttributeName));
  } UserExtSource ues = null;
 for(String identifier : additionalIdentifiers.split(multivalueAttributeSeparatorRegExp)) {
try {
ues = perunBl.getUsersManagerBl().getUserExtSourceByUniqueAttributeValue(sess, additionalIdentifiersPerunAttributeName, identifier);
 log.debug(""UserExtSource found using additional identifiers: "" + ues);
 break;
 } catch (UserExtSourceNotExistsException ex) {
} catch (InternalErrorException | AttributeNotExistsException ex) {
String errorMessage = ""Mandatory attribute is not defined: "".concat(additionalIdentifiersPerunAttributeName);
 log.error(errorMessage);
 throw new InternalErrorException(errorMessage, ex);
 } } if (ues == null) throw new UserExtSourceNotExistsException(""User ext source was not found. Searched value is any from \"""" + additionalIdentifiers + ""\"" in "" + additionalIdentifiersPerunAttributeName);
 return ues;
 } }","class _ { public UserExtSource getUserExtSourceFromMultipleIdentifiers(PerunSession sess, PerunPrincipal principal) throws UserExtSourceNotExistsException {
String additionalIdentifiers = principal.getAdditionalInformations().get(additionalIdentifiersAttributeName);
 if (additionalIdentifiers == null) {
throw new InternalErrorException(""Entry "" + additionalIdentifiersAttributeName + "" is not defined in the principal's additional information. Either it was not provided by external source used for sign-in or the mapping configuration is wrong."");
 } UserExtSource ues = null;
 for(String identifier : additionalIdentifiers.split(multivalueAttributeSeparatorRegExp)) {
try {
ues = perunBl.getUsersManagerBl().getUserExtSourceByUniqueAttributeValue(sess, additionalIdentifiersPerunAttributeName, identifier);
 log.debug(""UserExtSource found using additional identifiers: "" + ues);
 break;
 } catch (UserExtSourceNotExistsException ex) {
} catch (AttributeNotExistsException ex) {
String errorMessage = ""Mandatory attribute is not defined: "".concat(additionalIdentifiersPerunAttributeName);
 log.error(errorMessage);
 throw new InternalErrorException(errorMessage, ex);
 } } if (ues == null) throw new UserExtSourceNotExistsException(""User ext source was not found. Searched value is any from \"""" + additionalIdentifiers + ""\"" in "" + additionalIdentifiersPerunAttributeName);
 return ues;
 } }",1
70631,"class _ {  protected FileStrategyConfiguration (  final Types type, final Integer syncFileAfterRecords, final Duration syncFileAfterDuration, final String workingDir, final String publishDir) {
this.type = type;
 this.syncDileAfterRecords = syncFileAfterRecords;
 this.syncFileAfterDuration = syncFileAfterDuration;
 this.workingDir = workingDir;
 this.publishDir = publishDir;
 } }","class _ { private FileStrategyConfiguration ( final Types type, final Integer syncFileAfterRecords, final Duration syncFileAfterDuration, final String workingDir, final String publishDir) {
this.type = type;
 this.syncFileAfterRecords = syncFileAfterRecords;
 this.syncFileAfterDuration = syncFileAfterDuration;
 this.workingDir = workingDir;
 this.publishDir = publishDir;
 } }",1
70632,"class _ { private void clearMetadata(Entry entry) {
entry.setAuthor(null);
 entry.setEmail(null);
  entry.setDescription(null);
  } }","class _ { private void clearMetadata(Entry entry) {
entry.setAuthor(null);
 entry.setEmail(null);
 entry.setDescription(WDL_SYNTAX_ERROR);
 } }",1
70635,"class _ { public void testRefundWithSplit() throws Throwable {
transaction = transactionFactory.createCreditCardTransactionWithoutPinMode();
 transaction.setCapture(true);
 transaction.setAmount(10000);
 Collection<SplitRule> splitRules = new ArrayList<SplitRule>();
 Recipient recipient1 = recipientFactory.create();
 recipient1.save();
 SplitRule splitRule = new SplitRule();
 splitRule.setRecipientId(recipient1.getId());
 splitRule.setPercentage(50);
 splitRule.setLiable(true);
 splitRule.setChargeProcessingFee(true);
 splitRules.add(splitRule);
 Recipient recipient2 = recipientFactory.create();
 SplitRule splitRule2 = new SplitRule();
 recipient2.save();
 splitRule2.setRecipientId(recipient2.getId());
 splitRule2.setPercentage(50);
 splitRule2.setLiable(true);
 splitRule2.setChargeProcessingFee(true);
 splitRules.add(splitRule2);
 transaction.setSplitRules(splitRules);
 transaction.save();
 Transaction foundTransaction = new Transaction().find(transaction.getId());
 List<SplitRule> foundSplitRules = (List<SplitRule>) foundTransaction.getSplitRules();
 foundSplitRules.get(0).setAmount(2000);
 foundSplitRules.get(1).setAmount(2000);
 Integer refundedAmount = 4000;
 foundTransaction.refundWithSplit(refundedAmount, foundSplitRules);
 assertEquals(refundedAmount, foundTransaction.getRefundedAmount());
 List<Payable> payables = (List<Payable>) foundTransaction.payables();
  Integer payableExcpetedAmount = -2000;
  assertEquals(payables.get(0).getAmount(), payableExcpetedAmount);
 assertEquals(payables.get(1).getAmount(), payableExcpetedAmount);
 } }","class _ { public void testRefundWithSplit() throws Throwable {
transaction = transactionFactory.createCreditCardTransactionWithoutPinMode();
 transaction.setCapture(true);
 transaction.setAmount(10000);
 Collection<SplitRule> splitRules = new ArrayList<SplitRule>();
 Recipient recipient1 = recipientFactory.create();
 recipient1.save();
 SplitRule splitRule = new SplitRule();
 splitRule.setRecipientId(recipient1.getId());
 splitRule.setPercentage(50);
 splitRule.setLiable(true);
 splitRule.setChargeProcessingFee(true);
 splitRules.add(splitRule);
 Recipient recipient2 = recipientFactory.create();
 SplitRule splitRule2 = new SplitRule();
 recipient2.save();
 splitRule2.setRecipientId(recipient2.getId());
 splitRule2.setPercentage(50);
 splitRule2.setLiable(true);
 splitRule2.setChargeProcessingFee(true);
 splitRules.add(splitRule2);
 transaction.setSplitRules(splitRules);
 transaction.save();
 Transaction foundTransaction = new Transaction().find(transaction.getId());
 List<SplitRule> foundSplitRules = (List<SplitRule>) foundTransaction.getSplitRules();
 foundSplitRules.get(0).setAmount(2000);
 foundSplitRules.get(1).setAmount(2000);
 Integer refundedAmount = 4000;
 foundTransaction.refundWithSplit(refundedAmount, foundSplitRules);
 assertEquals(refundedAmount, foundTransaction.getRefundedAmount());
 List<Payable> payables = (List<Payable>) foundTransaction.payables();
 Integer payableExpectedAmount = -2000;
 assertEquals(payables.get(0).getAmount(), payableExpectedAmount);
 assertEquals(payables.get(1).getAmount(), payableExpectedAmount);
 } }",1
70639,"class _ { public Map<Field, List<GraphQLDirective>> getImmediateDirectivesByField() {
computeValuesLazily();
  return new LinkedHashMap<>(fieldDirectivesMap);
  } }","class _ { public Map<Field, List<GraphQLDirective>> getImmediateDirectivesByField() {
computeValuesLazily();
 return fieldDirectivesByField;
 } }",1
70645,"class _ { public PoolDTO createPool(@PathParam(""owner_key"") @Verify(Owner.class) String ownerKey, @ApiParam(name = ""pool"", required = true) PoolDTO inputPoolDTO) {
log.info(""Creating custom pool for owner {}: {}"" + ownerKey, inputPoolDTO);
 Pool pool = new Pool();
 Owner owner = findOwnerByKey(ownerKey);
 pool.setOwner(owner);
 this.populateEntity(pool, inputPoolDTO);
  pool = resolverUtil.resolvePool(pool);
  pool = poolManager.createAndEnrichPools(pool);
 return this.translator.translate(pool, PoolDTO.class);
 } }","class _ { public PoolDTO createPool(@PathParam(""owner_key"") @Verify(Owner.class) String ownerKey, @ApiParam(name = ""pool"", required = true) PoolDTO inputPoolDTO) {
log.info(""Creating custom pool for owner {}: {}"" + ownerKey, inputPoolDTO);
 Pool pool = new Pool();
 Owner owner = findOwnerByKey(ownerKey);
 pool.setOwner(owner);
 this.populateEntity(pool, inputPoolDTO);
 pool = poolManager.createAndEnrichPools(pool);
 return this.translator.translate(pool, PoolDTO.class);
 } }",1
70646,"class _ { public static void init() {
System.setProperty(""zookeeper.authProvider.1"", ""org.apache.zookeeper.server.auth.SASLAuthenticationProvider"");
 try {
File tmpDir = createTmpDir();
 File saslConfFile = new File(tmpDir, ""jaas.conf"");
 FileWriter fwriter = new FileWriter(saslConfFile);
  fwriter.write("""" + ""Server {\n""  + "" org.apache.zookeeper.server.auth.DigestLoginModule required\n"" + "" user_super=\""test\"";
\n"" + ""};
\n"" + ""Client {\n"" + "" org.apache.zookeeper.server.auth.DigestLoginModule required\n"" + "" username=\""super\""\n"" + "" password=\""test\"";
\n"" + ""};
"" + ""\n"");
 fwriter.close();
 System.setProperty(""java.security.auth.login.config"", saslConfFile.getAbsolutePath());
 } catch (IOException e) {
} } }","class _ { public static void init() {
System.setProperty(""zookeeper.authProvider.1"", ""org.apache.zookeeper.server.auth.SASLAuthenticationProvider"");
 try {
File tmpDir = createTmpDir();
 File saslConfFile = new File(tmpDir, ""jaas.conf"");
 String jaasContent = getJaasFileContent();
 FileWriter fwriter = new FileWriter(saslConfFile);
 fwriter.write(jaasContent);
 fwriter.close();
 System.setProperty(""java.security.auth.login.config"", saslConfFile.getAbsolutePath());
 } catch (IOException e) {
} } }",1
70652,"class _ { public List<String> getParentIds() {
List<DocumentModel> parents = getCoreSession().getParentDocuments(doc.getRef());
 Collections.reverse(parents);
  List<String> res = new ArrayList<>();
 for (DocumentModel doc : parents) {
BundleGroup bgroup = doc.getAdapter(BundleGroup.class);
 if (bgroup != null) {
res.add(bgroup.getId());
 } } return res;
  } }","class _ { public List<String> getParentIds() {
List<DocumentModel> parents = getCoreSession().getParentDocuments(doc.getRef());
 return parents.stream() .sorted(Collections.reverseOrder()) .map(doc -> doc.getAdapter(BundleGroup.class)) .filter(Objects::nonNull) .map(BundleGroup::getId) .collect(Collectors.toList());
 } }",1
70656,"class _ { private static Class<?> getNumericClass(int total, int decimal) {
if (decimal <= 0) {
if (total > 18 || total == 0) {
return BigInteger.class;
  } else if (total > 9 || total == 0) {
 return Long.class;
 } else if (total > 4) {
return Integer.class;
 } else if (total > 2) {
return Short.class;
 } else if (total > 0) {
return Byte.class;
 } else {
return Boolean.class;
 } } else {
return BigDecimal.class;
 } } }","class _ { private static Class<?> getNumericClass(int total, int decimal) {
if (decimal <= 0) {
if (total > 18 || total == 0) {
return BigInteger.class;
 } else if (total > 9) {
return Long.class;
 } else if (total > 4) {
return Integer.class;
 } else if (total > 2) {
return Short.class;
 } else {
return Byte.class;
 } } else {
return BigDecimal.class;
 } } }",1
70658,"class _ { public List<String> getExportedResources() throws IOException {
if (exportedResources == null) {
exportedResources = new ArrayList<>();
 for (Path resourcePath : pom.getResourcesLocation()) {
exportedResources.addAll(getResources(resourcePath));
 } if (!pom.getResourcesLocation() .stream()  .anyMatch(path -> path.endsWith(Paths.get(""src"", ""main"", ""mule"")))) {
 exportedResources.addAll(getResources(projectStructure.getConfigsPath()));
 } } return exportedResources;
 } }","class _ { public List<String> getExportedResources() throws IOException {
if (exportedResources == null) {
exportedResources = new ArrayList<>();
 for (Path resourcePath : pom.getResourcesLocation()) {
exportedResources.addAll(getResources(resourcePath));
 } if (!pom.getResourcesLocation() .stream() .anyMatch(path -> path.endsWith(get(""src"", ""main"", ""mule"")))) {
exportedResources.addAll(getResources(projectStructure.getConfigsPath()));
 } } return exportedResources;
 } }",1
70659,"class _ { public PropertyMapping build() {
String sourceElement = getSourceElement();
 Type sourceType = getSourceType();
 String sourceRefStr;
 if ( targetWriteAccessorType == TargetWriteAccessorType.ADDER && sourceType.isCollectionType() ) {
sourceType = sourceType.getTypeParameters().get( 0 );
 sourceRefStr = Executables.getElementNameForAdder( targetWriteAccessor );
 } else {
sourceRefStr = getSourceRef();
 } boolean preferUpdateMethods;
 if ( targetWriteAccessorType == TargetWriteAccessorType.ADDER ) {
preferUpdateMethods = false;
 } else {
preferUpdateMethods = method.getMappingTargetParameter() != null;
 } Assignment assignment = ctx.getMappingResolver().getTargetAssignment( method, sourceElement, sourceType, targetType, targetPropertyName, formattingParameters, selectionParameters, sourceRefStr, preferUpdateMethods );
 if ( assignment == null ) {
 if ( (sourceType.isCollectionType() || sourceType.isArrayType()) && (targetType.isIterableType()) ) {
 assignment = forgeIterableMapping( sourceType, targetType, sourceRefStr, method.getExecutable() );
 } else if ( sourceType.isMapType() && targetType.isMapType() ) {
assignment = forgeMapMapping( sourceType, targetType, sourceRefStr, method.getExecutable() );
 } } if ( assignment != null ) {
if ( targetType.isCollectionOrMapType() ) {
assignment = assignToCollection( targetType, targetWriteAccessorType, assignment );
 } else if ( targetType.isArrayType() && sourceType.isArrayType() && assignment.getType() == DIRECT ) {
assignment = assignToArray( targetType, assignment );
 } else {
assignment = assignToPlain( sourceType, targetType, targetWriteAccessorType, assignment );
 } } else {
ctx.getMessager().printMessage( method.getExecutable(), Message.PROPERTYMAPPING_MAPPING_NOT_FOUND, sourceElement, targetType, targetPropertyName, targetType, getSourceType() );
 } return new PropertyMapping( targetPropertyName, sourceReference.getParameter().getName(), targetWriteAccessor.getSimpleName().toString(), targetReadAccessor != null ? targetReadAccessor.getSimpleName().toString() : null, targetType, localTargetVarName, assignment, dependsOn, getDefaultValueAssignment() );
 } }","class _ { public PropertyMapping build() {
String sourceElement = getSourceElement();
 Type sourceType = getSourceType();
 String sourceRefStr;
 if ( targetWriteAccessorType == TargetWriteAccessorType.ADDER && sourceType.isCollectionType() ) {
sourceType = sourceType.getTypeParameters().get( 0 );
 sourceRefStr = Executables.getElementNameForAdder( targetWriteAccessor );
 } else {
sourceRefStr = getSourceRef();
 } boolean preferUpdateMethods;
 if ( targetWriteAccessorType == TargetWriteAccessorType.ADDER ) {
preferUpdateMethods = false;
 } else {
preferUpdateMethods = method.getMappingTargetParameter() != null;
 } Assignment assignment = ctx.getMappingResolver().getTargetAssignment( method, sourceElement, sourceType, targetType, targetPropertyName, formattingParameters, selectionParameters, sourceRefStr, preferUpdateMethods );
 if ( assignment == null ) {
if ( (sourceType.isCollectionType() || sourceType.isArrayType()) && targetType.isIterableType() ) {
assignment = forgeIterableMapping( sourceType, targetType, sourceRefStr, method.getExecutable() );
 } else if ( sourceType.isMapType() && targetType.isMapType() ) {
assignment = forgeMapMapping( sourceType, targetType, sourceRefStr, method.getExecutable() );
 } } if ( assignment != null ) {
if ( targetType.isCollectionOrMapType() ) {
assignment = assignToCollection( targetType, targetWriteAccessorType, assignment );
 } else if ( targetType.isArrayType() && sourceType.isArrayType() && assignment.getType() == DIRECT ) {
assignment = assignToArray( targetType, assignment );
 } else {
assignment = assignToPlain( sourceType, targetType, targetWriteAccessorType, assignment );
 } } else {
ctx.getMessager().printMessage( method.getExecutable(), Message.PROPERTYMAPPING_MAPPING_NOT_FOUND, sourceElement, targetType, targetPropertyName, targetType, getSourceType() );
 } return new PropertyMapping( targetPropertyName, sourceReference.getParameter().getName(), targetWriteAccessor.getSimpleName().toString(), targetReadAccessor != null ? targetReadAccessor.getSimpleName().toString() : null, targetType, localTargetVarName, assignment, dependsOn, getDefaultValueAssignment() );
 } }",1
70661,"class _ { private void processKafkaMessages() throws Exception {
try {
m_executorService = createImporterExecutor(m_loader, this, this);
 if (m_args.useSuppliedProcedure) {
m_log.info(""Kafka Consumer from topic: "" + m_args.topic + "" Started using procedure: "" + m_args.procedure);
 } else {
m_log.info(""Kafka Consumer from topic: "" + m_args.topic + "" Started for table: "" + m_args.table);
 } m_executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
 } catch (Throwable terminate) {
m_log.error(""Error in Kafka Consumer"", terminate);
 System.exit(-1);
 } finally {
 close();
  } } }","class _ { private void processKafkaMessages() throws Exception {
try {
m_executorService = createImporterExecutor(this, this);
 if (m_args.useSuppliedProcedure) {
m_log.info(""Kafka Consumer from topic: "" + m_args.topic + "" Started using procedure: "" + m_args.procedure);
 } else {
m_log.info(""Kafka Consumer from topic: "" + m_args.topic + "" Started for table: "" + m_args.table);
 } m_executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
 } catch (Throwable terminate) {
m_log.error(""Error in Kafka Consumer"", terminate);
 } finally {
close();
 } System.exit(-1);
 } }",1
70662,"class _ { public double getBaseOperationCost() throws StandardException {
double cost = 0.0;
 if (operand != null) {
if (getConstantLength() == -1) {
 cost += SIMPLE_OP_COST * operand.getTypeServices().getNull().getLength();
  } cost += SIMPLE_OP_COST * FN_CALL_COST_FACTOR;
 } return cost;
 } }","class _ { public double getBaseOperationCost() throws StandardException {
double cost = 0.0;
 if (operand != null) {
if (getConstantLength() == -1) {
cost += SIMPLE_OP_COST * Math.min(operand.getTypeServices().getNull().getLength(), 16);
 } cost += SIMPLE_OP_COST * FN_CALL_COST_FACTOR;
 } return cost;
 } }",1
70664,"class _ { private static void zip(StaplerResponse rsp, VirtualFile root, VirtualFile dir, String glob) throws IOException, InterruptedException {
OutputStream outputStream = rsp.getOutputStream();
 try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {
zos.setEncoding(System.getProperty(""file.encoding""));
 for (String n : dir.list(glob.isEmpty() ? ""**"" : glob, null, true)) {
String relativePath;
 if (glob.length() == 0) {
relativePath = dir.getName() + '/' + n;
 } else {
relativePath = n;
 } String targetFile = dir.toString().substring(root.toString().length()) + n;
 if (!ALLOW_SYMLINK_ESCAPE && root.supportIsDescendant() && !root.isDescendant(targetFile)) {
 LOGGER.log(Level.FINE, ""Trying to access a file outside of the directory: "" + root + "", illicit target: "" + targetFile);
  } else {
ZipEntry e = new ZipEntry(relativePath.replace('\\', '/'));
 VirtualFile f = dir.child(n);
 e.setTime(f.lastModified());
 zos.putNextEntry(e);
 try (InputStream in = f.open()) {
IOUtils.copy(in, zos);
 } zos.closeEntry();
 } } } } }","class _ { private static void zip(StaplerResponse rsp, VirtualFile root, VirtualFile dir, String glob) throws IOException, InterruptedException {
boolean messageAlreadyPutInLog = false;
 OutputStream outputStream = rsp.getOutputStream();
 try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {
zos.setEncoding(System.getProperty(""file.encoding""));
 for (String n : dir.list(glob.isEmpty() ? ""**"" : glob, null, true)) {
String relativePath;
 if (glob.length() == 0) {
relativePath = dir.getName() + '/' + n;
 } else {
relativePath = n;
 } String targetFile = dir.toString().substring(root.toString().length()) + n;
 if (!ALLOW_SYMLINK_ESCAPE && root.supportIsDescendant() && !root.isDescendant(targetFile)) {
if (!messageAlreadyPutInLog) {
messageAlreadyPutInLog = true;
 LOGGER.log(Level.FINE, ""Trying to access a file outside of the directory: {0}, forbidden target: {1}. This message is only sent once per request."", new Object[] {root, targetFile});
 } } else {
ZipEntry e = new ZipEntry(relativePath.replace('\\', '/'));
 VirtualFile f = dir.child(n);
 e.setTime(f.lastModified());
 zos.putNextEntry(e);
 try (InputStream in = f.open()) {
IOUtils.copy(in, zos);
 } zos.closeEntry();
 } } } } }",1
70665,"class _ { public static List<Path> unrollPaths(final Collection<Path> inputs, final String... extensions) {
if (extensions.length < 1) throw new IllegalArgumentException(""Must provide at least one extension."");
 final Stack<Path> stack = new Stack<>();
 final List<Path> output = new ArrayList<>();
 stack.addAll(inputs);
 while (!stack.empty()) {
final Path p = stack.pop();
 final String name = p.toString();
 boolean matched = false;
 for (final String ext : extensions) {
if (!matched && name.endsWith(ext)) {
output.add(p);
 matched = true;
 } } if (!matched) {
try {
Files.lines(p) .map(String::trim) .filter(s -> !s.isEmpty()) .forEach(s -> {
final Path innerPath;
 try {
innerPath = getPath(s);
 stack.push(innerPath);
 } catch (IOException e) {
throw new IllegalArgumentException(""cannot convert "" + s + "" to a Path."");
 } } );
 } catch (IOException e) {
 throw new IllegalArgumentException(""had trouble reading from "" + p.toUri().toString());
  } } } Collections.reverse(output);
 return output;
 } }","class _ { public static List<Path> unrollPaths(final Collection<Path> inputs, final String... extensions) {
if (extensions.length < 1) throw new IllegalArgumentException(""Must provide at least one extension."");
 final Stack<Path> stack = new Stack<>();
 final List<Path> output = new ArrayList<>();
 stack.addAll(inputs);
 while (!stack.empty()) {
final Path p = stack.pop();
 final String name = p.toString();
 boolean matched = false;
 for (final String ext : extensions) {
if (!matched && name.endsWith(ext)) {
output.add(p);
 matched = true;
 } } if (!matched) {
try {
Files.lines(p) .map(String::trim) .filter(s -> !s.isEmpty()) .forEach(s -> {
final Path innerPath;
 try {
innerPath = getPath(s);
 stack.push(innerPath);
 } catch (IOException e) {
throw new IllegalArgumentException(""cannot convert "" + s + "" to a Path."", e);
 } } );
 } catch (IOException e) {
throw new IllegalArgumentException(""had trouble reading from "" + p.toUri().toString(), e);
 } } } Collections.reverse(output);
 return output;
 } }",1
70670,"class _ { public void deregisterSpecialPathInfo( SpecialPathInfo pathInfo, String pkgType ) {
 for ( Map.Entry<String, SpecialPathSet> entry : pkgtypes.entrySet() )  {
if ( pkgType.equals( entry.getKey() ) ) {
entry.getValue().deregisterSpecialPathInfo( pathInfo );
 } } } }","class _ { public void deregisterSpecialPathInfo( SpecialPathInfo pathInfo, String pkgType ) {
pkgtypes.get(pkgType).deregisterSpecialPathInfo( pathInfo );
 } }",1
70672,"class _ { protected VmDevice createVmDevice() {
return new VmDevice(new VmDeviceId(disk.getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK.getName(), """", null, true, getParameters().isPlugUnPlug(), getDiskVmElement().isReadOnly(),  FeatureSupported.isDomainXMLSupported(getVm().getClusterCompatibilityVersion()) ?  String.format(""%s%s"", DomainXmlUtils.USER_ALIAS_PREFIX, disk.getId()) : """", null, getParameters().getSnapshotId(), null);
 } }","class _ { protected VmDevice createVmDevice() {
return new VmDevice(new VmDeviceId(disk.getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK.getName(), """", null, true, getParameters().isPlugUnPlug(), getDiskVmElement().isReadOnly(), getDeviceAliasForDisk(disk), null, getParameters().getSnapshotId(), null);
 } }",1
70673,"class _ { private synchronized void loadColumnDefintions(VitroRequest vitroRequest) {
if (!loadedColumnDefinitions) {
loadedColumnDefinitions = true;
 ConfigurationProperties properties = ConfigurationProperties.getBean(vitroRequest);
 if (properties != null) {
String groupsDefsStr = properties.getProperty(""histogram.groups"");
 if (!StringUtils.isEmpty(groupsDefsStr)) {
Map<String, String[]> loadedGroupsTypeMap = new HashMap<>();
 String[] loadedGroups = groupsDefsStr.split(""\\s*,\\s*"");
 for (String group : loadedGroups) {
if (StringUtils.isEmpty(group)) {
log.error(""Error in groups definition for publications count: "" + groupsDefsStr);
 return;
 } String typeStr = properties.getProperty(""histogram.types.for."" + group);
  String[] types = null;
  if (StringUtils.isEmpty(typeStr)) {
log.error(""Error in type definition for publication count: histogram.types.for."" + group);
 return;
 } loadedGroupsTypeMap.put(group, typeStr.split(""\\s*,\\s*""));
 } pubsGroups = loadedGroups;
 groupTypeMap = loadedGroupsTypeMap;
 } } } } }","class _ { private synchronized void loadColumnDefintions(VitroRequest vitroRequest) {
if (!loadedColumnDefinitions) {
loadedColumnDefinitions = true;
 ConfigurationProperties properties = ConfigurationProperties.getBean(vitroRequest);
 if (properties != null) {
String groupsDefsStr = properties.getProperty(""histogram.groups"");
 if (!StringUtils.isEmpty(groupsDefsStr)) {
Map<String, String[]> loadedGroupsTypeMap = new HashMap<>();
 String[] loadedGroups = groupsDefsStr.split(""\\s*,\\s*"");
 for (String group : loadedGroups) {
if (StringUtils.isEmpty(group)) {
log.error(""Error in groups definition for publications count: "" + groupsDefsStr);
 return;
 } String typeStr = properties.getProperty(""histogram.types.for."" + group);
 if (StringUtils.isEmpty(typeStr)) {
log.error(""Error in type definition for publication count: histogram.types.for."" + group);
 return;
 } loadedGroupsTypeMap.put(group, typeStr.split(""\\s*,\\s*""));
 } pubsGroups = loadedGroups;
 groupTypeMap = loadedGroupsTypeMap;
 } } } } }",1
70674,"class _ { public void run() {
LOG.debug(""Creating new event pack"");
 EventPack pack = new EventPack(packSize);
 while (isRunning()) {
try {
FileTailerEvent event = queue.take();
 pack.add(event);
 if (pack.isFull()) {
LOG.debug(""Event pack is full"");
 uploadEventPack(pack);
 LOG.debug(""Saving File Tailer state"");
 stateProcessor.saveState(pack.getState());
 LOG.debug(""Cleanup event pack"");
 pack.clear();
 } } catch (InterruptedException e) {
LOG.info(""Sink was interrupted"");
 break;
 } catch (IOException e) {
 LOG.info(""Exception while sending events"", e);
  break;
 } } LOG.info(""Sink stopped."");
 } }","class _ { public void run() {
LOG.debug(""Creating new event pack"");
 EventPack pack = new EventPack(packSize);
 List<FileTailerEvent> events = new ArrayList<FileTailerEvent>(packSize);
 while (isRunning()) {
try {
queue.drainTo(events, pack.getFreeSize());
 pack.addAll(events);
 events.clear();
 if (pack.isFull()) {
LOG.debug(""Event pack is full"");
 uploadEventPack(pack);
 LOG.debug(""Saving File Tailer state"");
 stateProcessor.saveState(pack.getState());
 LOG.debug(""Cleanup event pack"");
 pack.clear();
 } } catch (InterruptedException e) {
LOG.info(""Sink was interrupted"");
 break;
 } catch (IOException e) {
LOG.warn(""Exception while sending events"", e);
 break;
 } } LOG.info(""Sink stopped."");
 } }",1
70676,"class _ {  public int hashCode() {
 int result = binary != null ? binary.hashCode() : 0;
 result = 31 * result + (host != null ? host.hashCode() : 0);
 result = 31 * result + (state != null ? state.hashCode() : 0);
 result = 31 * result + (status != null ? status.hashCode() : 0);
 result = 31 * result + (disabledReason != null ? disabledReason.hashCode() : 0);
 result = 31 * result + (updated != null ? updated.hashCode() : 0);
 result = 31 * result + (zone != null ? zone.hashCode() : 0);
 result = 31 * result + (id != null ? id.hashCode() : 0);
 return result;
 } }","class _ { public int hashCode() {
return Objects.hashCode(binary, host, state, status, disabledReason, updated, zone, id);
 } }",1
70678,"class _ { public void enter() {
if (mMostRecentState == BluetoothProfile.STATE_CONNECTING) {
onConnectionStateChanged(BluetoothProfile.STATE_CONNECTED);
 BluetoothMediaBrowserService.addressedPlayerChanged(mSessionCallbacks);
 } else {
 Log.d(STATE_TAG,  ""ReEnteringConnecting"");
 } super.enter();
 } }","class _ { public void enter() {
if (mMostRecentState == BluetoothProfile.STATE_CONNECTING) {
broadcastConnectionStateChanged(BluetoothProfile.STATE_CONNECTED);
 BluetoothMediaBrowserService.addressedPlayerChanged(mSessionCallbacks);
 } else {
logD(STATE_TAG, ""ReEnteringConnected"");
 } super.enter();
 } }",1
70684,"class _ { CompletableFuture<Boolean> actualRemoveMaxIdleExpireEntry(K key, V value, long maxIdle, boolean skipLocking) {
CompletableFuture<Boolean> completableFuture = new CompletableFuture<>();
 Object expiringObject = expiring.putIfAbsent(key, completableFuture);
 if (expiringObject == null) {
if (trace) {
log.tracef(""Submitting expiration removal for key %s which had maxIdle of %s"", toStr(key), maxIdle);
 } completableFuture.whenComplete((b, t) -> expiring.remove(key, completableFuture));
 try {
AdvancedCache<K, V> cacheToUse = skipLocking ? cache.withFlags(Flag.SKIP_LOCKING) : cache;
 CompletableFuture<Boolean> future = removeMaxIdle(cacheToUse, key, value);
 future.whenComplete((b, t) -> {
 if (t != null) {
 completableFuture.completeExceptionally(t);
 } else {
completableFuture.complete(b);
 } });
 return completableFuture;
 } catch (Throwable t) {
completableFuture.completeExceptionally(t);
 throw t;
 } } else if (expiringObject instanceof CompletableFuture) {
return (CompletableFuture<Boolean>) expiringObject;
 } else {
return CompletableFutures.completedTrue();
 } } }","class _ { CompletableFuture<Boolean> actualRemoveMaxIdleExpireEntry(K key, V value, long maxIdle, boolean skipLocking) {
CompletableFuture<Boolean> completableFuture = new CompletableFuture<>();
 Object expiringObject = expiring.putIfAbsent(key, completableFuture);
 if (expiringObject == null) {
if (trace) {
log.tracef(""Submitting expiration removal for key %s which had maxIdle of %s"", toStr(key), maxIdle);
 } completableFuture.whenComplete((b, t) -> expiring.remove(key, completableFuture));
 try {
AdvancedCache<K, V> cacheToUse = skipLocking ? cache.withFlags(Flag.SKIP_LOCKING) : cache;
 CompletableFuture<Boolean> future = removeMaxIdle(cacheToUse, key, value);
 return future.whenComplete((b, t) -> {
if (t != null) {
completableFuture.completeExceptionally(t);
 } else {
completableFuture.complete(b);
 } });
 } catch (Throwable t) {
completableFuture.completeExceptionally(t);
 throw t;
 } } else if (expiringObject instanceof CompletableFuture) {
return (CompletableFuture<Boolean>) expiringObject;
 } else {
return CompletableFutures.completedTrue();
 } } }",1
70686,"class _ { private URL getKVPurl(String baseUrl, TileIdentifier tileIdentifier) throws RuntimeException {
if(!baseUrl.contains(""?"")) {
baseUrl+=""?"";
 } HashMap<String, Object> params = new HashMap<>();
 params.put(""service"", ""WMTS"");
 params.put(""version"", ""1.0.0"");
 params.put(""request"", ""getTile"");
 params.put(""layer"", service.getLayerName());
 params.put(""style"", service.getStyleName());
 params.put(""format"", service.getFormat());
 params.put(""tilematrixset"", service.getTileMatrixSetName());
 params.put(""TileMatrix"", service.getTileMatrix(tileIdentifier.getZ()).getIdentifier());
 params.put(""TileCol"", tileIdentifier.getX());
 params.put(""TileRow"", tileIdentifier.getY());
 StringBuilder arguments = new StringBuilder();
 for(String p:params.keySet()) {
try {
arguments.append(p).append(""="").append(URLEncoder.encode(params.get(p).toString(),""UTF-8""));
 arguments.append('&');
  }catch (Exception e) {
 } } try {
return new URL(baseUrl+arguments.toString());
 } catch (MalformedURLException e) {
throw new RuntimeException(e);
 } } }","class _ { private URL getKVPurl(String baseUrl, TileIdentifier tileIdentifier) throws RuntimeException {
if (!baseUrl.contains(""?"")) {
baseUrl += ""?"";
 } HashMap<String, Object> params = new HashMap<>();
 params.put(""service"", ""WMTS"");
 params.put(""version"", ""1.0.0"");
 params.put(""request"", ""getTile"");
 params.put(""layer"", service.getLayerName());
 params.put(""style"", service.getStyleName());
 params.put(""format"", service.getFormat());
 params.put(""tilematrixset"", service.getTileMatrixSetName());
 params.put(""TileMatrix"", service.getTileMatrix(tileIdentifier.getZ()).getIdentifier());
 params.put(""TileCol"", tileIdentifier.getX());
 params.put(""TileRow"", tileIdentifier.getY());
 StringBuilder arguments = new StringBuilder();
 for (String key : params.keySet()) {
Object val = params.get(key);
 try {
if (val != null) {
arguments.append(key).append(""="");
 arguments.append(URLEncoder.encode(val.toString(), ""UTF-8""));
 arguments.append('&');
 } } catch (Exception e) {
LOGGER.warning(""Could not encode param '"" + key + ""' with value '"" + val + ""'"");
 } } try {
return new URL(baseUrl + arguments.toString());
 } catch (MalformedURLException e) {
throw new RuntimeException(e);
 } } }",1
70689,"class _ { public long getQueryCount() {
 return 0;
  } }","class _ { public long getQueryCount() {
throw new UnsupportedOperationException(""Queries on replicated maps are not supported."");
 } }",1
70690,"class _ { public void showIssue(String repoId, int id, boolean isPullRequest, boolean isForceRefresh) {
if (isPullRequest) {
logger.info(""Showing pull request #"" + id);
 runBrowserOperation(() -> driver.get(GitHubURL.getPathForPullRequest(repoId, id), isForceRefresh));
 runBrowserOperation(() -> driver.scrollToBottom());
 } else {
logger.info(""Showing issue #"" + id);
 runBrowserOperation(() -> driver.get(GitHubURL.getPathForIssue(repoId, id), isForceRefresh));
  runBrowserOperation(() -> driver.scrollToBottom());
  } } }","class _ { public void showIssue(String repoId, int id, boolean isPullRequest, boolean isForceRefresh) {
if (isPullRequest) {
logger.info(""Showing pull request #"" + id);
 runBrowserOperation(() -> driver.get(GitHubURL.getPathForPullRequest(repoId, id), isForceRefresh));
 } else {
logger.info(""Showing issue #"" + id);
 runBrowserOperation(() -> driver.get(GitHubURL.getPathForIssue(repoId, id), isForceRefresh));
 } runBrowserOperation(() -> scrollToBottom());
 } }",1
70692,"class _ { public static ImmutableBitmap matchPredicate( final String dimension, final BitmapIndexSelector selector, final Predicate<String> predicate ) {
if (predicate == null) {
 return selector.getBitmapFactory().makeEmptyImmutableBitmap();
  } final Indexed<String> dimValues = selector.getDimensionValues(dimension);
 if (dimValues == null || dimValues.size() == 0) {
if (predicate.apply(null)) {
return selector.getBitmapFactory().complement( selector.getBitmapFactory().makeEmptyImmutableBitmap(), selector.getNumRows() );
 } else {
return selector.getBitmapFactory().makeEmptyImmutableBitmap();
 } } final BitmapIndex bitmapIndex = selector.getBitmapIndex(dimension);
 return selector.getBitmapFactory().union( new Iterable<ImmutableBitmap>() {
@Override public Iterator<ImmutableBitmap> iterator() {
return new Iterator<ImmutableBitmap>() {
int currIndex = 0;
 @Override public boolean hasNext() {
return currIndex < bitmapIndex.getCardinality();
 } @Override public ImmutableBitmap next() {
while (currIndex < bitmapIndex.getCardinality() && !predicate.apply(dimValues.get(currIndex))) {
currIndex++;
 } if (currIndex == bitmapIndex.getCardinality()) {
return bitmapIndex.getBitmapFactory().makeEmptyImmutableBitmap();
 } return bitmapIndex.getBitmap(currIndex++);
 } @Override public void remove() {
throw new UnsupportedOperationException();
 } };
 } } );
 } }","class _ { public static ImmutableBitmap matchPredicate( final String dimension, final BitmapIndexSelector selector, final Predicate<String> predicate ) {
Preconditions.checkNotNull(dimension, ""dimension"");
 Preconditions.checkNotNull(selector, ""selector"");
 Preconditions.checkNotNull(predicate, ""predicate"");
 final Indexed<String> dimValues = selector.getDimensionValues(dimension);
 if (dimValues == null || dimValues.size() == 0) {
if (predicate.apply(null)) {
return selector.getBitmapFactory().complement( selector.getBitmapFactory().makeEmptyImmutableBitmap(), selector.getNumRows() );
 } else {
return selector.getBitmapFactory().makeEmptyImmutableBitmap();
 } } final BitmapIndex bitmapIndex = selector.getBitmapIndex(dimension);
 return selector.getBitmapFactory().union( new Iterable<ImmutableBitmap>() {
@Override public Iterator<ImmutableBitmap> iterator() {
return new Iterator<ImmutableBitmap>() {
int currIndex = 0;
 @Override public boolean hasNext() {
return currIndex < bitmapIndex.getCardinality();
 } @Override public ImmutableBitmap next() {
while (currIndex < bitmapIndex.getCardinality() && !predicate.apply(dimValues.get(currIndex))) {
currIndex++;
 } if (currIndex == bitmapIndex.getCardinality()) {
return bitmapIndex.getBitmapFactory().makeEmptyImmutableBitmap();
 } return bitmapIndex.getBitmap(currIndex++);
 } @Override public void remove() {
throw new UnsupportedOperationException();
 } };
 } } );
 } }",1
